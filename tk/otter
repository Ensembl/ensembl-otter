#!/usr/bin/env perl
# Copyright [2018] EMBL-European Bioinformatics Institute
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


use strict;
use warnings;

### otter

use POSIX ();
use Bio::Otter::Log::Log4perl;
use Try::Tiny;

use Bio::Otter::Lace::Client;
use Bio::Otter::Git;
use Bio::Otter::Error;
use Bio::Otter::Utils::RipVanWinkle;
use Bio::Otter::Utils::GDCanary; # makes one instance

use CanvasWindow::MainWindow;
use MenuCanvasWindow::SpeciesListWindow;
use EditWindow::Password;

my $logger;
sub run_gui {
    # Become leader of process group so that "kill -$$" at end works
    setpgrp();

    my ($do_recover, @open);
    Bio::Otter::Lace::Defaults::do_getopt(
        'recover!' => \$do_recover,
        'open|o=s' => \@open,
        );

    if (@ARGV) {
        my $name = $ENV{OTTER_RAN_AS};
        if (defined $name) {
            $name =~ s{ -> .*}{};
        } else {
            $name = $0;
        }
        die "$name: options (@ARGV) were not understood"; # RT#334602
    }

    my $client = Bio::Otter::Lace::Defaults::make_Client();
    $client->make_log_file('otter');
    # After this, we are writing logfile
    $logger = Bio::Otter::Log::Log4perl->get_logger('otter.main');

    Bio::Otter::Git->dump($logger);

    $client->env_config;

    $client->cleanup(20); # do it soon, and in a child process, so we don't block

    my $main_window = CanvasWindow::MainWindow->new
      ($Bio::Otter::Lace::Client::PFX."Species List");

    # Look for zombies every 5 seconds
    $main_window->repeat(5000, \&_do_waitpid);

    $main_window->repeat(8 * 3600 * 1000, # 8 hours; RT#317950
                         [ $logger, 'warn', 'Logfile keepalive (8h)' ]);

    # When we wake up late, log it
    my $rvw_ticker = Bio::Otter::Utils::RipVanWinkle->new($main_window, 1000, 3);

    my $SpeciesListWindow = MenuCanvasWindow::SpeciesListWindow->new($main_window);
    $SpeciesListWindow->Client($client);

    my $getpass = EditWindow::Password->init_or_reuse_Toplevel
      (-title => 'Enter Password',
       { from => $main_window,
         init => { client => $client }
       });

    if ($client->no_user_config) {
        $SpeciesListWindow->show_preferences(wait => 1);
    }

    try {
        $client->get_server_otter_config;
        $client->reauthorize_if_cookie_will_expire_soon;
        $SpeciesListWindow->draw;
        $getpass->running(1);
    } catch {
        my $msg = "Cannot start: $_";
        $client->password_problem->($client, $msg);
        die 'Cannot start';
    };

    # postpone slow checks, for improved responsiveness
    $main_window->after(750, [ $SpeciesListWindow, 'ensure_tools' ]);

    if ($do_recover) { # otter --recover
        $main_window->iconify;
        $main_window->afterIdle([ $SpeciesListWindow, 'recover_some_sessions', 'no_wait']);
    }
    foreach my $task (@open) {
        require Bio::Otter::Utils::AutoOpen; # load iff needed
        my $opener = Bio::Otter::Utils::AutoOpen->new($SpeciesListWindow);
        $opener->parse_path($task);
        # Failure will kill the app, we assume the caller is reading
        # the terminal.  Else job done, just wait.
        # $opener->hide_after(1);
    }

    Tk::MainLoop();
    $logger->info("GUI exit");

    return;
}

sub main {
    my $exit = 0;
    try {
        run_gui();
    } catch {
        $logger->error("GUI shutdown: $_");
        $exit = 20;
    } finally {

        try { _do_waitpid() }; # extra zombie check to assist debugging

        Bio::Otter::LogFile->unmake_log;
        local $SIG{'TERM'} = 'IGNORE';

        # Sending signal to negative of our PID sends
        # signal to all the processes in our process
        # group, ie: all of the children. This cleans
        # up any stray processes we have launched.
        kill TERM => -$$;

        # NB. we are still here, and so is our logger.  Session recovery
        # may be blocked until we are gone.

        sleep 1;
        _do_waitpid(); # extra zombie check to assist debugging
    };

    return $exit;
}

sub _do_waitpid {
    while ((my $dead_pid = waitpid(-1, POSIX::WNOHANG)) > 0) {
        my $rc = $?;
        $rc .= ($rc & 127
                ? ' = signal '.($rc & 127)
                : ' = rc '.($rc >> 8)) if $rc != 0;
        $logger->warn("Process $dead_pid exited $rc");
    }
    return;
}

exit main();

__END__

=head1 NAME - otter

=head1 DESCRIPTION

B<otter> is a graphical client for the otter
annotation database that uses a local acedb
database with ZMap and Perl/Tk tools to provide a
gene annotation interface.

=head1 COMMAND LINE

The standard parameters controlled by the
B<Bio::Otter::Lace::Defaults> module can be given
on the command line, but the user will not
usually need to give them.  See its documentation
for details.

=head1 FLAGS

=over 4

=item B<view>

Turns off write access to the database, providing
a safe read-only session.  It is still possible
to edit gene structures, but they will not be
saved to the otter server.

=back

=head1 AUTHOR

Ana Code B<email> anacode@sanger.ac.uk

