#!/usr/bin/env perl
# Copyright [2018-2022] EMBL-European Bioinformatics Institute
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


use strict;
use warnings;


### ens_blast_dotter

use Bio::EnsEMBL::DBSQL::DBAdaptor;
use Data::Dumper;
use Hum::Submission 'sanger_name';
use Hum::EnsCmdLineDB;
use lib qw(/nfs/disk100/humpub/scripts/tk);
use CanvasWindow;

my   $sel_tag = 'selected';
my   $lab_tag = 'seq_label';
my   $seq_tag = 'seq_rect';
my $match_tag = 'match';

my    $sel_color = 'LemonChiffon';
my  $match_color = '#284d49';
my $active_color = '#ff0000';

my $pad = 5;
my $font = ['Helvetica', 12, 'bold'];

{
    my $chr_name = '9';
    my $assembly_name = 'chr9_peri_analysis';
    my $chr_start = 0;
    my $min_percent_id = 95;
    my $logic_name = 'contig_vs_contig';
    my $scale = 1_000;
    Hum::EnsCmdLineDB::do_getopt(
        'chr=s'         => \$chr_name,
        'chr_start=s'   => \$chr_start,
        'assembly_name' => \$assembly_name,
        'percent=f'     => \$min_percent_id,
        'analysis=s'    => \$logic_name,
        'scale=i'       => \$scale,
        );
    my $ensdb = Hum::EnsCmdLineDB::connect();
    
    print STDERR "Ignoring hits below $min_percent_id% identity\n";
    
    # some adaptors
    my $assemblyAdaptor = $ensdb->get_AssemblyMapperAdaptor();
    my $rawContigAdaptor = $ensdb->get_RawContigAdaptor();
    my $anaAdaptor = $ensdb->get_AnalysisAdaptor();
    
    my $ana = $anaAdaptor->fetch_by_logic_name($logic_name) or die "Can't get Analysis object for '$logic_name'";
    my $ana_id = $ana->dbID;
    
    my $assembly = $assemblyAdaptor->fetch_by_type($assembly_name);
    my $chromosome = $ensdb->get_ChromosomeAdaptor->fetch_by_chr_name($chr_name);



    my( @map );
    # assembly map method 1
    foreach my $map($assembly->map_coordinates_to_rawcontig($chr_name, $chr_start, $chromosome->length, 1)){
        next unless($map->isa('Bio::EnsEMBL::Mapper::Coordinate'));
        my ($start, $end, $name, $id, $strand);
        my $rc = $rawContigAdaptor->fetch_by_dbID($map->id);
        my $a_map = [ $assembly->map_coordinates_to_assembly($map->id, $map->start, $map->end, $map->strand) ];
        $start = $a_map->[0]->start - $chr_start;
        $end = $a_map->[0]->end - $chr_start;
        $strand = $a_map->[0]->strand;
        ($name) = $rc->name =~ /(\w+\.\d+)/;
        $id = $map->id;
        ##print STDERR join(":",($start, $end, $name, $id)) . "\n";
        push(@map, [$start, $end, $name, $id, $strand]);
    }
    
    
    my $mw = CanvasWindow::MainWindow->new("$chr_name contig vs contig");
    my $cw = CanvasWindow->new($mw);
    my $canvas = $cw->canvas;
    $canvas->CanvasBind(              '<Button-1>', \&handle_button_1);
    $canvas->CanvasBind(        '<Shift-Button-1>', \&handle_shift_button_1);
    $canvas->CanvasBind(      '<Control-Button-1>', sub{ zoom_in( $cw) });
    $canvas->CanvasBind('<Control-Shift-Button-1>', sub{ zoom_out($cw) });
    my $print_to_file = sub {
            $cw->page_width(591);
            $cw->page_height(841);
            my @files = $cw->print_postscript("${chr_name}_ctg_v_ctg");
            warn "Printed to files:\n",
                map "  $_\n", @files;
          };
    $canvas->CanvasBind('<Control-p>', $print_to_file);
    $canvas->CanvasBind('<Control-P>', $print_to_file);
    #$canvas->configure(-cursor => 'plus');

    my $col_max = 1;
    my $feature_count = 0;
    my $x_offset = 200;
    for (my $row = 0; $row < @map; $row++, $col_max++) {
        my $row_data = $map[$row];
        my $y1       = $row_data->[0] / $scale;
        my $y2       = $row_data->[1] / $scale;
        my $row_name = $row_data->[2];
        my $row_label = $canvas->createText(
            $x_offset - $pad, ($y1 + (($y2 - $y1) / 2)),
            -text       => sanger_name_from_contig_id($row_name),
            -anchor     => 'e',
            -justify    => 'right',
            -tags       => ['y_label'],
            );
        
        for (my $col = 0; $col < $col_max; $col++) {
            my $col_data = $map[$col];
            my $x1       = $x_offset + ($col_data->[0] / $scale);
            my $x2       = $x_offset + ($col_data->[1] / $scale);
            my $col_name =              $col_data->[2];
            my $col_id   =              $col_data->[3];

            my $seq_rect = $canvas->createRectangle($x1, $y1, $x2, $y2,
                -outline    => 'grey',
                -fill       => 'white',
                -tags       => [
                    $seq_tag,
                    "row=$row_name",
                    "col=$col_name",
                    sanger_tag('sanger_row', $row_name),
                    sanger_tag('sanger_col', $col_name),
                    ],
                );
            
            my $sql = qq{
                SELECT contig_start
                  , contig_end
                  , contig_strand
                  , hit_start
                  , hit_end
                  , perc_ident
                FROM dna_align_feature
                WHERE contig_id = $col_id
                  AND analysis_id = $ana_id
                  AND hit_name = '$row_name'
                };

            my $sth = $ensdb->prepare($sql);
            $sth->execute;
            
            my ($col_start, $col_end, $col_strand,
                $row_start, $row_end, $pid);
            $sth->bind_columns(
                \$col_start, \$col_end, \$col_strand,
                \$row_start, \$row_end, \$pid);
            
            while ($sth->fetch) {
                next unless $pid >= $min_percent_id;
                my $length = $col_end - $col_start + 1;
                if ($col_strand == -1) {
                    ($col_start, $col_end) = ($col_end, $col_start);
                }
                $canvas->createLine(
                    $x1 + ($col_start / $scale),
                    $y1 + ($row_start / $scale),
                    $x1 + ($col_end   / $scale),
                    $y1 + ($row_end   / $scale),
                    -width      => 2,
                    -fill       => pid_color($pid, $match_color),
                    -activefill => pid_color($pid, $active_color),
                    -tags       => [
                        $match_tag,
                        "pid=$pid",
                        "length=$length",
                        ],
                    );
                $feature_count++;
                unless ($feature_count % 10) {
                    print STDERR ".";
                    unless ($feature_count % 500) {
                        printf STDERR " %10d\n", $feature_count;
                    }
                }
            }
        }
        if (0 and $row > 10) {
            warn "DEBUG BAILOUT";
            last;
        }
    }
    printf STDERR " %10d\n", $feature_count;
    
    # Put the sequence background under everything else
    $canvas->lower($seq_tag, 'all');
    
    my $rec = $canvas->createRectangle(
        $canvas->bbox($seq_tag),
        -outline    => undef,
        -fill       => 'grey',
        );
    $canvas->lower($rec, 'all');
        #$canvas->createRectangle($x1, $x2, $x1, $x2);
    
    $cw->fix_window_min_max_sizes;
    
    
    Tk::MainLoop();
}

sub zoom_in {
    my( $cw ) = @_;
    
    $cw->canvas->scale('all', 0,0,2,2);
    $cw->set_scroll_region_and_maxsize;
    #$cw->fix_window_min_max_sizes;
}

sub zoom_out {
    my( $cw ) = @_;
    
    $cw->canvas->scale('all', 0,0,0.5,0.5);
    $cw->set_scroll_region_and_maxsize;
    #$cw->fix_window_min_max_sizes;
}

sub handle_button_1 {
    my( $canvas ) = @_;

    
    $canvas->delete($lab_tag);
    my @selected = $canvas->find('withtag', $sel_tag);
    if (@selected) {
        foreach my $obj (@selected) {
            $canvas->itemconfigure($obj, -fill => 'white');
            $canvas->dtag($obj, $sel_tag);
        }
    }

    handle_shift_button_1($canvas);
}

sub handle_shift_button_1 {
    my( $canvas ) = @_;
    
    if (my $area = $canvas->find('withtag', "$seq_tag&&current")) {
        highlight_sequence_rectangle($canvas, $area);
    }
    elsif (my $match = $canvas->find('withtag', "$match_tag&&current")) {
        print_match_info($canvas, $match);
    }
}

sub print_match_info {
    my( $canvas, $match ) = @_;
    
    my $inf = get_canvas_item_info($canvas, $match);
    my @bbox = $canvas->bbox($match);
    my $txt = "$inf->{length}bp at $inf->{pid}\%";
    $canvas->createText(
        $bbox[0], $bbox[1],
        -text   => $txt,
        -font   => $font,
        -anchor => 'sw',
        -tags   => [$lab_tag],
        );
}

sub highlight_sequence_rectangle {
    my( $canvas, $area ) = @_;

    $canvas->addtag($sel_tag, 'withtag', $area);
    $canvas->itemconfigure($area, -fill => $sel_color);
    
    my $inf = get_canvas_item_info($canvas, $area);
    
    my ($x1, $y1, $x2, $y2) = $canvas->coords($area);
    my $x_pos = $x1 + (($x2 - $x1) / 2);
    my $y_pos = $y1 + (($y2 - $y1) / 2);
    my $col_label = $canvas->createText(
        $x_pos, $y1 - $pad,
        -text       => $inf->{'sanger_col'},
        -anchor     => 's',
        -justify    => 'center',
        -tags       => [$lab_tag],
        );
    my $row_label = $canvas->createText(
        $x1 - $pad, $y_pos,
        -text       => $inf->{'sanger_row'},
        -anchor     => 'e',
        -justify    => 'right',
        -tags       => [$lab_tag],
        );
    
    my $lab_pad = $pad / 2;
    
    my @col_label_rect = expand_bbox($pad / 2, $canvas->bbox($col_label));
    my $clr = $canvas->createRectangle(
        @col_label_rect,
        -fill       => $sel_color,
        -outline    => undef,
        -tags       => [$lab_tag],
        );
    $canvas->lower($clr, $col_label);

    my @row_label_rect = expand_bbox($pad / 2, $canvas->bbox($row_label));
    my $rlr = $canvas->createRectangle(
        @row_label_rect,
        -fill       => $sel_color,
        -outline    => undef,
        -tags       => [$lab_tag],
        );
    $canvas->lower($rlr, $row_label);
}

sub expand_bbox {
    my( $pad, @bbox ) = @_;
    
    $bbox[0] -= $pad;
    $bbox[1] -= $pad;
    $bbox[2] += $pad;
    $bbox[3] += $pad;
    
    return @bbox;
}

sub get_canvas_item_info {
    my( $canvas, $item ) = @_;
    
    my $inf = {};
    foreach my $tag ($canvas->gettags($item)) {
        if (my ($t, $v) = split /=/, $tag, 2) {
            $inf->{$t} = $v;
        }
    }
    return $inf;
}

{
    my( %contig_sanger );
    
    sub sanger_name_from_contig_id {
        my( $contig_id ) = @_;
        
        my( $sanger_name );
        unless ($sanger_name = $contig_sanger{$contig_id}) {
            my ($acc) = $contig_id =~ /^([^.]+)/;
            $sanger_name = $contig_sanger{$contig_id} = sanger_name($acc);
        }
        return $sanger_name;
    }
}

sub sanger_tag {
    my( $prefix, $contig_id ) = @_;

    return "$prefix=" . sanger_name_from_contig_id($contig_id);
}

{
    my( %hex_rgb );
    
    sub pid_color {
        my( $pid, $hex_color ) = @_;

        $pid /= 100;
        my $max = 0xff;
        my $rgb = $hex_rgb{$hex_color} ||= web_hex_to_rgb($hex_color);
        my $faded_rgb = '#';
        foreach my $n (@$rgb) {
            $faded_rgb .= sprintf "%02x", $n + (($max - $n) * (1 - $pid));
        }
        return $faded_rgb;
    }
}

sub make_tile_colours {
    my( $rgb_param, $n_steps ) = @_;
    
    my $max = 0xff;
    my @begin_rgb = web_hex_to_rgb($rgb_param);
    
    my( @steps );
    for (my $i = 0; $i < $n_steps; $i++) {
        my $rgb = [];
        foreach my $c (@begin_rgb) {
            push(@$rgb,
                $c + (($max - $c) / $n_steps) * $i
                );
        }
        push(@steps, $rgb);
    }
    push(@steps, [$max, $max, $max]);
    
    return @steps
}

sub web_hex_to_rgb {
    my( $rgb_param ) = @_;
    
    my @rgb = $rgb_param =~ /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
        or die "Illegal rgb parameter '$rgb_param'\n";
    return [map hex($_), @rgb];
}


__END__

=head1 NAME - ens_blast_dotter

=head1 AUTHOR

James Gilbert B<email> jgrg@sanger.ac.uk

