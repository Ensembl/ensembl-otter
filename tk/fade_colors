#!/usr/bin/env perl
# Copyright [2018-2019] EMBL-European Bioinformatics Institute
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


use strict;
use warnings;

### show_acedb_colors

use CanvasWindow;
use Hum::Ace::Colors;
use Graphics::ColorObject;

{
    my $mw = CanvasWindow::MainWindow->new;
    $mw->title('fade a color');
    my $cw = CanvasWindow->new($mw);
    # $cw->canvas->SelectionHandle(
    #     -selection  => 'PRIMARY',
    #     sub{
    #         warn "Selection requested\n";
    #         $cw->selected_text_to_clipboard(@_);
    #         
    #     });

    my $color = 'SlateBlue';
    my $color_ref = \$color;

    my $frame = $cw->top_window->Frame->pack(-side => 'bottom');
    my $entry = $frame->Entry(-width => 24, -textvariable => $color_ref)->pack(-side => 'left');
    my $redraw = sub{ render($cw, $color_ref) };
    $entry->bind('<Return>', $redraw);
    my $calc = $frame->Button(-text => 'Draw', -command => $redraw)->pack(-side => 'left');
    
    render($cw, $color_ref);

    $cw->fix_window_min_max_sizes;

    Tk::MainLoop();
}

sub render {
    my ($cw, $color_ref) = @_;
    
    my $canvas = $cw->canvas;
    $canvas->delete('all');
    
    my $original = $$color_ref;
    my ($max) = $canvas->rgb('white');
    my $rgb = [map $_ / $max, $canvas->rgb($original)];
    # warn "$max RGB = [@$rgb]\n";
    my $color = Graphics::ColorObject->new_RGB($rgb);
    # my @color_list = ('#' . $color->as_RGBhex);
    my @color_list = ($original);
    my $step = 1 / 7;
    for (my $f = $step; $f < 1; $f += $step) {
        my $faded = lighten($color, $f);
        unshift (@color_list, '#' . lc $faded->as_RGBhex);
    }
    for (my $f = 1 - $step; $f > 0; $f -= $step) {
        my $faded = dullen($color, $f);
        push (@color_list, '#' . lc $faded->as_RGBhex);
    }
    
    my $size = 15;
    my $pad = $size / 2;
    my $font = ['Helvetica', $size, 'normal'];
    for (my $i = 0; $i < @color_list; $i++) {
        my $dulled = $color_list[$i];
        my $x1 = $size;
        my $x2 = $x1 + $size;
        my $y1 = $size + (($size + $pad) * $i);
        my $y2 = $y1 + $size;
        my $tags = [$dulled];

        $canvas->createRectangle(
            $x1, $y1, $x2, $y2,
            -fill       => $original,
            -outline    => $dulled,
            -tags       => $tags,
            );
        
        $canvas->createRectangle(
            $x2 + $pad, $y1, $x2 + $pad + $size, $y2,
            -fill       => $dulled,
            -outline    => $original,
            -tags       => $tags,
            );
        
        my $txt = $canvas->createText(
            $x2 + $size + $size, $y1,
            -text   => $dulled,
            -anchor => 'nw',
            -font   => $font,
            -tags       => $tags,
            );

        $canvas->bind($dulled, '<Button-1>', sub{
            # $cw->deselect_all;
            # $cw->highlight($txt);
            $canvas->selectClear;
            $canvas->selectFrom($txt, 0);
            $canvas->selectTo  ($txt, 'end');
            $canvas->SelectionOwn(
                # -command => sub{ $cw->deselect_all },
                -command => sub{ $canvas->selectClear },
                );
            });
    }
}

sub dullen {
    my ($color, $factor) = @_;
    
    my $lch = $color->as_HSL;
    $lch->[1] *= $factor;
    $lch->[2] *= $factor;
    # print STDERR "$factor HSL = [@$lch]\n";
    return Graphics::ColorObject->new_HSL($lch);
}

sub lighten {
    my ($color, $factor) = @_;
    
    my $lch = $color->as_HSL;
    # $lch->[0] = $lch->[0] + ($factor * (100 - $lch->[0]));
    # print STDERR "[@$lch]\n";
    $lch->[1] = $lch->[1] + ($factor * (1 - $lch->[1]));
    $lch->[2] = $lch->[2] + ($factor * (1 - $lch->[2]));
    # print STDERR "$factor HSL = [@$lch]\n";
    return Graphics::ColorObject->new_HSL($lch);
}

__END__

=head1 NAME - fade_colors

=head1 AUTHOR

James Gilbert B<email> jgrg@sanger.ac.uk

