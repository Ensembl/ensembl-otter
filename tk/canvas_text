#!/usr/bin/env perl
# Copyright [2018-2019] EMBL-European Bioinformatics Institute
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


use strict;
use warnings;


### canvas_text

use CanvasWindow;

{
    my $mw = CanvasWindow::MainWindow->new;
    $mw->title('Text test');
    $mw->bind(<Control-q>, sub {exit 0});
    $mw->bind(<Control-Q>, sub {exit 0});
    
    my $cw = CanvasWindow->new($mw);
    
    my $canvas = $cw->canvas;
    my $rec = $canvas->createRectangle(1,1,500,200,
        -fill       => '#ffffff',
        -outline    => '#999999',
        );
    
    # Look at the "Tk::bind" man page for the Ev subroutine's documenation
    $canvas->Tk::bind('<Button-1>',         [ \&deal_with_button_1,     Tk::Ev('x'), Tk::Ev('y') ] );
    $canvas->Tk::bind('<Button-2>',         [ \&paste_into_text,        Tk::Ev('x'), Tk::Ev('y') ] );
    $canvas->Tk::bind('<Double-Button-1>',  [ \&deal_with_double_click, Tk::Ev('x'), Tk::Ev('y') ] );
    $canvas->Tk::bind('<BackSpace>',          \&backspace                                          );
    $canvas->Tk::bind('<Left>',               \&go_left                                            );
    $canvas->Tk::bind('<Right>',              \&go_right                                           );
    $canvas->Tk::bind('<<alpha_num>>',      [ \&insert_character,       Tk::Ev('A')              ] );
    
    
    $canvas->eventAdd('<<alpha_num>>', map "<KeyPress-$_>", ' ', "a".."z", "A".."Z", 0..9);

    $canvas->SelectionHandle( sub{ put_selection($canvas, @_) } );

    my $size = 15;
    my $x = 10;
    my $y_begin = $x;
    for (my $i = 0; $i < 11; $i++) {
        my $y = $y_begin + ($i * $size + $i);
        my $row_num = $i + 1;
        my $text = "Text in row $row_num";
        make_editable_label($canvas, $x, $y, $text, $size);
    }
    
    $cw->fix_window_min_max_sizes;
    
    Tk::MainLoop();
}

sub make_editable_label {
    my( $canvas, $x, $y, $text, $size ) = @_;
    
    $size ||= 15;
    
    my $t = $canvas->createText(
        $x,$y,
        -anchor => 'nw',
        -text   => $text,
        -justify => 'right',
        -font   => ['lucidatypewriter', $size, 'normal'],
        -tags   => ['test text'],
        );
    #$canvas->bind($t, '<Button-1>',     \&select_text);
}

BEGIN {
    my $sel_tag = 'SelectedThing';
    my $selected = 0;
    my $empty_string = '<empty>';

    sub put_selection {
        my( $canvas, $offset, $max_bytes ) = @_;
        
        my $obj   = $canvas->selectItem;
        my $first = $canvas->index($obj, 'sel.first');
        my $last  = $canvas->index($obj, 'sel.last');
        my $text  = $canvas->itemcget($obj, 'text');
        my $substr = substr($text, $first, $last - $first + 1);
        if (length($substr) > $max_bytes) {
            die "Selection too long, length=", length($substr);
        } else {
            return $substr;
        }
    }

    sub deal_with_button_1 {
        my( $canvas, $x, $y ) = @_;

        my $obj = $canvas->find('withtag', 'current');
        unless ($obj) {
            deselect($canvas);
            return;
        }
        
        if ($obj != $selected) {
            deselect($canvas);
        }

        my $type = $canvas->type($obj)
            or return;
        
        if ($type eq 'text') {
        
            # Position the icursor in the text
            my($x,$y) = canvas_x_y($canvas, $x, $y);
            my $pos = $canvas->index($obj, [$x, $y]) + 1;
            $canvas->icursor($obj, $pos);
            
            if ($canvas->itemcget($obj, 'text') eq $empty_string) {
                $canvas->itemconfigure($obj, 
                    -text   => '',
                    );
            }
            
            # Hightlight and focus if it isn't the
            # current object
            if ($obj != $selected) {
                $canvas->focus($obj);
                maintain_highlight_rectangle($canvas, $obj);
                $selected = $obj;
            }
        }
    }
    
    sub paste_into_text {
        my( $canvas, $x, $y ) = @_;
        
        my( $text );
        eval {
            $text = $canvas->SelectionGet;
        };
        return if $@;
        my $obj  = $canvas->find('withtag', 'current')  or return;
        my $type = $canvas->type($obj)                  or return;
        if ($type eq 'text') {
            $canvas->itemconfigure($obj, 
                -text   => $text,
                );
        }
        #deal_with_button_1($canvas, $x, $y);
    }
    
    sub deselect {
        my( $canvas ) = @_;
        
        $canvas->selectClear;
        
        # Avoid unselectable empty text objects
        if (my $obj = $canvas->focus) {
            if ($canvas->type($obj) eq 'text') {
                my $text_string = $canvas->itemcget($obj, 'text');
                unless ($text_string) {
                    $canvas->itemconfigure($obj, 
                        -text   => $empty_string,
                        );
                }
            }
        }
        
        $canvas->delete($sel_tag);
        $canvas->focus("");
        $selected = 0;
    }
    
    sub maintain_highlight_rectangle {
        my( $canvas, $obj ) = @_;
        
        $canvas->delete($sel_tag);
        
        my @bbox = $canvas->bbox($obj);
        $bbox[0] -= 1;
        $bbox[1] -= 1;
        $bbox[2] += 1;
        $bbox[3] += 1;
        my $rec = $canvas->createRectangle(
            @bbox,
            -fill       => 'lavender',
            -outline    => undef,
            -tags       => [$sel_tag],
            );
        $canvas->lower($rec, $obj);
    }

    sub deal_with_double_click {
        my( $canvas, $x, $y ) = @_;

        warn "Double click";

        $canvas->selectClear;
        
        my ($obj) = $canvas->find('withtag', 'current')
            or return;
        my $focus = $canvas->focus
            or return;
        if ($obj == $focus) {
            my $type = $canvas->type($obj)
                or return;
            if ($type eq 'text') {
                $canvas->selectFrom($obj, 0);
                $canvas->selectTo  ($obj, 'end');
                $canvas->SelectionOwn(
                    -command => [ \&deselect, $canvas ],
                    );
            }
        }
    }
}

sub canvas_x_y {
    my( $canvas, $x, $y ) = @_;
    
    #my ($x,$y) = $xy =~ /^\@(\d+),(\d+)/
    #    or die "Wierd xy: '$xy'";
    $x = $canvas->canvasx($x);
    $y = $canvas->canvasy($y);
    
    return($x, $y);
}

sub backspace {
    my( $canvas ) = @_;

    my $text = $canvas->focus or return;

    my $pos = $canvas->index($text, 'insert')
        or return;  # Don't delete when at beginning of string
    $canvas->dchars($text, $pos - 1);
    maintain_highlight_rectangle($canvas, $text);
}

sub go_left {
    my( $canvas ) = @_;

    my $text = $canvas->focus or return;

    my $pos = $canvas->index($text, 'insert');
    $canvas->icursor($text, $pos - 1);
}

sub go_right {
    my( $canvas ) = @_;

    my $text = $canvas->focus or return;

    my $pos = $canvas->index($text, 'insert');
    $canvas->icursor($text, $pos + 1);
}

    
sub insert_character {
    my( $canvas, $char ) = @_;

    return unless $char =~ /^[a-zA-Z0-9 ]$/;

    my $text = $canvas->focus or return;
    $canvas->insert($text, 'insert', $char);
    maintain_highlight_rectangle($canvas, $text);
}

__END__

=head1 NAME - canvas_text

=head1 AUTHOR

James Gilbert B<email> jgrg@sanger.ac.uk
