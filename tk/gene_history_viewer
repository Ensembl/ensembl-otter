#!/usr/bin/env perl
# Copyright [2018] EMBL-European Bioinformatics Institute
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


use strict;
use warnings;


# gene_history_viewer.pl
# Author: ck1@sanger.ac.uk

use Text::Tabs;
use FileHandle;
use Bio::Otter::Lace::Defaults;
use Bio::Vega::DBSQL::DBAdaptor;
use Bio::Vega::Transform::RegionToXML;
use Tk;
use Tk::Font;
use Tk::Tree;
use Tk::Adjuster;
use Tk::BrowseEntry;
use Tk::NoteBook;
use Tk::ROText;
use Tk::X11Font;
use Tk::DynaTabFrame;
use Tk::MListbox;
use GeneHist::DataUtils qw (
                            convert_unix_time
                            get_all_sub_nodes
                            pretty_print_xmlcmp
                            build_geneinfo_nodes
                            build_transinfo_nodes
                            build_geneinfo_tree
                            process_query
                            get_gsids_by_created_ver_modtime
                            get_list_of_obsolete_genes_by_assembly
                            add_mlist_items
                           );

use GeneHist::WidgetUtils qw (
                              show_err_msg
                              refresh_gui
                              adjust_scrollbar_width
                              add_GH_qry_frm
                              add_GH_btn_frm
                              add_GH_data_frm
                              add_DG_MListbox
                             );
use Hum::Sort ('ace_sort');

Bio::Otter::Lace::Defaults::do_getopt();
my $client;
my $dset  ;
my $otter_db;
my $ga ;

#----------------
#     Layout
#----------------

my $mw = new MainWindow;
$mw->optionAdd('*BorderWidth' => 1); # instead of default, which is 2
$mw->configure (title => 'Gene History Viewer');
#$mw->geometry('1250x600+0+0');
$mw->geometry('1250x600');

my $font_hl = $mw->fontCreate(-family=>'helvetica', -size=>9);
my $font_cr = $mw->X11Font('-*-courier-medium-r-*-*-12-*-*-*-*-*-*-*'); # play with xfontsel

my $btm_f = $mw->Frame(-relief => 'groove', -borderwidth => 1)
-> pack(-side=>'top', -fill=>'x');

gene_history_srch();

my($query_f, $query, $entry1, $ds_entry);
my ($btn_f, $btn_cmp, $btn_all_nodes, $btn_V_nodes, $btn_GT_nodes, $srchtxt, $srch_entry, $src_btn);
my ($data_f, $tree, $xml_f);
my ($nb, $tab, $page, $pagetxt, $page_txtobj);
my ($browser, $asm_var, $mlist);
my ($dg_stat, $dginfo);

MainLoop();

#--------------------------
#     subroutines
#--------------------------

sub gene_history_srch {

  #----------------------------
  # gene history search layout
  #----------------------------
  if ( $btm_f ){
    $browser->destroy if $browser;
    $btm_f = refresh_gui($btm_f);
  }

  # query frame globals
  ($query_f, $query, $entry1, $ds_entry) = add_GH_qry_frm($btm_f, $font_hl, \&get_gene_history);

  # button frame globals (hosting buttons to display results)
  ($btn_f, $btn_cmp, $btn_all_nodes, $btn_V_nodes, $btn_GT_nodes, $srchtxt, $srch_entry, $src_btn) =
    add_GH_btn_frm($font_hl, $btm_f, \&compare_gene_versions,
                   \&open_or_close_all_nodes, \&open_close_V_nodes,
                   \&open_close_geneTrans_info_nodes,
                   \&search_xml);

  # data frame globals
  ($data_f, $tree, $xml_f) = add_GH_data_frm($btm_f, $font_hl);

  #------------------------------------------------
  #  notebook related globals:
  #  to tab-browse side-by-side xml data
  #------------------------------------------------
  ($nb, $tab, $page, $pagetxt, $page_txtobj);
}

sub search_xml {
  #$page = $nb->raised;     # NoteBook, returns name
  $page = $nb->raised_name; # DynaTabFrame, raised() returns the frame widget, not name

  if ( my $srch = $page_txtobj->{$page}->getSelected ){
    # use highlighted txt as search str
	$page_txtobj->{$page}->FindAll(-regexp, -nocase, $srch);
  }
  else {
    my $srch = ${$srch_entry->cget(-textvariable)};
	$page_txtobj->{$page}->FindAll(-regexp, -nocase, $srch);
  }
}

sub adv_search_xml {
  my $srch = ${$srch_entry->cget(-textvariable)};
  $page_txtobj->{$page}->FindPopUp;
}

sub compare_gene_versions {

  my @paths = $tree->info('selection');
  foreach ( @paths ){
	if ( $_ !~ /^G\d+\.V\d+-\d+$/ ){
	  show_err_msg($btm_f, $font_hl);
	  next;
	}
  }
  if ( scalar @paths != 2 ){
	show_err_msg($btm_f, $font_hl);
	next;
  }

  my $outdir = '/tmp';
  system("/bin/rm -f $outdir/ghv_G*.V*");

  my @files;

  # $path is the hierarchy in tree widget
  foreach my $path (@paths ){

	my $geneobj = $tree->info('data', $path);
    my $xmlg    = new Bio::Vega::Transform::RegionToXML;
    my $file    = "$outdir/ghv_$path"."_$$";
    open( my $fh, ">$file") or die;
    print $fh $xmlg->get_geneXML($geneobj);
    push(@files, $file);
  }

  my $cmd = "sdiff -w 170 @files";
  my $fh = new FileHandle;
  $fh->open("$cmd|") or die;
  my @xmlcmp = <$fh>;

  # dealing with tab spaces that disrupts formatting
  @xmlcmp = expand(@xmlcmp);

  my $tabstr = join('-', @paths);

  # add pages to notebook to display XML comparison of 2 gene versions
  $nb      = make_nb();
  $tab     = $nb->add($tabstr, -label=>$tabstr);
  $pagetxt = $tab->Scrolled(
							'ROText',
							-font=>$font_cr,
							-scrollbars=>"osoe",
                            -wrap=>'none',
							-bg=>'#EEEEE0',
							-selectbackground=>'#EEC900',
                            -border=>1,
						   )->pack(-side=>'left', -fill=>'both', -expand=>1);

  adjust_scrollbar_width($pagetxt, 10);

  $pagetxt = pretty_print_xmlcmp($pagetxt, @xmlcmp);

  # mappings of tab to text widget
  $page_txtobj->{$tabstr}= $pagetxt;

  MainLoop;
}

sub make_nb {

  #$nb = $xml_f->NoteBook(-backpagecolor=>'#BFBFBF', -font=>$font_cr)
  #	->pack(-side=>'left', -fill=>'both', -expand=>1 ) if !$nb;

  $nb = $xml_f->DynaTabFrame(
                             -font => $font_hl,
                             -tabclose =>
                             sub {
                                my ($obj, $tab) = @_;
                                print "Closing $tab\n";
                                $obj->delete($tab);
                              },
                             -tabcolor => "#CCCCCC",
                             -raisecolor => "#EDEDED",
                             -tabpadx => 1,
                             -tabpady => 1,
                             -border=>1,
                            )
	->pack (-side => 'left', -expand => 1, -fill => 'both') if !$nb;
  return $nb;
}

sub open_or_close_all_nodes {

  my @all_sub_nodes = get_all_sub_nodes($tree);
  if ( $btn_all_nodes->cget('-text') =~ /Collapse/ ){
    $btn_all_nodes->configure(-text=>'Expand All Nodes');

    # make sure the behavior of button $btn_GT_nodes makes sense
    # when button $btn_all_nodes text is changed
    $btn_GT_nodes->configure(-state=>'disabled', -text=>'Collapse Gene/TransInfo Nodes');
	$btn_V_nodes->configure(-state=>'disabled', -text=>'Collapse V Nodes');
    foreach my $sn ( @all_sub_nodes ){
      if ( $sn =~ /G\d+/ ){
        $tree->close($sn);
        next;
      }
    }
  }
  else {
    $btn_all_nodes->configure(-text=>'Collapse All Nodes');
    foreach my $sn ( @all_sub_nodes ){
      $tree->open($sn);
    }
    # make sure the behavior of button $btn_GT_nodes makes sense
    # when button $btn_all_nodes text is changed
    $btn_GT_nodes->configure(-state=>'active', -text=>'Collapse Gene/TransInfo Nodes');
	$btn_V_nodes->configure(-state=>'active', -text=>'Collapse V Nodes');
  }
}

sub open_close_geneTrans_info_nodes {

  my @all_sub_nodes = get_all_sub_nodes($tree);

  if ( $btn_GT_nodes->cget('-text') =~ /Collapse/ ){
    $btn_GT_nodes->configure(-text=>'Expand Gene/TransInfo Nodes');

    foreach my $sn ( @all_sub_nodes ){
      if ( $sn =~ /GeneInfo$|TransInfo$/ ){
        $tree->close($sn);
      }
    }
  }
  else {
    $btn_GT_nodes->configure(-text=>'Collapse Gene/TransInfo Nodes');

    foreach my $sn ( @all_sub_nodes ){
      if ( $sn =~ /GeneInfo$|TransInfo$/ ){
        $tree->open($sn);
      }
    }
  }
}

sub open_close_V_nodes {

  my @all_sub_nodes = get_all_sub_nodes($tree);

  if ( $btn_V_nodes->cget('-text') =~ /Collapse/ ){
    $btn_all_nodes->configure(-text=>'Expand All Nodes');
    $btn_V_nodes->configure(-text=>'Expand V Nodes');
	$btn_GT_nodes->configure(-text=>'Collapse Gene/TransInfo Nodes', -state=>'disabled');
    foreach my $sn ( @all_sub_nodes ){
      if ( $sn =~ /V\d+/ ){
        $tree->close($sn);
      }
    }
  }
  else {
    $btn_all_nodes->configure(-text=>'Collapse All Nodes');
    $btn_V_nodes->configure(-text=>'Collapse V Nodes');
	$btn_GT_nodes->configure(-text=>'Collapse Gene/TransInfo Nodes', -state=>'active');
    foreach my $sn ( @all_sub_nodes ){
      if ( $sn =~ /V\d+/ ){
        $tree->open($sn);
      }
    }
  }
}

sub get_gene_history {

  my $ds_name = ${$ds_entry->cget(-textvariable)};
  warn "DS: $ds_name----------";
  $client   = Bio::Otter::Lace::Defaults::make_Client(); # Bio::Otter::Lace::Client
  my $dset  = $client->get_DataSet_by_name($ds_name);    # Bio::Otter::Lace::DataSet
  $otter_db = $dset->make_Vega_DBAdaptor;                # Bio::Vega::DBSQL::DBAdaptor
  $ga       = $otter_db->get_GeneAdaptor;

  # remove notebook tabs (pages) if exist
  if ($nb){
    $nb->destroy;
    $nb = undef;
    make_nb();
  }

  # default to close on each submit
  $btn_all_nodes->configure(-text=>'Collapse All Nodes');
  $btn_GT_nodes->configure(-text=>'Collapse Gene/TransInfo Nodes', -state=>'active');
  $btn_V_nodes->configure(-text=>'Collapse V Nodes', -state=>'active');

  my $query_str = ${$entry1->cget(-textvariable)};
  $query_str =~ s/^\s+|\s+$//g; # trim leading/trailing spaces

  my $found_gsids = process_query($query_str, $otter_db, $btm_f);

  print_all_gene_infos($ga, $found_gsids);
}

sub print_all_gene_infos {
  my ($ga, $gsids) = @_;

  # remove tree data if exists
  $tree->delete('all');

  my $created_ver_modtime_g = get_gsids_by_created_ver_modtime($ga, $gsids);

  my ($g_count, $mods);

  foreach my $created_time (sort keys %$created_ver_modtime_g ){
    my $created = convert_unix_time($created_time);
    my $last_ver = (sort keys %{$created_ver_modtime_g->{$created_time}})[-1];
    my $last_mod = (sort keys %{$created_ver_modtime_g->{$created_time}->{$last_ver}})[-1];

    my $gsid_v_m = {};
    my $mod_count;

    foreach my $gver ( sort keys %{$created_ver_modtime_g->{$created_time}} ){
      foreach my $modtime ( sort keys %{$created_ver_modtime_g->{$created_time}->{$gver}} ) {

        # some genes have same created_time, modified_date
        # eg, OTTHUMG00000045274, OTTHUMG00000045276
        # so need to organize the data structure
        foreach my $last_mod_g (@{$created_ver_modtime_g->{$created_time}->{$gver}->{$modtime}} ) {
          $gsid_v_m->{$last_mod_g->stable_id}->{$gver}->{$modtime} = $last_mod_g;
        }
      }
    }

    foreach my $gsid ( keys %$gsid_v_m ){
      $g_count++;

      my $top = "G$g_count";

      my $last_ver   = (sort {$a<=>$b} keys %{$gsid_v_m->{$gsid}})[-1];
      my $last_mod   = (sort {$a<=>$b} keys %{$gsid_v_m->{$gsid}->{$last_ver}})[-1];
      my $last_mod_g = $gsid_v_m->{$gsid}->{$last_ver}->{$last_mod};

      my $gnote;
      if ( $last_mod_g->biotype eq "obsolete" ) {
        $gnote    = "[G$g_count] ".$last_mod_g->stable_id." OBSOLETE";
      } else {
        $gnote = "[G$g_count] ".$last_mod_g->stable_id. " $created";
      }

      $tree->add($top, -text=>$gnote);

      foreach my $gver ( sort {$a<=>$b} keys %{$gsid_v_m->{$gsid}} ) {
        my $mod_count;
        foreach my $modtime ( sort {$a<=>$b} keys %{$gsid_v_m->{$gsid}->{$gver}} ) {
          $mods++;
          $mod_count++;
          my $curr_gene = $gsid_v_m->{$gsid}->{$gver}->{$modtime};
          $tree = build_geneinfo_tree($tree, $top, $curr_gene, $gver, $mod_count);
        }
      }
    }
  }

  ($mods == 1) ?
	($btn_cmp->configure(-state=>'disabled')):
	  ($btn_cmp->configure(-state=>'active'));

  # make tree fully expanded by default
  $tree->autosetmode();
}


__END__
