#!/usr/bin/perl -Tw
# Copyright [2018-2022] EMBL-European Bioinformatics Institute
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


use strict;
use warnings;

BEGIN { use lib ($ENV{OTTER_PERL_INC} || q{}) =~ m{([^:]+)}g }
use SangerPaths qw{ core bioperl123 otter };
use Bio::Otter::Git qw{ :server_ensembl :match };

use Bio::Otter::Server::Support::Web;

# loutre_*.sequence_set_access tables contain no rows 2014-09-03
my $select_access_sql = <<'SQL'
    SELECT acc.access_type
      FROM sequence_set_access acc,
           seq_region sr,
           author au
     WHERE acc.seq_region_id = sr.seq_region_id
       AND acc.author_id = au.author_id
       AND au.author_name = ?
       AND sr.name        = ?
SQL
    ;

sub get_sequencesets {
    my ($server) = @_;

    my $dataset = $server->require_argument('dataset');


    # Allow local scripts to access without authorization

    my $author  = '';
    if($server->show_restricted_datasets) {
        $author = $server->{'_authorized_user'};

    }

    my $odba = $server->otter_dba();
    my $default_coord_system_version = $odba->get_CoordSystemAdaptor->get_default_version;
    my $param_coord_system_adaptor = $server->param('coord_system_version');
    if ($param_coord_system_adaptor) {
      $default_coord_system_version = $param_coord_system_adaptor;
    }

    my $xml = '';

    $xml .= <<"XML"
  <dataset name="$dataset">
    <sequencesets>
XML
;

    # SliceAdaptor always uses the dnadb connection so visible
    # sequencesets will always be the ones in the dnadb.
    my $slice_adaptor     = $odba->get_SliceAdaptor();
    my $attribute_adaptor = $odba->get_AttributeAdaptor();

    foreach my $ss_slice (@{$slice_adaptor->fetch_all('toplevel', undef, 1, 1)}) {
        my $coord_system_version = $ss_slice->coord_system->version;
        if ($default_coord_system_version eq $coord_system_version) {
          my $chr_name = $ss_slice->seq_region_name();
          my $description  = ''; # default
          my $write_access = 1;  # default; but ignoring dataset readonly-ness
          my $hidden       = 1;  # default
          my $coord_system_name = $ss_slice->coord_system->name;

          for my $attrib (@{ $attribute_adaptor->fetch_all_by_Slice( $ss_slice ) }) {
              my ($code, $value) = ($attrib->code(), $attrib->value());
              if($code eq 'description') {
                  $description  = $value;
              }elsif($code eq 'write_access') {
                  $write_access = $value;
              }elsif($code eq 'hidden') {
                  $hidden       = $value;
              }
          }

          # An attempt at finer, by-author's-name control over visibility/writability of sequence sets
          # This is more advisory.  access.yaml gives harder security.
          my $select_access_sth=$odba->dbc()->prepare($select_access_sql);
          $select_access_sth->execute($author, $chr_name);
          if (my($access) = $select_access_sth->fetchrow) {
              # we're only expecting max one value due to schema restrictions
              $write_access = ($access=~/W/) || 0;
              $hidden       = ($access!~/R/) || 0;
          }

        $xml .= <<"XML"
      <sequenceset
        name="$chr_name"
        description="$description"
        is_hidden="$hidden"
        write_access="$write_access"
        coord_system_name="$coord_system_name"
        coord_system_version="$coord_system_version"
        >
XML
;

        $xml .= <<"XML"
      </sequenceset>
XML
;
        }
    }

    $xml .= <<"XML"
    </sequencesets>
  </dataset>
XML
;

    return $server->otter_wrap_response($xml);
}

Bio::Otter::Server::Support::Web->send_response(\&get_sequencesets);

__END__

=head1 NAME - get_sequencesets


=head1 DESCRIPTION

return xml for sequence sets

=head1 AUTHOR

Ana Code B<email> anacode@sanger.ac.uk

