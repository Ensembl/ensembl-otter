#!/usr/bin/perl -Tw

use strict;
use warnings;

BEGIN { use lib ($ENV{OTTER_PERL_INC} || q{}) =~ m{([^:]+)}g }
use SangerPaths qw{ core bioperl123 otter };
use Bio::Otter::Git qw{ :server_ensembl :match };

use Bio::Otter::Server::Support::Web;

my $select_mapping_sql = <<'SQL'

    SELECT sub.name
      , chr.name
      , count(*) cnt
      , group_concat(cln.name ORDER BY sub_ctg.asm_start SEPARATOR ',')
      , sub_hdn.value
    FROM seq_region sub
      , assembly sub_ctg
      , seq_region ctg
      , assembly chr_ctg
      , seq_region chr
      , assembly cln_ctg
      , seq_region cln
      , seq_region_attrib sub_hdn
    WHERE sub.coord_system_id = (SELECT coord_system_id
                                 FROM coord_system
                                 WHERE name = 'subregion')

      AND sub_hdn.seq_region_id = sub.seq_region_id
      AND sub_hdn.attrib_type_id = (SELECT attrib_type_id
                                    FROM attrib_type
                                    WHERE code = 'hidden')

      AND sub.seq_region_id = sub_ctg.asm_seq_region_id
      AND ctg.seq_region_id = sub_ctg.cmp_seq_region_id
      AND ctg.coord_system_id = (SELECT coord_system_id
                                 FROM coord_system
                                 WHERE name = 'contig')

      AND cln.seq_region_id = cln_ctg.asm_seq_region_id
      AND ctg.seq_region_id = cln_ctg.cmp_seq_region_id
      AND cln.coord_system_id = (SELECT coord_system_id
                                 FROM coord_system
                                 WHERE name = 'clone')

      AND sub_ctg.cmp_seq_region_id = chr_ctg.cmp_seq_region_id
      AND chr.seq_region_id = chr_ctg.asm_seq_region_id
      AND (chr.coord_system_id = (SELECT coord_system_id
                                  FROM coord_system
                                  WHERE name = 'chromosome'
                                    AND version = 'Otter')
           OR chr.seq_region_id = sub.seq_region_id)

    GROUP BY sub.name, chr.name
    ORDER BY sub.name, cnt DESC
SQL
    ;

# loutre_*.sequence_set_access tables contain no rows 2014-09-03
my $select_access_sql = <<'SQL'
    SELECT acc.access_type
      FROM sequence_set_access acc,
           seq_region sr,
           author au
     WHERE acc.seq_region_id = sr.seq_region_id
       AND acc.author_id = au.author_id
       AND au.author_name = ?
       AND sr.name        = ?
SQL
    ;

sub get_sequencesets {
    my ($server) = @_;

    my $dataset = $server->require_argument('dataset');


    # Allow local scripts to access without authorization

    my $author  = '';
    if($server->show_restricted_datasets) {
        $author = $server->authorized_user;
    }

    my $odba = $server->otter_dba();

        # mapping between subregions and chromosomes:

    my $select_mapping_sth = $odba->dbc()->prepare($select_mapping_sql);
    $select_mapping_sth->execute();

    my %sub_contig_count = ();
    my %chr_2_sub = ();
    my %sub_contigs = ();
    my %sub_hidden = ();
    while( my ($sub_name, $chr_name, $cnt, $contig_list, $sub_hidden) =
           $select_mapping_sth->fetchrow() ) {
        if(!defined($sub_contig_count{$sub_name})) { # this is the first time we see it
            $sub_contig_count{$sub_name} = $cnt;
            $sub_contigs{$sub_name} = $contig_list; # just as comma-separated list
            $sub_hidden{$sub_name} = $sub_hidden;
        }

        if(($cnt == $sub_contig_count{$sub_name}) && ($chr_name ne $sub_name)) {
            push @{$chr_2_sub{$chr_name}}, $sub_name;
        }
    }

    my $xml = '';

    $xml .= <<"XML"
  <dataset name="$dataset">
    <sequencesets>
XML
;

    # SliceAdaptor always uses the dnadb connection so visible
    # sequencesets will always be the ones in the dnadb.
    my $slice_adaptor     = $odba->get_SliceAdaptor();
    my $attribute_adaptor = $odba->get_AttributeAdaptor();

    foreach my $ss_slice (@{$slice_adaptor->fetch_all('toplevel')}) {

        my $chr_name = $ss_slice->seq_region_name();
        warn "Got chr '$chr_name'\n";
        my $description  = ''; # default
        my $write_access = 1;  # default; but ignoring dataset readonly-ness
        my $hidden       = 1;  # default
        my $coord_system_name = $ss_slice->coord_system->name;
        my $coord_system_version = $ss_slice->coord_system->version;

        for my $attrib (@{ $attribute_adaptor->fetch_all_by_Slice( $ss_slice ) }) {
            my ($code, $value) = ($attrib->code(), $attrib->value());
            if($code eq 'description') {
                $description  = $value;
            }elsif($code eq 'write_access') {
                $write_access = $value;
            }elsif($code eq 'hidden') {
                $hidden       = $value;
            }
        }

        # An attempt at finer, by-author's-name control over visibility/writability of sequence sets
        # This is more advisory.  access.yaml gives harder security.
        my $select_access_sth=$odba->dbc()->prepare($select_access_sql);
        $select_access_sth->execute($author, $chr_name);
        if (my($access) = $select_access_sth->fetchrow) {
            # we're only expecting max one value due to schema restrictions
            $write_access = ($access=~/W/) || 0;
            $hidden       = ($access!~/R/) || 0;
        }

        $xml .= <<"XML"
      <sequenceset
        name="$chr_name"
        description="$description"
        is_hidden="$hidden"
        write_access="$write_access"
        coord_system_name="$coord_system_name"
        coord_system_version="$coord_system_version"
        >
XML
;

        foreach my $sub_name (@{$chr_2_sub{$chr_name}}) {
            $xml .= <<"XML"
        <subregion name="$sub_name" hidden="$sub_hidden{$sub_name}">$sub_contigs{$sub_name}</subregion>
XML
;
        }

        $xml .= <<"XML"
      </sequenceset>
XML
;
    }

    $xml .= <<"XML"
    </sequencesets>
  </dataset>
XML
;

    return $server->otter_wrap_response($xml);
}

Bio::Otter::Server::Support::Web->send_response(\&get_sequencesets);

__END__

=head1 NAME - get_sequencesets


=head1 DESCRIPTION

return xml for sequence sets

=head1 AUTHOR

Ana Code B<email> anacode@sanger.ac.uk

