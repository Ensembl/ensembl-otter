#!/usr/bin/perl -Tw
# Copyright [2018-2022] EMBL-European Bioinformatics Institute
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


use warnings;
use LWP::UserAgent;
use HTTP::Request;
use strict;

BEGIN { use lib ($ENV{OTTER_PERL_INC} || q{}) =~ m{([^:]+)}g }
use SangerPaths qw{ core bioperl123 otter };
use Bio::Otter::Git qw{ :server_ensembl :match };

use Bio::Otter::Server::Support::Web;

sub get_fasta_sequence {
    my ($server) = @_;

    my $id = $server->require_argument('id');

    my @raw_id_array = split (',', $id);
    $id = "";
    foreach my $current_id (@raw_id_array) {
        if (index($current_id, '-') != -1) {
          $current_id =~ s/\.\d+//;
        }
        $id = $id . ',' . $current_id;
    }

    my @queries;
    my $query = 'http://www.ebi.ac.uk/Tools/dbfetch/dbfetch?format=fasta&style=raw&db=uniprotkb&id=';
    push @queries, $query;
    $query = 'http://www.ebi.ac.uk/Tools/dbfetch/dbfetch?format=fasta&style=raw&db=refseqn&id=';
    push @queries, $query;
    $query = 'http://www.ebi.ac.uk/Tools/dbfetch/dbfetch?db=ena_sequence&format=fasta&style=raw&Retrieve=Retrieve&id=';

    push @queries, $query;

    my $response;
    my $concat_response = '';
    my $i = 0;
    while ($i < 3 || $id != '') {
        my @id_array = split (',', $id);
        $id = '';
        foreach my $current_id (@id_array) {
            if ((index $concat_response, $current_id) == -1) {
                warn "ID " . $current_id . "not found ";
                 $id = $id . ',' . $current_id;
            }
        }

        my $cut_id = $id;

        if ($i == 0) {
            $cut_id =~ s/\.\d+//;
        }

        $response = fetch_ids_from_external_db($queries[$i] . $cut_id);
        $concat_response = $concat_response . $response;
        $i++;
    }
    return $server->otter_wrap_response($concat_response);
}

sub fetch_ids_from_external_db {
    my ($query) = @_;
    my $result;
    $result = web_fetch($query);
    if ($result->is_success && substr($result->decoded_content, 0, 1) eq ">") {
      return $result->decoded_content;

    }
    return '';
}

sub web_fetch {
  my ($query) = @_;

  my $ua = LWP::UserAgent->new;
  my $req = HTTP::Request->new('GET', $query);
  return $ua->request($req);
}

Bio::Otter::Server::Support::Web->send_response(\&get_fasta_sequence);
