#!/usr/bin/perl -Tw
# Copyright [2018-2019] EMBL-European Bioinformatics Institute
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


use strict;
use warnings;

BEGIN { use lib ($ENV{OTTER_PERL_INC} || q{}) =~ m{([^:]+)}g }
use SangerPaths qw{ core bioperl123 otter };
use Bio::Otter::Git qw{ :server_ensembl :match };

use Bio::Otter::Server::Support::Web;

my $mapping_none_xml = <<'XML'
  <mapping type="none">
  </mapping>
XML
    ;

sub mapping_none_xml {
    return $mapping_none_xml;
}

my $mapping_equiv_xml_format = <<'XML'
  <mapping type="equiv" equiv_chr="%s">
  </mapping>
XML
    ;

sub mapping_equiv_xml {
    my ($equiv_chr) = @_;
    my $xml = sprintf $mapping_equiv_xml_format, $equiv_chr;
    return $xml;
}

my $mapping_map_maplet_xml_format = <<'XML'
      <maplet start="%d" end="%d" offset="%d" ori="%d"></maplet>
XML
    ;
chomp $mapping_map_maplet_xml_format;

sub mapping_map_maplet_xml { ## no critic (Subroutines::RequireArgUnpacking)
    my $xml = sprintf $mapping_map_maplet_xml_format, @_;
    return $xml;
}

my $mapping_map_map_xml_format = <<'XML'
    <map chr="%s">
%s
    </map>
XML
    ;
chomp $mapping_map_map_xml_format;

sub mapping_map_map_xml {
    my ($chr, $maplets) = @_;
    my $xml = sprintf $mapping_map_map_xml_format
        , $chr , ( join "\n", map { mapping_map_maplet_xml(@{$_}) } @{$maplets} );
    return $xml;
}

my $mapping_map_xml_format = <<'XML'
  <mapping type="map">
%s
  </mapping>
XML
    ;

sub mapping_map_xml {
    my ($map) = @_;

    my $chr_map = { };
    for (@{$map}) {
        my ($chr, @attributes) = @{$_};
        push @{$chr_map->{$chr} ||= [ ]}, [ @attributes ];
    }

    my $xml = sprintf $mapping_map_xml_format
        , join "\n", map { mapping_map_map_xml($_, $chr_map->{$_}) } keys %{$chr_map};

    return $xml;
}

my $chr_id_select_sql = <<'SQL'
select seq_region_id
from seq_region
where name = ?
SQL
    ;

my $attrib_select_sql = <<'SQL'
select value
from seq_region_attrib sra
inner join attrib_type at using (attrib_type_id)
where sra.seq_region_id = ? and at.code = ?
SQL
    ;

my $map_select_sql = <<'SQL'
select
  cmp_sr.name,
  a.cmp_start,
  a.cmp_end,
  a.asm_start - a.cmp_start,
  a.ori
from assembly a
inner join seq_region cmp_sr
  on ( cmp_sr.seq_region_id = a.cmp_seq_region_id )
inner join coord_system cmp_cs
  using ( coord_system_id )
where a.asm_seq_region_id = ?
and   cmp_cs.name    = 'chromosome'
and   cmp_cs.version = ?
and   a.asm_end   >= ?
and   a.asm_start <= ?
SQL
    ;

sub get_mapping {
    my ($server) = @_;

    my $dbh   = $server->otter_dba->dbc->db_handle;
    my $chr   = $server->require_argument('chr');
    my $cs    = $server->require_argument('cs');
    my $start = $server->require_argument('start');
    my $end   = $server->require_argument('end');

    return $server->otter_wrap_response(get_mapping_xml($dbh, $chr, $cs, $start, $end));
}
sub get_mapping_xml {
    my ($dbh, $chr, $cs, $start, $end) = @_;

    # get the seq_region ID
    my ($chr_id) =
        @{$dbh->selectcol_arrayref(
              $chr_id_select_sql, { }, $chr)};
    die qq(invalid chr '${chr}') unless defined $chr_id;

    my $attrib_select_sth = $dbh->prepare($attrib_select_sql);

    # check the equivalent assembly
    my ($equiv_asm) =
        @{$dbh->selectcol_arrayref(
              $attrib_select_sth, { }, $chr_id, 'equiv_asm')};

    if ( defined $equiv_asm && $equiv_asm eq $cs ) {

        # get the equivalent chromosome
        my ($equiv_chr) =
            @{$dbh->selectcol_arrayref(
                  $attrib_select_sth, { }, $chr_id, 'chr')};
        die q(missing chr attribute) unless defined $equiv_chr;

        return mapping_equiv_xml($equiv_chr);
    }
    else {
        my $map =
            $dbh->selectall_arrayref(
                $map_select_sql, { }, $chr_id, $cs, $start, $end);
        if (@{$map}) {
            return mapping_map_xml($map);
        }
        else {
            return mapping_none_xml;
        }
    }
}

Bio::Otter::Server::Support::Web->send_response(\&get_mapping);
