#!/usr/bin/perl -Tw
# Copyright [2018] EMBL-European Bioinformatics Institute
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


use strict;
use warnings;

BEGIN { use lib ($ENV{OTTER_PERL_INC} || q{}) =~ m{([^:]+)}g }
use SangerPaths qw{ core };
use SangerWeb;

use IO::Socket;
use CGI;

### We avoid these for faster turnaround of requests, but have to
#   replicate equivalent functionality inline.
#
# use Bio::Otter::Server::Support::Web;
# use Hum::Conf qw{ PFETCH_SERVER_LIST };
#
# Listed here for the benefit of greppers...


my $q;

eval {
    $q = CGI->new;

    my $sw = SangerWeb->new({ cgi => $q });
    die "Not authorized\n"
      unless $sw->username;
};

if ($@) {
    print $q->header(
        -status => 403,
        -type   => 'text/plain',
        );
    print $@;
    exit(1);
}

my $socket;

eval {
    # Get request string and de-taint
    my $req = $q->param('request');
    $req =~ s/\s+/ /g;
    $req =~ s/[^\w\-\.\: ]//g;

    die "Empty request\n" unless $req =~ /\S/;

    foreach my $ip_addr (qw{ pfetch.sanger.ac.uk }){
        last if $socket = IO::Socket::INET->new(
            PeerAddr => $ip_addr,
            PeerPort => 22400,
            Proto    => 'tcp',
            Type     => SOCK_STREAM,
            Timeout  => 10,
            );
    }
    die "Connect to pfetch server failed: $!" unless $socket;

    print $socket $req, "\n";
};

if ($@) {
    print $q->header(
        -status => 500,
        -type   => 'text/plain',
        );
    print $@;
    exit(1);
} else {
    print $q->header(
        -status => 200,
        -type   => 'text/plain',
        );

    while (<$socket>) {
        print;
    }
    close $socket;
    exit(0);
}
