#!/usr/bin/perl -Tw
# Copyright [2018-2019] EMBL-European Bioinformatics Institute
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


use strict;
use warnings;

BEGIN { use lib ($ENV{OTTER_PERL_INC} || q{}) =~ m{([^:]+)}g }
use SangerPaths qw{ core bioperl123 otter };
use Bio::Otter::Git qw{ :server_ensembl :match };

use Bio::Otter::Server::Support::Web;

my $ana_root = 'SubmitContig';

my $select_analyses_sql = <<'SQL'
SELECT rc.rule_condition
     , a.logic_name
FROM analysis a
   , rule_goal rg
   , rule_conditions rc
WHERE a.analysis_id = rg.goal
  AND rg.rule_id = rc.rule_id
SQL
    ;

sub get_possible_analyses {
    my ($pdbc) = @_;

    my %rule = ();
    my $rule_sth = $pdbc->prepare($select_analyses_sql);
    $rule_sth->execute;
    while (my ($condition, $logic_name) = $rule_sth->fetchrow) {
        push @{$rule{$condition}}, $logic_name;
    }

    # saturate the dependency relation:
    my @possible_analyses = ();
    my $current_rules = [ $ana_root ];
    while (scalar(@$current_rules)) {
        my @dependent_rules = ();
        foreach my $curr (@$current_rules) {
            push @dependent_rules, @{$rule{$curr} || []};
        }
        push @possible_analyses, @dependent_rules;
        $current_rules = \@dependent_rules;
    }

    return @possible_analyses;
}


my $select_components_sql = <<'SQL'
SELECT cmp.name, cs.version
FROM coord_system cs
  , seq_region cmp
  , assembly a
  , seq_region asm
WHERE asm.name = ?
  AND asm.seq_region_id = a.asm_seq_region_id
  AND a.cmp_seq_region_id = cmp.seq_region_id
  AND cmp.coord_system_id = cs.coord_system_id
  AND cs.name = ?
SQL
    ;

my $select_analyses_sql_format = <<'SQL'
SELECT i.input_id
  , a.logic_name
  , i.created
  , i.db_version
FROM analysis a
  , input_id_analysis i
WHERE a.analysis_id = i.analysis_id
  AND i.input_id IN (%s)
SQL
    ;

sub get_analyses_status {
    my ($server) = @_;

my $assembly = $server->require_argument('chr');
my $component_cs = $server->param('component_cs') || 'contig';

my $pdbc = $server->dataset->pipeline_dba()->dbc();  # pipeline dbc

my @input_ids = ();
my $cmp_sth = $pdbc->prepare($select_components_sql);
$cmp_sth->execute($assembly, $component_cs);

while (my ($cmp_name, $cs_version) = $cmp_sth->fetchrow) {
    my @syll = split(/\./, $cmp_name);
    my $to = pop @syll;
    my $from = pop @syll;
    if(!defined($cs_version)) { $cs_version = ''; }
    push @input_ids, join(':', $component_cs, $cs_version, $cmp_name, $from, $to, 1);
}

my %skeleton_hash = map { ($_ => []) } get_possible_analyses($pdbc);
my %result_hash   = ();

if(! @input_ids) {
    warn "No input IDs\n";
    return $server->otter_wrap_response('');
}

my $input_id_str = join ',', qw(?) x @input_ids;
my $sql_statement = sprintf $select_analyses_sql_format, $input_id_str;
my $input_sth = $pdbc->prepare($sql_statement);
$input_sth->execute(@input_ids);

while(my ($input_id, $logic_name, $created, $db_version) = $input_sth->fetchrow_array) {
    $input_id=~s/^$component_cs:[^:]*:([^:]+):.*$/$1/;

    if(!exists($result_hash{$input_id})) {
        %{$result_hash{$input_id}} = %skeleton_hash;
    }
    $result_hash{$input_id}{$logic_name} = [$created, $db_version];
}

    # output the results:
my $output_string = '';
for my $input_id (sort keys %result_hash) {
    for my $logic_name (sort {
            ($a eq $ana_root) ? -1 : ($b eq $ana_root) ? 1 : ($a cmp $b)
        } keys %{$result_hash{$input_id}}) {
            $output_string .= join("\t", $input_id, $logic_name, @{$result_hash{$input_id}{$logic_name}})."\n";
    }
}

    return $server->otter_wrap_response($output_string);
}

Bio::Otter::Server::Support::Web->send_response(\&get_analyses_status);
