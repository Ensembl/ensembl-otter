#!/usr/bin/perl -Tw
# Copyright [2018-2022] EMBL-European Bioinformatics Institute
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


use strict;
use warnings;

BEGIN { use lib ($ENV{OTTER_PERL_INC} || q{}) =~ m{([^:]+)}g }
use SangerPaths qw{ core bioperl123 otter };
use Bio::Otter::Git qw{ :server_ensembl :match };

use Bio::Otter::Server::Support::Web;

sub set_sequence_note {
    my ($server) = @_;
    $server->dataset_assert_write;

    my $contig_name = $server->require_argument('contig');
    my $timestamp   = $server->require_argument('timestamp');
    my $text        = $server->require_argument('text');
    my $action      = $server->require_argument('action');

    my $author = $server->make_Author_obj;
    $server->otter_dba->get_AuthorAdaptor->store($author);

    my $odbc = $server->otter_dba->dbc;
    my $cs = $server->otter_dba->get_CoordSystemAdaptor->fetch_by_name('seqlevel');

    my $seq_region_sub_select = q{(SELECT seq_region_id FROM seq_region where name = ? AND coord_system_id =
      (SELECT coord_system_id
        FROM coord_system
        WHERE name = "%s")
      )};

    $seq_region_sub_select = sprintf
             $seq_region_sub_select,
             $cs->name;

    if ($action=~/(change|modify|old)/) {
        warn "Changing a sequence_note\n";

        my $sth = $odbc->prepare(qq{
            UPDATE sequence_note
            SET note = ?
            WHERE seq_region_id = $seq_region_sub_select
            AND author_id = ?
            AND note_time = FROM_UNIXTIME(?)
            });
        warn
            "Arguments = ("
            . join(', ', map { "'$_'" } ($text, $contig_name, $author->dbID, $timestamp)
            . ")\n");
        my $changed = $sth->execute($text, $contig_name, $author->dbID, $timestamp);
        warn "Changed $changed sequence_notes for contig $contig_name\n";
        die "Failed to change sequence note" unless $changed;
    }
    elsif ($action=~/(add|push|new)/) {
        warn "Adding a new sequence_note\n";

        my $sth = $odbc->prepare(qq{
            UPDATE sequence_note
               SET is_current = 'no'
             WHERE seq_region_id = $seq_region_sub_select
        });
        my $non_curr=$sth->execute($contig_name);
        warn "Contig $contig_name has $non_curr non-current sequence_notes now...\n";

        $sth = $odbc->prepare(qq{
            INSERT INTO sequence_note (seq_region_id, author_id, note_time, is_current, note)
                 VALUES (
                         $seq_region_sub_select,
                         ?,
                         FROM_UNIXTIME(?),
                         'yes',
                         ?
                 )
        });
        my $curr = $sth->execute($contig_name, $author->dbID, $timestamp, $text);
        warn "... and $curr current sequence_notes\n";
        die "Failed to add new note" unless $curr;
    }
    else {
        die "Unknown action '$action'";
    }

    return $server->otter_wrap_response("Done\n");
}

Bio::Otter::Server::Support::Web->send_response(\&set_sequence_note);
