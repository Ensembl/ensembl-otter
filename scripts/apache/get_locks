#!/usr/bin/perl -Tw
# Copyright [2018] EMBL-European Bioinformatics Institute
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


use strict;
use warnings;

BEGIN { use lib ($ENV{OTTER_PERL_INC} || q{}) =~ m{([^:]+)}g }
use SangerPaths qw{ core bioperl123 otter };
use Bio::Otter::Git qw{ :server_ensembl :match };

use Bio::Otter::Server::Support::Web;

use Bio::Vega::SliceLockBroker;


sub get_SliceLocks {
    my ($server) = @_;

    my $SLdba = $server->otter_dba->get_SliceLockAdaptor;
    my $S_dba = $server->otter_dba->get_SliceAdaptor;
    my $chr = $server->require_argument('chr');
    my $chr_slice = $S_dba->fetch_by_region
      ('chromosome', $chr, undef, undef, undef, 'Otter', 1);
    die "Cannot find chromosome:Otter:$chr" unless $chr_slice;
    my $srid = $chr_slice->get_seq_region_id;

    my $slocks = $SLdba->fetch_by_seq_region_id($srid, 1); # extant = not freed
    @$slocks = grep { $_->active eq 'held' } @$slocks; # exclude 'pre'

    return $slocks;
}

sub get_locks {
    my ($server) = @_;
    my $ds = $server->dataset;
    my %out;

    $out{SliceLock} = get_SliceLocks($server)
      if Bio::Vega::SliceLockBroker->supported($ds);
    $server->json->convert_blessed;

    return \%out;
}

Bio::Otter::Server::Support::Web->send_response(-content_type => 'application/json', \&get_locks);
