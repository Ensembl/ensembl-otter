#!/usr/bin/env perl
# Copyright [2018] EMBL-European Bioinformatics Institute
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


use warnings;


# Lg4, 28.Mar'2006
#
# Extracts some very basic info about genes of an assembly.
# Eah asked for this feature.

use strict;
use Bio::Otter::Lace::Defaults;

{
    my ($dataset_name, $chr_name, $set_name, $chr_start, $chr_end);

    Bio::Otter::Lace::Defaults::do_getopt(
        'dataset=s'     => \$dataset_name,
        'chr=s'         => \$chr_name,
        'set=s'         => \$set_name,
        'start=s'       => \$chr_start,
        'end=s'         => \$chr_end,
    ) or usage();

    if(!$dataset_name || !$chr_name || !$set_name) {
        usage();
    }
    
        # Client communicates with otter HTTP server:
    my $cl = Bio::Otter::Lace::Defaults::make_Client();

        # DataSet interacts directly with an otter database:
    my $ds = $cl->get_DataSet_by_name($dataset_name);
    
    my $otter_dba = $ds->get_cached_DBAdaptor;

    print STDERR "DataSet      = '$dataset_name'\n";
    print STDERR "Chromosome   = '$chr_name'\n";
    print STDERR "SequenceSet  = '$set_name'\n";

    $chr_start ||=1;
    $chr_end   ||= $otter_dba->get_ChromosomeAdaptor()->fetch_by_chr_name($chr_name)->length();


        # let's try and get the whole chromosome into slice:
    my $otter_slice = $otter_dba->get_SliceAdaptor()
        ->fetch_by_chr_start_end($chr_name, $chr_start, $chr_end);

    my $len = $otter_slice->chr_end()-$otter_slice->chr_start()+1;
    print STDERR "Slice length = $len\n\n";

    my $genes = $otter_dba->get_GeneAdaptor->fetch_by_Slice($otter_slice);
    for my $gene (@$genes) {
        my $gene_name  = $gene->gene_info()->name()->name();
        my $gene_type  = $gene->type();
        my $gene_start = $gene->start();
        my $gene_end   = $gene->end();
        my $gene_length= $gene_end-$gene_start+1;

        my @trans_names = ();
        for my $transcript (@{ $gene->get_all_Transcripts() }) {
            my $trans_name = $transcript->transcript_info()->name();

            push @trans_names, $trans_name;
        }
        print join("\t",
            $gene_name,
            $gene_type,
            $gene_start,
            $gene_end,
            $gene_length,
            scalar(@trans_names),
            join(',',@trans_names),
        )."\n";
    }

}

sub usage {
    print STDERR "\nOutputs a tab-separated list with the following columns:\n\n";
    print STDERR "gene name\n";
    print STDERR "gene type\n";
    print STDERR "gene start\n";
    print STDERR "gene end\n";
    print STDERR "gene length\n";
    print STDERR "number of transcripts\n";
    print STDERR "comma-separated transcript names\n";
    print STDERR "\n";
    print STDERR "usage:\n";
    print STDERR "\t$0 --dataset=pig --chr=17 --set=chr17-SSC17_MAX1-03\n";
    print STDERR "\t$0 --dataset=dog --chr=12 --set=mhc-01\n";
    print STDERR "\t$0 --dataset=human --chr=20 --set=chr20-11 --start=48458950 --end=57913054\n";
    print STDERR "...\t...\n\n";

    exit;
}
