#!/usr/bin/env perl
# Copyright [2018-2022] EMBL-European Bioinformatics Institute
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


### satellite_switch

use strict;
use warnings;
use List::MoreUtils 'uniq'; # CPAN

use Bio::Otter::Lace::Defaults;
use Bio::Otter::Server::Config;


# "Which database?" can now be answered by checking the port number.
# The DBA team maintains (essentially) a registry of port numbers used
# for databases and we are included.

# We should really look at the server-config databases.yaml for these, now.

my %MASTER = (3322 => 'otp1-db',    3323 => 'otp2-db'   ); # otterlive:3324 is not relevant in this script
my %SLAVE  = (3322 => 'otp1-db-ro', 3323 => 'otp2-db-ro'); # otlp-db-ro:3324 also exists
# %SLAVE  = (3322 => 'mcs30', 3323 => 'mcs31'); # off-site
my @other_hosts = qw( mcs30 mcs31 mcs17 mcs18 );

# Switching Otter Server's "otterlive" is done via species.dat
# see http://mediawiki.internal.sanger.ac.uk/wiki/index.php/Anacode_Databases#Downtime

# Build regexps
my $HOSTS_RE = join "|", values %SLAVE, values %MASTER, @other_hosts; # order important: <blah>-db-ro before <blah>-db
my $PORTS_RE = join "|", keys %MASTER;
$HOSTS_RE = qr{\b($HOSTS_RE)\b};
$PORTS_RE = qr{\b($PORTS_RE)\b};

{
    my $switch;
    my $dryrun = 0;
    my $meta_key = 'pipeline_db_head';
    my $only_port;
    my $progdir = $0;
    $progdir =~ s{/[^/]+$}{};

    my $usage = sub { exec('perldoc', $0) };
    # This do_getopt() call is needed to parse the otter config files
    # even if you aren't giving any arguments on the command line.
    Bio::Otter::Lace::Defaults::do_getopt(
        'h|help!'       => $usage,
        'n|dryrun!'     => sub{ $dryrun = 1 },
        'M|meta=s'      => \$meta_key,
        'P|port=i'      => \$only_port,
        'slave!'        => sub{ $switch = 'slave' },
        'master!'       => sub{ $switch = 'master' },
        ) or $usage->();
    $usage->() unless $switch;

    foreach my $ds (sort { $a->name cmp $b->name }
                    Bio::Otter::Server::Config->SpeciesDat->all_datasets) {
        my $name = $ds->name;
        my $dba = $ds->otter_dba;
        my $meta = $dba->get_MetaContainer;
        my ($connect) = @{$meta->list_value_by_key($meta_key)};
        unless ($connect) {
            warn "Missing '$meta_key' for '$name'\n";
            next;
        }
        # warn "$name: Looking at $connect\n";
        my ($sathost) = $connect =~ $HOSTS_RE;
        my ($satport) = $connect =~ $PORTS_RE;
        my $old_sathost = $sathost;

        if ($sathost && $satport) {
            if (defined $only_port && $satport != $only_port) {
                warn "skip:  Dataset $name remains on $sathost:$satport - is not port $only_port\n";
                next;
            }

            if ($switch eq 'master') {
                $sathost = $MASTER{$satport};
            } elsif ($switch eq 'slave') {
                $sathost = $SLAVE{$satport};
            }

            if ($old_sathost eq $sathost) {
                warn "no-op:  Dataset $name is already on $switch ($sathost:$satport)\n";
                next;
            }

        } else {
            warn "[W] Dataset $name current configuration not recognised,\n      $meta_key => { $connect }\n";
            next;
        }

        print STDERR "\n=>  Switching $name to $switch ($old_sathost to $sathost)\n";
        my @command = (
            "$progdir/save_satellite_db",
            -dataset    => $name,
            -key        => $meta_key,
            -sathost    => $sathost,
            -satport    => $satport,
            );
        if ($dryrun) {
            print "Would run: @command\n";
        } else {
            warn "Running: @command\n";
            system(@command);
        }
    }
}




__END__

=head1 NAME - satellite_switch

=head1 USAGE

 satellite_switch <-slave|-master> [-dryrun] [ -M pipeline_db_rw_head ] [ -P portnumber ]

=head1 DESCRIPTION

Flip satellite databases to/from MySQL slaves by maintaining the port
number and switching the hostname.

By default it updates the C<pipeline_db_head> meta_key (or another if
specified) to switch the read-only queries from Otter via the
Otter Server, between master & slave database servers.

By default it does this for all species in C<species.dat>.  By giving
a portnumber, you can limit to one database.

This has grown complex.  Dry run is recommended.

=head2 Related

The CNAME aliases (otterpipe1, otterpipe2) are not used.  In the event
of database server failure, we can update these rows on accessible
databases much faster than we can get the DNS changed.

To switch the origin of loutre databases, edit F<species.dat>.

See also L<http://mediawiki.internal.sanger.ac.uk/wiki/index.php/Anacode_Databases>

=head1 CAVEATS

In addition to C<pipeline_db(_rw)_head>, there are other database pointers.
This script does not understand those.

=head1 AUTHOR

Ana Code B<email> anacode@sanger.ac.uk

