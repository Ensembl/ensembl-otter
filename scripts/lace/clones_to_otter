#!/usr/bin/env perl
# Copyright [2018-2019] EMBL-European Bioinformatics Institute
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


use warnings;


### clones_to_otter

use strict;
use Carp;
use Getopt::Long 'GetOptions';
use Hum::Tracking;
use Bio::Otter::Lace::PipelineDB;
use Bio::Otter::Lace::Defaults;

{
    my $dataset_name = undef;
    my $reverse = 0;    # Set to true to resync out of sync pipeline db
    my $help         = 0;
    Bio::Otter::Lace::Defaults::do_getopt(
        'help!'     => \$help,
        'dataset=s'   => \$dataset_name,
        'reverse!'    => \$reverse,
        ) || usage();
    die "I need a dataset name, is that too much to ask?\n" unless $dataset_name;
    my $cl = Bio::Otter::Lace::Defaults::make_Client();
    my $ds = $cl->get_DataSet_by_name($dataset_name);
    # Make a connection to the otter database
    my $otter_db = $ds->get_cached_DBAdaptor;
    my $pipe_db = Bio::Otter::Lace::PipelineDB::get_rw_DBAdaptor($otter_db);
    
    if ($reverse) {
        ($otter_db, $pipe_db) = ($pipe_db, $otter_db);
    }

    my $list_acc_sv_clones = $otter_db->prepare(q{
        SELECT embl_acc
          , embl_version
        FROM clone
        WHERE name = concat(embl_acc
              , '.'
              , embl_version)
        });
    $list_acc_sv_clones->execute;
    
    my $update_sql = q{
        UPDATE clone
        SET name = ?
        WHERE embl_acc = ?
          AND embl_version = ?
        };
    my $update_otter = $otter_db->prepare($update_sql);
    my $update_pipe  =  $pipe_db->prepare($update_sql);
    
    while (my ($acc, $sv) = $list_acc_sv_clones->fetchrow) {
        next unless my $intl = get_international_clone_name($acc);
        warn "$acc.$sv -> $intl\n";
        $update_otter->execute($intl, $acc, $sv);
         $update_pipe->execute($intl, $acc, $sv);
    }
}

{
    my( $sth );

    sub get_international_clone_name {
        my( $acc ) = @_;

        $sth ||= Hum::Tracking::prepare_track_statement(q{
            SELECT c.clonename
              , l.internal_prefix
              , l.external_prefix
            FROM sequence s
              , clone_sequence cs
              , clone c
              , library l
            WHERE s.id_sequence = cs.id_sequence
              AND cs.clonename = c.clonename
              AND c.libraryname = l.libraryname
              AND s.accession = ?
              AND cs.is_current = 1
            });
        $sth->execute($acc);
        
        my ($clone, $int_pre, $ext_pre) = $sth->fetchrow;
        $sth->finish;
        
        return unless $clone;
        
        my $intl = uc $clone;
        $int_pre ||= '';
        $ext_pre ||= 'XX';
        if ($ext_pre =~ /^XX/) {
            $intl = "$ext_pre-$intl";
        } else {
            if (substr($intl, 0, length($int_pre)) eq uc $int_pre) {
                substr($intl, 0, length($int_pre), "$ext_pre-");
            } else {
                warn "clone '$clone' does not begin with internal prefix '$int_pre'";
                $intl = "$ext_pre-$intl";
            }
        }
        return $intl;
    }
}

__END__

=head1 NAME - clones_to_otter

=head1 SYNOPSIS

  clones_to_otter -dataset <DATASET_NAME>

=head1 DESCRIPTION

Fills in the international clone names for the
otter and pipeline dbs.   It uses the tracking
database to find the int. clone name for those
clones  that have name = embl_acc.embl_version. 
Connection details come from 
$OTTER_HOME/otter_config or ~/.otter_config or
command line in a similar  manner to the rest of
the scripts in this directory.

=head1 USAGE

Just give it a dataset name that occurs in the db
you want to "fix". eg: "human" or "zebrafish"

=head1 AUTHOR

Ana Code B<email> anacode@sanger.ac.uk

