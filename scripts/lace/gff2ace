#!/usr/bin/env perl
# Copyright [2018-2019] EMBL-European Bioinformatics Institute
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


use warnings;


### gff2ace

use strict;
use Bio::Otter::Lace::Defaults;

{
    my $dataset_name;
    my $method='TransFrags';
    my $colour='CYAN';
    my $width=1;
    my $label_type='transcript_id';

    my @colours=(
        'ORANGE',
        'LIGHTRED',
        'RED',
        'DARKRED',
        'MAGENTA',
        'PURPLE',
        'VIOLET',
        'DARKBLUE',
        'BLUE',
        'LIGHTBLUE',
        'DARKGREEN',
        'GREEN',
        'LIGHTGREEN',
        'BROWN',
        'DARKGRAY',
        'CERISE',
        );

    my $usage = sub { exec('perldoc', $0) };
    Bio::Otter::Lace::Defaults::do_getopt(
        'h|help!'       => $usage,
        'dataset=s'     => \$dataset_name,
    'method=s'      => \$method,
    'colour=s'      => \$colour,
    'label_type=s'  => \$label_type,
    'width=s'       => \$width,
        ) or $usage->();
    $usage->() unless $dataset_name;
    
    # Client communicates with otter HTTP server
    my $cl = Bio::Otter::Lace::Defaults::make_Client();
    
    # DataSet interacts directly with an otter database
    my $ds = $cl->get_DataSet_by_name($dataset_name);

    my $otter_dba = $ds->get_cached_DBAdaptor;
    my $clone_aptr = $otter_dba->get_CloneAdaptor;
    
    print qq{\nMethod "$method"\nColour $colour\nWidth $width\n};
    
    my $prev_acc_sv = '';
    while (<>) {
        next if /^#/;
        next if /^\s*$/;
        my ($acc_sv, $source, $start, $end, $score, $strand, $valuepairs) = 
        (split(/\t/))[0,1,3,4,5,6,8];

    # build label
    my $label;
    foreach my $pair (split(/;\s+/,$valuepairs)){
      if($pair=~/(\w+)\s+\"(.*)\"/){
        if($1 eq $label_type){
          $label.="$2";
        }
      }
    }
    $label.=" $source";

        if ($strand eq '-') {
            ($start, $end) = ($end, $start);
        }
        
        if ($acc_sv ne $prev_acc_sv) {
            my $ctg_name = fetch_contig_name($clone_aptr, $acc_sv);
            print qq{\nSequence "$ctg_name"\n};
            $prev_acc_sv = $acc_sv;
        }
        
        print qq{Feature "$method" $start $end 1.0 \"$label\"\n};
    }
}

sub fetch_contig_name {
    my( $clone_aptr, $acc_sv ) = @_;
    
    my ($acc, $sv) = $acc_sv =~ /^(.+)\.(\d+)$/ or die "Cannot parse '$acc_sv'";
    my $clone = $clone_aptr->fetch_by_accession_version($acc, $sv);
    my $ctg = $clone->get_all_Contigs->[0];
    return $ctg->name;
}



__END__

=head1 NAME - gff2ace

=head1 AUTHOR

Ana Code B<email> anacode@sanger.ac.uk

