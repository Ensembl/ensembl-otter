#!/usr/bin/env perl
# Copyright [2018-2019] EMBL-European Bioinformatics Institute
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


### dump_gff3_ens

use strict;
use warnings;

use Getopt::Long 'GetOptions';
use URI::Escape;
use Bio::EnsEMBL::DBSQL::DBAdaptor;
use Hum::Sort ('ace_sort');

{
    my $dbname = 'homo_sapiens_core_69_37';
    my $dbhost = 'ensdb-archive';
    my $dbport = 5304;
    my $dbuser = 'ensro';
    my $dbpass = '';

    my $usage = sub { exec('perldoc', $0) };
    GetOptions(
        'dbname=s' => \$dbname,
        'dbhost=s' => \$dbhost,
        'dbport=i' => \$dbport,
        'dbuser=s' => \$dbuser,
        'dbpass=s' => \$dbpass,
        'h|help!'  => $usage,
    ) or $usage->();

    my $db_aptr = Bio::EnsEMBL::DBSQL::DBAdaptor->new(
        -host   => $dbhost,
        -user   => $dbuser,
        -dbname => $dbname,
        -pass   => $dbpass,
        -port   => $dbport,
    );

    # DataSet interacts directly with an otter database
    my $slice_Ad = $db_aptr->get_SliceAdaptor;
    my $gene_Ad  = $db_aptr->get_GeneAdaptor;

    my @chr = sort { ace_sort($a->name, $b->name) } @{ $slice_Ad->fetch_all('toplevel') };
    print "##gff-version 3\n";
    foreach my $slice (@chr) {
        print STDERR $slice->seq_region_name, "\n";

        my $genes = $gene_Ad->Bio::EnsEMBL::DBSQL::GeneAdaptor::fetch_all_by_Slice($slice);

        while (my $gene = shift @$genes) {

            my $strand = $gene->strand == 1 ? '+' : '-';

            # --------- gene line ---------
            my $gline = join("\t",
                $slice->seq_region_name,
                $gene->biotype,
                'gene',
                $gene->seq_region_start,
                $gene->seq_region_end,
                '.',
                $strand,
                '.',
                'ID=' . $gene->stable_id . "." . $gene->version,
            );

            $gline .= name_attrib($gene);
            $gline .= ";Note=\"" . do_escape($gene->description) . "\"" if $gene->description;
            print $gline, "\n";

            foreach my $tsct (@{ $gene->get_all_Transcripts }) {
                eval { write_transcript_gtf($slice, $gene, $tsct); };
                warn $@ if $@;
            }
        }
    }
}

sub name_attrib {
    my ($obj) = @_;

    if (my @name = @{ $obj->get_all_Attributes("name") }) {
        return ';Name=' . $name[0]->value;
    }
    else {
        return '';
    }
}

sub do_escape {
    my $data = shift;

    my $equal_esc     = uri_escape("=");
    my $comma_esc     = uri_escape(",");
    my $semicolon_esc = uri_escape(";");

    $data =~ s/,/$comma_esc/g;
    $data =~ s/;/$semicolon_esc/g;
    $data =~ s/=/$equal_esc/g;

    return $data;
}

sub write_transcript_gtf {
    my ($slice, $gene, $transcript) = @_;

    my @startcs = make_start_codon_features($transcript, $transcript->stable_id);
    my @endcs = make_stop_codon_features($transcript, $transcript->stable_id);

    # --------- transcript line ---------

    # phase is set to 0

    my $strand = $transcript->strand == 1 ? '+' : '-';

    my $trans_line = sprintf(
        "%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\tID=%s;Parent=%s",
        $slice->seq_region_name, $transcript->biotype, 'transcript', $transcript->seq_region_start,
        $transcript->seq_region_end, '.', $strand, '.', $transcript->stable_id, $gene->stable_id . "." . $gene->version,
    );
    $trans_line .= name_attrib($transcript);

    # Notes
    my @nfs;
    foreach my $code ("mRNA_start_NF", "mRNA_end_NF", "cds_start_NF", "cds_end_NF") {
        if (my @attr = @{ $transcript->get_all_Attributes($code) }) {
            next unless $attr[0]->value;    # Only add if value is true
            my $nf = $code;
            $nf =~ s/NF/not_found/;
            push(@nfs, $nf);
        }
    }
    my $notes;
    $notes = join(', ', @nfs) if @nfs;

    if ($notes) {
        print $trans_line . ";Note=\"" . $notes . "\"\n";
    }
    else {
        print "$trans_line\n";
    }

    my ($hasstart, $hasend) = check_start_and_stop($slice, $transcript);

    my @translateable_exons;
    @translateable_exons = @{ $transcript->get_all_translateable_Exons }
      if $transcript->translation;

    my $count   = 1;
    my $intrans = 0;
    my $instop  = 0;

    foreach my $exon (@{ $transcript->get_all_Exons }) {

        my $strand = $exon->strand;

        if ($exon->strand == -1) {
            $strand = "-";
        }
        elsif ($exon->strand == 1) {
            $strand = "+";
        }
        elsif ($exon->strand == 0) {
            $strand = ".";
        }

        if (   $transcript->translation
            && $exon == $transcript->translation->start_Exon)
        {
            $intrans = 1;
        }

        # --------- exon line ---------

        print join("\t",
            $slice->seq_region_name,
            $transcript->biotype,
            'exon',
            $exon->start,
            $exon->end,
            ".",
            $strand,
            ".",
            print_attribs($transcript,
            'exon'),
          ),
          "\n";

        if ($intrans) {

            my $cdsexon = shift @translateable_exons;
            my $phase   = $cdsexon->phase;
            if ($cdsexon->phase == 1) {
                $phase = 2;
            }
            elsif ($cdsexon->phase == 2) {
                $phase = 1;
            }
            elsif ($cdsexon->phase == -1) {
                $phase = 0;
            }

            my $exon_start = $cdsexon->start;
            my $exon_end   = $cdsexon->end;

            if (
                $transcript->translation
                &&

                # $exon == $transcript->translation->end_Exon &&
                $hasend && $exon->overlaps($endcs[0])
              )
            {

                if ($cdsexon->strand == 1) {
                    $exon_end = $cdsexon->end - $endcs[0]->length;
                }
                else {
                    $exon_start = $cdsexon->start + $endcs[0]->length;
                }
            }

            # --------- CDS line ---------

            if (   $exon_start <= $cdsexon->end
                && $exon_end >= $cdsexon->start
                && !$instop)
            {
                print join("\t",
                    $slice->seq_region_name,
                    $gene->biotype,
                    'CDS',
                    $exon_start,
                    $exon_end,
                    ".",
                    $strand,
                    $phase,
                    print_attribs($transcript,
                    'CDS'),
                  ),
                  "\n";
            }
        }

        # --------- start_codon line ---------

        if (   $transcript->translation
            && $exon == $transcript->translation->start_Exon
            && $hasstart)
        {
            my $tmpcnt = $count;
            foreach my $startc (@startcs) {

                # phase is set to 0
                print join("\t",
                    $slice->seq_region_name,
                    $gene->biotype,
                    'start_codon',
                    $startc->start,
                    $startc->end,
                    ".",
                    $strand,
                    "0",
                    print_attribs($transcript,
                    'start_codon')
                  ),
                  "\n";
            }
        }

        # --------- stop_codon line ---------

        if ($transcript->translation
            && ($exon == $transcript->translation->end_Exon))
        {
            if ($hasend) {
                my $tmpcnt = $count - $#endcs;

                # phase is set to 0
                foreach my $endc (@endcs) {
                    print join("\t",
                        $slice->seq_region_name,
                        $gene->biotype,
                        'stop_codon',
                        $endc->start,
                        $endc->end,
                        ".",
                        $strand,
                        "0",
                        print_attribs($transcript,
                        'stop_codon')),
                      "\n";
                }
            }
            $intrans = 0;
        }

        if (scalar(@endcs) && $exon->overlaps($endcs[0])) {
            $instop = 1;
        }

        $count++;
    }

    return;
}

sub make_start_codon_features {
    my ($trans, $id) = @_;

    if (!$trans->translation) {
        return (());
    }

    my @translateable = @{ $trans->get_all_translateable_Exons };

    my @pepgencoords = $trans->pep2genomic(1, 1);

    if (scalar(@pepgencoords) > 2) {
        die("pep start does not map cleanly\n");
    }
    elsif (scalar(@pepgencoords) == 2) {
        print "WOW got a 2 feature start codon for "
          . $trans->stable_id
          . " strand "
          . $translateable[0]->strand . "\n";
    }

    unless ($pepgencoords[0]->isa('Bio::EnsEMBL::Mapper::Coordinate')) {
        die("pep start maps to gap [@pepgencoords]\n");
    }
    unless ($pepgencoords[-1]->isa('Bio::EnsEMBL::Mapper::Coordinate')) {
        die("pep start (end of) maps to gap [@pepgencoords]\n");
    }

    my @startc_feat;
    my $phase = 0;
    foreach my $pepgencoord (@pepgencoords) {

        push @startc_feat,
          Bio::EnsEMBL::Feature->new(
            -slice  => $trans->slice,
            -start  => $pepgencoord->start,
            -end    => $pepgencoord->end,
            -strand => $translateable[0]->strand
          );

        $phase = 3 - ($pepgencoord->end - $pepgencoord->start + 1);
    }
    if ($translateable[0]->strand == 1) {
        @startc_feat = sort { $a->start <=> $b->start } @startc_feat;
    }
    else {
        @startc_feat = sort { $b->start <=> $a->start } @startc_feat;
    }
    return @startc_feat;

}

sub make_stop_codon_features {
    my ($trans, $id) = @_;

    if (!$trans->translation) {
        return (());
    }
    my @translateable = @{ $trans->get_all_translateable_Exons };

    my $cdna_endpos = $trans->cdna_coding_end;

    my @pepgencoords = $trans->cdna2genomic($cdna_endpos - 2, $cdna_endpos);

    if (scalar(@pepgencoords) > 2) {
        die("pep end does not map cleanly\n");
    }
    elsif (scalar(@pepgencoords) == 2) {
        print "WOW got a 2 feature stop codon for " . $trans->stable_id . " strand " . $translateable[0]->strand . "\n";
    }

    unless ($pepgencoords[0]->isa('Bio::EnsEMBL::Mapper::Coordinate')) {
        die("pep end maps to gap [@pepgencoords]\n");
    }
    unless ($pepgencoords[-1]->isa('Bio::EnsEMBL::Mapper::Coordinate')) {
        die("pep end (end of) maps to gap [@pepgencoords]\n");
    }

    my @stopc_feat;
    my $phase = 0;
    foreach my $pepgencoord (@pepgencoords) {
        push @stopc_feat,
          Bio::EnsEMBL::Feature->new(
            -slice  => $trans->slice,
            -start  => $pepgencoord->start,
            -end    => $pepgencoord->end,
            -strand => $translateable[0]->strand
          );

        $phase = 3 - ($pepgencoord->end - $pepgencoord->start + 1);
    }

    if ($translateable[0]->strand == 1) {
        @stopc_feat = sort { $a->start <=> $b->start } @stopc_feat;
    }
    else {
        @stopc_feat = sort { $b->start <=> $a->start } @stopc_feat;
    }

    return @stopc_feat;
}

sub print_attribs {
    my ($transcript, $type) = @_;

    my $att;

    if ($type eq 'CDS') {
        $att = sprintf("ID=%s;Parent=%s", $transcript->translation->stable_id, $transcript->stable_id);
    }
    else {
        $att = sprintf("Parent=%s", $transcript->stable_id);
    }

    return $att;
}

sub check_start_and_stop {
    my ($slice, $trans) = @_;

    return (0, 0) if (!defined($trans->translation));

    my $tln = $trans->translation;

    my $coding_start = $trans->cdna_coding_start;
    my $coding_end   = $trans->cdna_coding_end;
    my $cdna_seq     = uc($trans->spliced_seq);

    my $startseq = substr($cdna_seq, $coding_start - 1, 3);
    my $endseq   = substr($cdna_seq, $coding_end - 3,   3);

    my $has_start = 1;
    my $has_end   = 1;

    $has_start = 0 if ($startseq ne "ATG");
    $has_end = 0 if ($endseq ne "TAG" && $endseq ne "TGA" && $endseq ne "TAA");

    return ($has_start, $has_end);
}

__END__

=head1 NAME - dump_gff3_ens

=head1 AUTHOR

James Gilbert B<email> jgrg@sanger.ac.uk

