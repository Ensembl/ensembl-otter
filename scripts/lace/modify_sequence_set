#!/usr/bin/env perl
# Copyright [2018] EMBL-European Bioinformatics Institute
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


use warnings;


### modify_sequence_set

use strict;

use Bio::Otter::Lace::Defaults;
use Hum::Submission qw(accession_from_sanger_name);

{
    my $priority    = 0;
    my $author      = (getpwuid($<))[0];
    my $description =
      undef;    # "This is a default description, created by $author";
    my $dataset_name = 'human';    # dataset to get from otter server
    my $set_name     = undef;
    my $delete       = 0;
    my $modify       = 0;
    my $show         = 0;
    my $help         = 0;
    my $list         = 0;

    #---------------------------------------------------------------------------
    Bio::Otter::Lace::Defaults::do_getopt(
        'dataset=s'     => \$dataset_name,
        'h|help'        => \$help,
        'description=s' => \$description,
        'priority=i'    => \$priority,
        'set|name=s'    => \$set_name,
        'delete'        => \$delete,
        'update'        => \$modify,
        'show'          => \$show,
        'list'          => \$list,
    );
    usage() if $help;

    die "you need to give the set name as an argument" if (!defined $set_name);
    die "only one of -delete, -update, -show please"
      if $delete + $modify + $show > 1;
    die "please use one of -delete, -update, -show "
      if $delete + $modify + $show < 1;

    # make otter client and connect to database
    my $cl       = Bio::Otter::Lace::Defaults::make_Client();
    my $ds       = $cl->get_DataSet_by_name($dataset_name);
    my $otter_db = $ds->get_cached_DBAdaptor;

    my $SequenceSet = $ds->get_SequenceSet_by_name($set_name);

    if ($modify) {    # if we're updating
        print STDERR "Changing from:\n";
        print STDERR join("  |  ",
            $SequenceSet->name, $SequenceSet->description,
            $SequenceSet->priority)
          . "\nto:\n";
        $description ||= $SequenceSet->description();
        $priority    ||= $SequenceSet->priority();
        $SequenceSet->description($description);
        $SequenceSet->priority($priority);
        $ds->update_SequenceSet($SequenceSet);
        print STDERR join("  |  ",
            $SequenceSet->name, $SequenceSet->description,
            $SequenceSet->priority)
          . "\n";
    }
    elsif ($delete) {
        $ds->delete_SequenceSet($SequenceSet);
    }
    elsif ($show) {

        # $ds->export_SequenceSet();
        my ($gaps, $found) =
          export_SequenceSet($otter_db, $SequenceSet, $list, $ARGV[0]);
        if (scalar(keys(%$found))) {
            print STDERR "Couldn't find:\n"
              . (join("\n", grep { $found->{$_} != 1 } (keys %$found))) . "\n";
        }
        print STDERR "Found $gaps gaps.\n";
    }
}

# ------------------------------------------------------------------------------
# SUBROUTINES

sub export_SequenceSet {
    my ($dba, $ss, $only_list, $file) = @_;
    my $name = $ss->name();
    my $fh;
    my $found   = {};
    my $columns = $only_list
      ? "CONCAT(c.embl_acc, '.', c.embl_version)"
      : " chr.name
            , a.chr_start
            , a.chr_end
            , a.contig_id
            , 'F'
            , CONCAT(c.embl_acc
                , '.'
                , c.embl_version)
            , a.contig_start
            , a.contig_end
            , IF(a.contig_ori = '1'
                , '+','-')
            , a.superctg_name ";
    my $sql = qq{
        SELECT $columns
        FROM assembly a
          , contig g
          , clone c
          , chromosome chr
        WHERE c.clone_id = g.clone_id
          AND a.contig_id = g.contig_id
          AND a.chromosome_id = chr.chromosome_id
          AND a.type = ?
        };

    if ($file and -e $file) {
        open($fh, '<', $file) or die $!;
        my @accessions;
        while (<$fh>) {
            my ($cl) = split;
            my $acc = accession_from_sanger_name($cl);
            $acc ||= $cl;
            push(@accessions, $dba->db_handle->quote($acc));
            $found->{$acc} = 0;
        }
        close $fh;
        my $accession_str = join(",", @accessions);
        $sql .= qq{&&   c.embl_acc IN ($accession_str) ORDER BY a.chr_start}
          if $accession_str;
    }
    else {
        $sql .= qq{ORDER BY a.chr_start};
    }
    my ($gaps, $f) = show_agp($dba, $sql, $name);
    $found = { %$found, %$f } if scalar(keys(%$found));
    return $gaps, $found;
}

sub show_agp {
    my ($dba, $sql, $set_name) = @_;
    my $sth = $dba->prepare($sql);
    $sth->execute($set_name);
    my $chr_end = 0;
    my $gaps    = 0;
    my $found   = {};
    while (my $row = $sth->fetchrow_arrayref()) {
        if ($chr_end && ($chr_end + 2) < $row->[1]) {
            $gaps++;

            #print STDERR $row->[0] . "\t--- GAP ---\t--- GAP ---\n";
            print join(
                "\t",
                (
                    $row->[0],     $chr_end + 1,
                    $row->[1] - 1, $gaps,
                    'N',           $row->[1] - $chr_end - 1
                )
              ),
              "\n";
        }
        $chr_end = $row->[2];
        print join("\t", @$row) . "\n";
        my $acc;
        ($acc) = split(/\./, $row->[5]) if $row->[5];
        $found->{ $acc || $row->[0] } = 1;
    }
    return $gaps, $found;
}

sub usage { exit(exec('perldoc', $0)); }

__END__

=head1 NAME - modify_sequence_set

=head1 DESCRIPTION

 Simple script to either B<delete>, B<update> or B<show> a sequence set from 
an B<otter> and of B<pipeline> database. Connection details come from 
$OTTER_HOME/otter_config or ~/.otter_config or command line in a similar 
manner to the rest of the scripts in this directory.

=head2 -delete

 This will delete the given B<dataset:set> from both otter and pipeline 
databases

=head2 -update

 This will update the given B<dataset:set> with the supplied B<description>
and/or B<priority> in bother otter and pipeline databases.

=head2 -show

 This will print to STDOUT the given B<dataset:set> in either B<agp> or a 
B<list> format.  B<N.B.> This only uses the otter database.


=head1 USAGE

    help         - display this pod
    dataset      - set the dataset
    set|name     - set the set name

    delete       - delete the B<dataset:set>

    update       - update the B<dataset:set> with desc &/| priority
     description - set the description
     priority    - set the priority

    show         - show the B<dataset:set> defaults as agp
     list        - use list format only

=head1 AUTHOR

Ana Code B<email> anacode@sanger.ac.uk

