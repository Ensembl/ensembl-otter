#!/usr/bin/env perl
# Copyright [2018] EMBL-European Bioinformatics Institute
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


use warnings;
use strict;

use Bio::SeqIO;
use Bio::Otter::Lace::Defaults;
use Bio::Vega::DBSQL::DBAdaptor;
use Bio::Otter::Lace::SatelliteDB;

{
    my( $dataset_name, $set_name, $stats_only, $whole_chr );

    my $usage = sub { exec('perldoc', $0) };
    Bio::Otter::Lace::Defaults::do_getopt(
        'h|help!'       => $usage,
        'dataset=s'     => \$dataset_name,
        'set|chr=s'     => \$set_name,
        'stats!'        => \$stats_only,
        'whole!'        => \$whole_chr, # with N-filled gaps
        ) or $usage->();
    $usage->() unless $dataset_name and $set_name;
    
    # Client communicates with otter HTTP server
    my $cl = Bio::Otter::Lace::Defaults::make_Client();
    
    # DataSet interacts directly with an otter database
    my $ds = $cl->get_DataSet_by_name($dataset_name);
    
    # SequenceSet contains a list of CloneSequence objects
    # in the assembly.
    my $ss = $ds->get_SequenceSet_by_name($set_name);
    $ds->fetch_all_CloneSequences_for_SequenceSet($ss);
    # $ds->fetch_pipeline_ctg_ids_for_SequenceSet($ss);
    
    my $otter_dba = $ds->get_cached_DBAdaptor;
    my $pipe_dba = Bio::Otter::Lace::SatelliteDB::get_DBAdaptor(
        $otter_dba, 'pipeline_db_head', 'Bio::EnsEMBL::DBSQL::DBAdaptor',
        );
    my $slice_aptr = $pipe_dba->get_SliceAdaptor;

    my $cs_list;
    if ($whole_chr) {
        $cs_list = [ $set_name ];
        # one chromosome
    } else {
        $cs_list = $ss->CloneSequence_list;
        # listref of Bio::Otter::Lace::CloneSequence
    }

    my $seq_out = Bio::SeqIO->new(
        -fh     => \*STDOUT,
        -format => 'fasta',
        );
    
    my $repeat_mask = ['trf', 'RepeatMasker'];
    my $soft = 1;
    my %total; # stats chr=>count
    foreach my $obj (@$cs_list) {
        my $slice;
        if (ref($obj)) {
            my $cs = $obj;
            # my $ctg_id = $cs->pipeline_contig_id or die "No pipeline contig ID";
            my $ctg_name = $cs->contig_name();
            $slice = $slice_aptr->fetch_by_region('contig', $ctg_name);
        } else {
            $slice = $slice_aptr->fetch_by_region(chromosome => $obj);
        }
        my $seq = $slice->get_repeatmasked_seq($repeat_mask, $soft);
	if ($stats_only) {
	    my $char = seq2stats($seq->seq);
	    printf("%-25s %s\n", $seq->seq_region_name, join "  ", stats2txt($char));
	    while (my ($ch, $n) = each %$char) { $total{$ch} += $n }
	} else {
	    $seq_out->write_seq($seq);
	}
    }

    if ($stats_only) {
	print "=" x 76, "\n";
	printf("%-25s %s\n", 'Total', join "  ", stats2txt(\%total));
    }
}

sub seq2stats {
    my ($seq) = @_;
    my $len = length($seq);
    my %char;
    @char{qw{ a c g t  A C G T N }} = (0) x 9;

    for (my $i=0; $i<$len; $i++) {
	$char{substr($seq,$i,1)}++;
    }
    delete @char{(' ', "\n", "\t")};

    return \%char;
}

sub stats2txt {
    my ($char) = @_;

    my $len = 0;
    foreach my $i (values %$char) { $len += $i }
    return '(nil)  len:  0' if $len == 0;

    my $len_comma = $len;
    while ($len_comma =~ s{(\d)(\d{3}(?:,|$))}{$1,$2}g) { } # commas per 000

    my $mask = $$char{a} + $$char{c} + $$char{g} + $$char{t};

    return (map {sprintf($$char{$_} == 0 ? '%s: %4s ' : '%s:%5.1f%%',
			 $_, $$char{$_} / $len * 100)}
	    sort keys %$char),
	      sprintf('mask:%5.1f%%  len:%8s', $mask / $len * 100, $len_comma);
}



__END__

=head1 NAME - get_softmasked_seq_for_set

=head1 DESCRIPTION

Dump softmasked sequence to STDOUT

=head1 SYNOPSIS

 get_softmasked_seq_for_set -dataset <species> -chr <chromosome> [ -stats ] [ -whole ]

=head1 AUTHOR

Ana Code B<email> anacode@sanger.ac.uk

