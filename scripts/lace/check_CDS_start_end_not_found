#!/usr/bin/env perl
# Copyright [2018-2022] EMBL-European Bioinformatics Institute
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


use warnings;


### check_CDS_start_end_not_found

use strict;
use Getopt::Long 'GetOptions';
use IO::Handle;
use Bio::Otter::Lace::Defaults;
use Bio::Seq;


$| = 1;

my ($dataset, @sets, $vega);

my $help = sub { exec('perldoc', $0) };

Bio::Otter::Lace::Defaults::do_getopt(
    'ds|dataset=s' => \$dataset, # eg, human or mouse or zebrafish
    's|set=s@'     => \@sets,    # sequence set(s) to check
    'h|help'       => $help,
    'v|vega'       => \$vega,    # this flags vega_set_id > 0. If !$vega: check all datasets
    # for now, zebrafish defaults to !$vega
    ) or $help->();               # plus default options
$help->() unless ( $dataset );
$help->() if ( $vega and @sets );                                  # vega option does all vega sets


my $client    = Bio::Otter::Lace::Defaults::make_Client();         # Bio::Otter::Lace::Client
my $dset      = $client->get_DataSet_by_name($dataset);            # Bio::Otter::Lace::DataSet
my $otter_db  = $dset->get_cached_DBAdaptor;                       # Bio::EnsEMBL::Containerr
my $geneAd    = $otter_db->get_GeneAdaptor;                        # Bio::Otter::AnnotatedGeneAdaptor

my $date = `date +%Y%m%d`; chomp $date;
my ($fh, $fh1);
my ($tmp, $list);

if ( !$vega ) {
  open ( $fh, '>', "cds_start_end_not_found_updateInfo.$dataset.$date") || die $!;
  $tmp  = "cds_start_end_not_found_annotator.$dataset.$date.tmp";
  $list = "cds_start_end_not_found_annotator.$dataset.$date";

  open ( $fh1, '>', $tmp) || die $!;
}
else {
  open ( $fh, '>', "cds_start_end_not_found_updateInfo.${dataset}_vega.$date") || die $!;
  $tmp  = "cds_start_end_not_found_annotator.${dataset}_vega.$date.tmp";
  $list = "cds_start_end_not_found_annotator.${dataset}_vega.$date";

  open ( $fh1, '>', $tmp) || die $!;
}

# do not want to use buffer
$_->autoflush for ( $fh, $fh1 );


my $name_and_shame;

# do only vega sets
if ( $vega ) {

  # sql query to get all assembly types used for vega db only

  my $sql = q{SELECT assembly_type FROM sequence_set WHERE vega_set_id > 0};

  my $sth = $otter_db->prepare($sql);
  $sth->execute;
  while ( my $set = $sth->fetchrow_array()) {
      push (@sets, $set);
  }
  $sth->finish;
}

# do whole genome
if ( !@sets && !$vega ) {

  print "\nExamining all genes on '$dataset'\n";

  my $latest_gene_id = $geneAd->list_current_dbIDs;

  my $positives = get_latest_gene_translations($latest_gene_id);

  $name_and_shame = check_annotations($positives);
  output_list($name_and_shame, $vega, $tmp, $list);
}

# loop thru all assembly types to fetch all annotated genes in it on otter
if ( @sets ) {

  foreach my $set ( @sets ) {

    print "\nExamining genes on '$set'\n";

    my $seqSet    = $dset->get_SequenceSet_by_name($set);
    $dset->fetch_all_CloneSequences_for_SequenceSet($seqSet);

    my $chrom;
    #eval {
    $chrom = $seqSet->CloneSequence_list()->[0]->chromosome;
    #};

    ## next if $@;

    my $sliceAd = $otter_db->get_SliceAdaptor;
    my $slice   = $sliceAd->fetch_by_chr_name($chrom->name);

    my $latest_gene_id = $geneAd->list_current_dbIDs_for_Slice($slice);

    my $positives = get_latest_gene_translations($latest_gene_id, $slice);

    my $e = "Found " . scalar @$positives . " transcripts w/ translation in $set. . .\n";
    print $fh $e;
    warn $e, "\n";

    $name_and_shame = check_annotations($positives, $set);
  }

  output_list($name_and_shame, $vega, $tmp, $list);
}


#############################################################
#                   s u b r o u t i n e s
#############################################################


sub output_list {

  my ($name_and_shame, $vega, $tmp, $list) = @_;

  if ( keys %$name_and_shame ) {

    # blame list
    open( my $fh, '>', $list) or die $!;
    print $fh "\nPlease check the protein sequence of transcript that has:\n";
    print $fh "\t(1) no stop codon but 'cds_end_not_found' tag is NOT selected or\n";
    print $fh "\t(2) non-ATG translation start but 'cds_start_not_found' tag is NOT selected or\n";
    print $fh "\t(3) stop codon in CDS(s)\n\n";

    foreach my $name ( sort keys %$name_and_shame ) {
      warn $name;
      my @errs = `grep $name $tmp | cut -f2-4 `;

      if ( @errs ){
        warn @errs;
        print $fh "\n$name:\n";
        foreach my $err ( @errs ){
          print $fh "\t$err";
        }
      }
    }
    #unlink $tmp;
  }

  return;
}

sub get_latest_gene_translations {

  my ($latest_gene_id, $slice) = @_;
  my $positives;

  foreach my $id ( @$latest_gene_id ) {

    print STDOUT ".";

    # transform contig coords of a gene into chrom. coords
    my $gene;
    $gene = $geneAd->fetch_by_dbID($id)->transform($slice) if $slice;
    $gene = $geneAd->fetch_by_dbID($id)                    if !$slice;

    # always filter out gene type = "obsolete"
    next if $gene->type eq "obsolete";

    my $trans_list = $gene->get_all_Transcripts;

    # now working on transcript translation
    foreach my $trans ( @$trans_list ) {

      next if $trans->transcript_info->class->name eq "Transposon";

      if ( $trans->translation ) {
        push (@$positives, $trans);
      }
    }
  }
  return $positives;
}


sub check_annotations {

  my ($positives, $set) = @_;

  my ($protein, $mrna);
  my $trans_info_update = [];

  foreach my $t ( @$positives ) {

    $set = $t->adaptor->db->assembly_type unless $set;

    my $tsi = $t->transcript_info->transcript_stable_id;
    my $annotator = $t->transcript_info->author->name;
    $name_and_shame->{$annotator}++;

    #-------------------------------
    #   check non-ATG start codon
    #-------------------------------

    my $start_codon;
    eval {

      $start_codon = get_start_codon($t->get_all_translateable_Exons->[0]->seq->seq);

      # length of $start_codon can be < 3 when the start_exon seqs are immediately followed by intron
      # if so, fetch the rest bp of the start codon from the second exon

      if ( length $start_codon < 3 ) {
        my $exon_seqs = get_start_codon($t->get_all_translateable_Exons->[1]->seq->seq);
        $start_codon = uc($start_codon . substr($exon_seqs, 0, (3 - length $start_codon) ));
      }
    };

    # cds_start_not_found tag should be selected in AceDB

    if ( !$@ && $start_codon ne "ATG" && $t->transcript_info->cds_start_not_found == 0 ) {
      my $error = sprintf("$annotator\t%-20s\t%-25s%-10s\n", $t->transcript_info->name, $set, "$tsi\t'$start_codon' as translation start");
      print $fh1 $error;
    }

    #-------------------------------------------
    #  check translation has stop codon at end
    #-------------------------------------------

    # calling translateable_seq first then call translate to preserve stop codon

    eval{
      $mrna       = $t->translateable_seq;
      my $peptide = Bio::Seq->new( -seq      => $mrna,
                                   -alphabet => 'dna');

      $protein = $peptide->translate->seq;
    };

    unless ( $@ ){

      # grep only transcirpts with non-stop translation and check if cds_end_not_found tag is selected in AceDB
      if ( $protein !~ /\*$/ && $t->transcript_info->cds_end_not_found == 0 ) {

        my $end_exon_end_30 = get_end_30_dna($t->get_all_translateable_Exons->[-1]->seq->seq); # last exon dna seq
        my $trans_end_30    = get_end_30_dna( $mrna ); # full mrna dna seq

        if ( $end_exon_end_30 ne $trans_end_30 ) {

          my $error = sprintf("$annotator\t%-20s\t%-25s%-10s\n", $t->transcript_info->name, $set,"$tsi\thas no stop codon");
          print $fh1 $error;
        }
        else {
          printf $fh ("\t%-25s(%10s) - no stop codon - fixed automatically\n", $t->transcript_info->name, $set, $tsi);
          push(@$trans_info_update, $tsi);
        }
      }
      elsif ( $protein =~ /\*.*[A-Z]$/ ) {
        my $error = sprintf("$annotator\t%-20s\t%-25s%-10s\tstop codon in CDS - annotator to check\n", $t->transcript_info->name, $set, $tsi);
        print $fh1 $error;
      }
    }
  }

  undef $@;
  if ( $trans_info_update->[0] ) {

    $otter_db->begin_work;

    eval {
      update_cds_end_not_found($otter_db, $trans_info_update);
    };
    unless ( $@ ){
      $otter_db->commit;
      printf $fh ("\tcds_end_not_found update successful (%d)\n\n", scalar @$trans_info_update);
    } else {
      $otter_db->rollback;
    }
  } else {
    printf $fh ("\tNo cds_end_not_found to update automatically\n\n");
  }

  return $name_and_shame;
}

sub get_start_codon {
  my $start_exon_dna = shift;
  return uc( substr($start_exon_dna, 0, 3) ); # just make sure to use uppercase here
}

sub get_end_30_dna {

  # get end 30 or less dna
  my $end_dna = shift;

  my $end_30;
  if ( length($end_dna) >= 30 ) {
    $end_30 = substr($end_dna, -(30-length($end_dna)), 30);
  } else {
    $end_30 = substr($end_dna, 0, length($end_dna));
  }

  return $end_30;
}


sub update_cds_end_not_found {
  my ( $db, $trans_info_update ) = @_;

  my $ids = join(',', map {"'".$_."'"} @$trans_info_update);

  my $sth = $db->prepare(qq{
    UPDATE transcript_info
    SET cds_end_not_found = 'true'
    WHERE transcript_stable_id IN ($ids)
    });
  $sth->execute;
  $sth->finish;

  return;
}

__END__

=head1 NAME - check_CDS_start_end_not_found

=head1 SYNOPSIS

check_CDS_end_not_found [-dataset <dataset>] [-set <assembly_type>]

Two info fles are created at run dir, eg, for dataset human:

(1) cds_end_not_found_updateInfo.human.yyymmdd => what is fixed automatically, what requires annotator attention

(2) cds_end_not_found_annotator.human.yyyymmdd => transcripts to fix for each annotator


=head1 DESCRIPTION

Look for protein sequence of transcripts which does not have stop codon but cds_end_not_found is set to false.
This causes EMBL file submission errors. Normally such errors are from annotators not setting the value accordingly.

This script also reset the value of cds_end_not_found column in otter to "true" for those transcripts found when
the end protein sequence of a transcript is in the end exon.


### Human sequence_set to submit

select assembly_type, description from sequence_set where vega_set_id > 0;
+---------------+---------------------------------------------------+
| assembly_type | description                                       |
+---------------+---------------------------------------------------+
| chr10_06      | Human Chromosome 10 in SANGER 06 Assembly         |
| chr13-10      | Human Chr13-10 AGP                                |
| chr14         | Human Chromosome 14                               |
| chr19         | Human Chr19 NCBI34                                |
| Chr1_final    | Final version of Chromosome 1                     |
| chr20-9       | Human Chr20-09 AGP                                |
| chr22-02      | chr 22 AGP corresponds to NCBI 35                 |
| chr6-14       | Chromosome 6 with single haplotype MHC region     |
| chr7          | Human Chr7 NCBI31                                 |
| chr9-12       | Human Chr9-12 AGP                                 |
| ChrX-07       | ChrX-07 AGP                                       |
| chr_Y_01      | Y agp from Kym Pepin                              |
| MHC_COX       | COX Haplotype                                     |
| MHC_NCBI34.1  | Region 1 of NCBI34 chr6 replaced by PGF haplotype |
| MHC_NCBI34.2  | Region 2 of NCBI34 chr6 replaced by PGF haplotype |
| MHC_PGF       | PGF Haplotype                                     |
| MHC_QBL       | Human Chromosome 6 Haplotype QBL                  |
| MHC_SSTO      | Human Chromosome 6 Haplotype SSTO                 |
+---------------+---------------------------------------------------+
-set chr10_06 -set chr13-10 -set chr14 -set chr19 -set Chr1_final -set chr20-9 -set chr22-02 -set chr6-14 -set chr7 -set chr9-12 -set ChrX-07 -set chr_Y_01 -set MHC_COX -set MHC_NCBI34.1 -set MHC_NCBI34.2 -set MHC_PGF -set MHC_QBL -set MHC_SSTO

### Mouse sequence_set to sumbit

select assembly_type, description from sequence_set where vega_set_id > 0;
+---------------+--------------------------------------------+
| assembly_type | description                                |
+---------------+--------------------------------------------+
| black6_IDD5.1 | black 6 strain IDD5.1 region on chr 1      |
| chr11         | Chromosome 11 agp from chromoview 20/02/04 |
| del36H_set    | del36H region (chromosome 13)              |
| mrc4-2        | loaded 23/04/2004                          |
| NOD_IDD10     | NOD strain IDD10 region on chr 3           |
| NOD_IDD3      | NOD strain IDD3 region on chr 3            |
| NOD_IDD5.1    | NOD strain IDD5.1 region on chr 1          |
+---------------+--------------------------------------------+

-set black6_IDD5.1 -set chr11 -set del36H_set -set mrc4-2 -set NOD_IDD10 -set NOD_IDD3 -set NOD_IDD5.1

### zebrafish squence_set to submit

This is filter by clones_to_submit() in run_emblDump script. Just run the script without -set to check for all sequence sets.



=head1 AUTHOR

Ana Code B<email> anacode@sanger.ac.uk

