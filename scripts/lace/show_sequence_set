#!/usr/bin/env perl
# Copyright [2018-2019] EMBL-European Bioinformatics Institute
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


### show_sequence_set

use strict;
use warnings;

use Bio::Otter::Lace::Defaults;
use Hum::Sort 'ace_sort';

{
    my( $dataset_name,
        $sequence_set,
        );
    my $acc_only = 0;
    my $show_agp = 0;
    my $acc_sv   = 0;
    my $all      = 0;
    my $agp_cs_version;

    my $usage = sub { exec('perldoc', $0) };
    Bio::Otter::Lace::Defaults::do_getopt(
        'h|help!'       => $usage,
        'dataset=s'     => \$dataset_name,
        'chr|set=s'     => \$sequence_set,
        'acc_only!'     => \$acc_only,
        'sv!'           => \$acc_sv,
        'agp!'          => \$show_agp,
        'agp_cs_ver=s'  => \$agp_cs_version,
        'all!'          => \$all,
        ) or $usage->();

    $usage->() if $acc_only and $acc_sv;

    if ($agp_cs_version and not $show_agp) {
        warn "--agp_cs_ver can only be specified with --agp";
        $usage->();
    }

    # Connect to Ensembl/Otter database and fetch adaptors
    my $cl = Bio::Otter::Lace::Defaults::make_Client();
    
    if ($dataset_name) {
        my $ds = $cl->get_DataSet_by_name($dataset_name);

        if ($sequence_set) {
            if ($show_agp) {
                $agp_cs_version ||= 'Otter';
                print_agp($ds, $sequence_set, $agp_cs_version);
            } else {
                print_sequence_set($ds, $sequence_set, $acc_only, $acc_sv);
            }
        } else {
            print_set_list($ds, $all);
        }
    } else {
        print "Datasets:\n";
        foreach my $ds ($cl->get_all_DataSets) {
            #use Data::Dumper;  print Dumper($ds);
            print "  ", $ds->name, "\n";
        }
    }
}

sub print_agp {
    my( $ds, $chr_name, $agp_cs_version ) = @_;

    my $dba = $ds->get_cached_DBAdaptor;
    
    my $chr_details = $dba->dbc->prepare(q{
        SELECT seq_region_id, length
        FROM seq_region
        WHERE name = ?
    });
    $chr_details->execute($chr_name);
    my ($chr_id, $chr_length) = $chr_details->fetchrow;
    
    my $sth = $dba->dbc->prepare(q{
        SELECT asm.asm_start
          , asm.asm_end
          , asm.cmp_start
          , asm.cmp_end
          , asm.ori
          , contig.name
        FROM seq_region chr
          , seq_region contig
          , assembly asm
          , coord_system cs
        WHERE chr.seq_region_id = asm.asm_seq_region_id
          AND asm.cmp_seq_region_id = contig.seq_region_id
          AND contig.coord_system_id = cs.coord_system_id
          AND cs.name = 'contig'
          AND chr.seq_region_id = ?
        ORDER BY asm.asm_start
    });
    $sth->execute($chr_id);
    
    my $pos = 0;
    my $row = 0;
    while (my ($chr_start, $chr_end,
               $ctg_start, $ctg_end, $ctg_ori, $ctg_name) = $sth->fetchrow)
    {
        $row++;
        if (my $gap = ($chr_start - ($pos + 1))) {
            print join("\t", $chr_name, $pos + 1, $pos + $gap, $row, 'N', $gap), "\n";
            $row++;
        }
        if ($ctg_name =~ /^(.+)(\.\d+)(\.\d+)(\.\d+)$/) {
            $ctg_name = $1 . $2;
        }
        print join("\t", $chr_name, $chr_start, $chr_end, $row, 'F',
            $ctg_name, $ctg_start, $ctg_end,
            $ctg_ori eq '1' ? '+' : '-'), "\n";
        $pos = $chr_end;
    }
    if (my $gap = $chr_length - $pos) {
        ++$row;
        print join("\t", $chr_name, $pos + 1, $pos + $gap, $row, 'N', $gap), "\n";
    }

    return;
}

sub print_sequence_set {
    my( $ds, $sequence_set, $acc_only, $acc_sv ) = @_;
    
    my $ss = $ds->get_SequenceSet_by_name($sequence_set);
    $ds->fetch_all_CloneSequences_for_SequenceSet($ss);
    my $cs_list = $ss->CloneSequence_list;
    
    my $last_pos = 0;
    for (my $i = 0; $i < @$cs_list; $i++) {
        my $cs = $cs_list->[$i];
        
        # Show sizes of gaps between clones
        if (! $acc_only && ! $acc_sv && ( my $gap = $cs->chr_start - $last_pos - 1 )) {
            printf "GAP  %s bp\n", comma_format($gap);
        }
        $last_pos = $cs->chr_end;
        
        # Print the clone information
        if ($acc_only) {
            print $cs->accession, "\n";
        }
        elsif ($acc_sv) {
            print $cs->accession . '.' . $cs->sv, "\n";
        }
        else {
            printf "%5d  %-12s  %-8s\n",
                $i + 1,
                $cs->clone_name,
                $cs->accession;
        }
    }

    return;
}

sub print_set_list {
    my( $ds, $all ) = @_;
    
    my $method = $all ? 'get_all_SequenceSets' : 'get_all_visible_SequenceSets';
    
    my @ss_list = sort {ace_sort($a->name, $b->name)} @{$ds->$method()};
    
    my $max = 0;
    foreach my $ss (@ss_list) {
        my $len = length($ss->name);
        $max = $len if $len > $max;
    }
    
    my $pattern = "  \%-${max}s  \%s\n";
    foreach my $ss (@ss_list) {
        printf $pattern,
            $ss->name,
            $ss->description;
    }

    return;
}

sub comma_format {
    my( $number ) = @_;
    
    my $formatted = reverse $number;
    $formatted =~ s/(\d{3})(?=\d)/$1,/g;
    $formatted = reverse $formatted;
    
    return $formatted;
}

__END__

=head1 NAME - show_sequence_set

=head1 EXAMPLE

  ./show_sequence_set -dataset human
  
will list the sequence sets for the "human" dataset.

  ./show_sequence_set -dataset human -set chr1-07

will print out the "chr1-07" set, much as it
appears in the SequenceNotes window.

  ./show_sequence_set -dataset human -set chr1-07 -agp

will print out the same set in AGP format.

  ./show_sequence_set -dataset human -set 21 -agp -agp_cs_ver NCBI36

will print out the set named "21" with coord system version NCBI36.
(-agp_cs_ver defaults to "Otter".)

=head1 AUTHOR

Ana Code B<email> anacode@sanger.ac.uk

