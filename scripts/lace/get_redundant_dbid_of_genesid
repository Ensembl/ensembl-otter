#!/usr/bin/env perl
# Copyright [2018-2019] EMBL-European Bioinformatics Institute
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


use warnings;


use strict;
use Bio::Otter::Lace::Defaults;

my ($dataset_name, $test);

Bio::Otter::Lace::Defaults::do_getopt(
    'ds|dataset=s' => \$dataset_name,
    'test'         => \$test
    );

my $client   = Bio::Otter::Lace::Defaults::make_Client();
my $dset     = $client->get_DataSet_by_name($dataset_name);
my $ssets    = $dset->get_all_visible_SequenceSets;
my $otter_db = $dset->get_cached_DBAdaptor;
my $sliceAd  = $otter_db->get_SliceAdaptor;
my $geneAd   = $otter_db->get_GeneAdaptor;

if ( $test ){
  foreach my $gsid ('OTTHUMG00000001088', 'OTTHUMG00000001089', 'OTTHUMG00000008278', 'OTTHUMG00000011051') {
    my $gene = $geneAd->fetch_by_stable_id($gsid);
    get_redundant_db_ids($gene);
  }
}
else {
  foreach my $atype ( @$ssets ){
    #  next  if $atype->name !~ /^chr1-11/;

    my $gids = get_gene_dbid_list_of_atype($atype->name);

    foreach my $gid ( @$gids ){
      my $gene = $geneAd->fetch_by_dbID($gid);
      get_redundant_db_ids($gene);
    }
  }
}


#---------------------
#     subroutines
#---------------------

sub get_gene_dbid_list_of_atype {

  my $atype = shift;
  print STDOUT "Working on $atype\n";

  my $seqSet = $dset->get_SequenceSet_by_name($atype);
  $dset->fetch_all_CloneSequences_for_SequenceSet($seqSet);

  my $chrom = $seqSet->CloneSequence_list()->[0]->chromosome;
  my $slice = $sliceAd->fetch_by_chr_name($chrom);
  my $latest_gene_ids = $geneAd->list_current_dbIDs_for_Slice($slice);

  return $latest_gene_ids;
}

sub get_redundant_db_ids {

  my $gene = shift;
  my $gsid = $gene->stable_id;

  my $latest_ver = $gene->version;
  my ($ver_dbid, $ver_xml);

  foreach my $ver ( 1..$latest_ver ){
    my $curr_g;

    # some gsid do not have version 1 in db
    # and the versioning may not be contiguous
    eval {
      $curr_g = $geneAd->fetch_by_stable_id_version($gsid, $ver);
    };

    if ( $curr_g ){
      $ver_dbid->{$ver} = $curr_g->dbID;
      $ver_xml->{$ver} = join "\n", grep { ! /<(stable_id|author|author_email|translation_stable_id)>/ }  split "\n", $curr_g->toXMLString;

      if ($test){
        my $xmlout = $gsid."_".$ver."_".$curr_g->dbID;
        open(my $fh, '>', $xmlout) or die $!;
        print $fh $ver_xml->{$ver};
      }
    }
  }

  # version comparison via xml string
  my @unwanted_dbIDs;

  # make sure the version order is descending
  # and that versioning may not be contiguous
  # keep earlier version
  my @vers = sort { $b<=>$a } keys %$ver_xml;

  for ( my $i=0; $i < scalar @vers-1; $i++ ){
    if ( $ver_xml->{$vers[$i]} eq $ver_xml->{$vers[$i+1]} ){
        push(@unwanted_dbIDs, $ver_dbid->{$vers[$i]});
    }
  }

  print "$gsid ($latest_ver) @unwanted_dbIDs\n" if @unwanted_dbIDs;

  return;
}

__END__


