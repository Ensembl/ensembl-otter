#!/usr/bin/env perl
# Copyright [2018-2022] EMBL-European Bioinformatics Institute
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


use warnings;

### add_evidence_prefixes

use strict;
use Bio::Otter::Lace::Defaults;
use Bio::Otter::Lace::PipelineDB;

{
    my ($dataset_name);

    my $usage = sub { exec('perldoc', $0) };
    Bio::Otter::Lace::Defaults::do_getopt(
        'h|help!'   => $usage,
        'dataset=s' => \$dataset_name,
    ) or $usage->();
    $usage->() unless $dataset_name;

    # Client communicates with otter HTTP server
    my $cl = Bio::Otter::Lace::Defaults::make_Client();

    # DataSet interacts directly with an otter database
    my $ds = $cl->get_DataSet_by_name($dataset_name);

    my $otter_dba = $ds->get_cached_DBAdaptor;
    my $pipe_dba  = Bio::Otter::Lace::PipelineDB::get_pipeline_DBAdaptor($otter_dba);

    my $list_missing_pre = $otter_dba->dbc->prepare(
        q{
        SELECT transcript_id
          , name
          , type
        FROM evidence
        WHERE name NOT like '%:%'
        }
    );

    my $get_db = $pipe_dba->dbc->prepare(
        q{
        SELECT hit_db
        FROM hit_description
        WHERE hit_name = ?
        }
    );

    my $update_pre = $otter_dba->dbc->prepare(
        q{
        UPDATE evidence
        SET name = ?
        WHERE transcript_id = ?
    }
    );

    my $delete_dup_entry = $otter_dba->dbc->prepare(
        q{
        DELETE FROM evidence
        WHERE transcript_id = ? AND name = ? AND type = ?
    }
    );

    $list_missing_pre->execute;
    while (my ($id, $name, $type) = $list_missing_pre->fetchrow) {
        my $prefix;
        if ($type eq 'EST' or $type eq 'cDNA' or $type eq 'ncRNA') {
            $prefix = 'Em';
        }
        else {
            $get_db->execute($name);
            if (my ($db) = $get_db->fetchrow) {
                if ($db eq 'SwissProt') {
                    $prefix = 'Sw';
                }
                elsif ($db eq 'TrEMBL') {
                    $prefix = 'Tr';
                }
                else {
                    warn "Unknown database '$db'";
                    next;
                }
            }
        }
        if ($prefix) {
            eval { $update_pre->execute("$prefix:$name", $id); };
            if (my $err = $@) {
                if ($err =~ /Duplicate entry/) {
                    $delete_dup_entry->execute($id, $name, $type);
                    print STDERR "DUPLICATE DELETED '$id', '$name', '$type'\n";
                }
                else {
                    die $err;
                }
            }
            else {
                print STDERR "ADDED $type $prefix:$name\n";
            }
        }
        else {
            print STDERR "NO PREFIX: $type $name\n";
        }
    }
}

__END__

=head1 NAME - add_evidence_prefixes

=head1 AUTHOR

Ana Code B<email> anacode@sanger.ac.uk

