#!/usr/bin/env perl
# Copyright [2018] EMBL-European Bioinformatics Institute
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


use warnings;


### list_genes_by_set

use strict;
use Bio::Otter::Lace::Defaults;

{
    my( $dataset_name, $set_name );
    my $usage = sub { exec('perldoc', $0) };
    my $tran_info_flag = 0;
    my $list_alias_flag = 0;
    my $count_only = 0;
    Bio::Otter::Lace::Defaults::do_getopt(
        'dataset=s'         => \$dataset_name,
        'set|chr=s'         => \$set_name,
        'transcript!'       => \$tran_info_flag,
        'alias|synonym!'    => \$list_alias_flag,
        'count!'            => \$count_only,
        ) or $usage->();
    $usage->() unless $dataset_name;

    my $cl = Bio::Otter::Lace::Defaults::make_Client();
    my $ds = $cl->get_DataSet_by_name($dataset_name);
    my $dba = $ds->get_cached_DBAdaptor;
    my $gene_aptr  = $dba->get_GeneAdaptor;

    my( $gene_id_list );
    if ($set_name) {
        my $ss = $ds->get_SequenceSet_by_name($set_name);
        $ds->selected_SequenceSet($ss);
        $ds->fetch_all_CloneSequences_for_SequenceSet($ss);

        my $slice_aptr = $dba->get_SliceAdaptor;

        my ($chr, $chr_start, $chr_end) = $cl->chr_start_end_from_contig($ss->CloneSequence_list);
        #warn "$chr $chr_start-$chr_end\n";
        my $slice = $slice_aptr->fetch_by_chr_start_end($chr, $chr_start, $chr_end);

        $gene_id_list = $gene_aptr->list_current_dbIDs_for_Slice($slice);
    } else {
        $gene_id_list = $gene_aptr->list_current_dbIDs;
    }
    
    if ($count_only) {
        printf "Found %d genes\n", scalar @$gene_id_list;
        exit 0;
    }
    
    my( $get_tsct_syn );
    foreach my $id (@$gene_id_list) {
        my $gene = $gene_aptr->fetch_by_dbID($id);
        my $name = $gene->gene_info->name->name;
        my $type = $gene->type;
        if ($tran_info_flag) {
            $get_tsct_syn ||= $dba->prepare(q{
                SELECT transcript_synonym
                FROM transcript_synonym 
                WHERE transcript_name = ?
                });
            foreach my $tsct (@{$gene->get_all_Transcripts}) {
                my $tsct_name = $tsct->transcript_info->name;
                $get_tsct_syn->execute($tsct_name);
                my( @all_syn );
                while (my ($syn) = $get_tsct_syn->fetchrow) {
                    push(@all_syn, $syn);
                    #print STDERR "$syn\n";
                }
                print join("\t",
                    $name, $type, $gene->stable_id, $tsct_name, "@all_syn"
                    ), "\n";
            }
        } else {
            printf "%-6d  %18s  %24s  %-s\n", $gene->dbID, $gene->stable_id, $type, $name;
            if ($list_alias_flag) {
                foreach my $syn ($gene->gene_info->synonym) {
                    printf "%-6d  %18s  %24s  %-s\n", $gene->dbID, $gene->stable_id, $type, $syn->name;
                }
            }
        }
    }
}



__END__

=head1 NAME - list_genes_by_set

=head1 AUTHOR

Ana Code B<email> anacode@sanger.ac.uk

