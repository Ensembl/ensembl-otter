#!/usr/bin/env perl
# Copyright [2018-2019] EMBL-European Bioinformatics Institute
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


use warnings;


### dump_transcript_fasta

use strict;
use Bio::Otter::Lace::Defaults;
use Bio::SeqIO;

{
    my ($dataset_name, $set_name);

    my $usage = sub { exec('perldoc', $0) };

    # This do_getopt() call is needed to parse the otter config files
    # even if you aren't giving any arguments on the command line.
    Bio::Otter::Lace::Defaults::do_getopt(
        'h|help!'   => $usage,
        'dataset=s' => \$dataset_name,
        'set|chr=s' => \$set_name,
      )
      or $usage->();
    $usage->() unless $dataset_name and $set_name;

    # Client communicates with otter HTTP server
    my $cl = Bio::Otter::Lace::Defaults::make_Client();

    # DataSet interacts directly with an otter database
    my $ds        = $cl->get_DataSet_by_name($dataset_name);
    my $otter_dba = $ds->get_cached_DBAdaptor;

    my $gene_aptr  = $otter_dba->get_GeneAdaptor;
    my $slice_aptr = $otter_dba->get_SliceAdaptor;

    # SequenceSet contains a list of CloneSequence objects
    # in the assembly.
    my $ss = $ds->get_SequenceSet_by_name($set_name);
    $ds->fetch_all_CloneSequences_for_SequenceSet($ss);
    my ($chr, $chr_start, $chr_end) =
      $cl->chr_start_end_from_contig($ss->CloneSequence_list);
    my $slice = $slice_aptr->fetch_by_chr_start_end($chr, $chr_start, $chr_end);

    my $gene_id_list = $gene_aptr->list_current_dbIDs_for_Slice($slice);

    my $out = Bio::SeqIO->new(-format => 'fasta',);

    foreach my $gene_id (@$gene_id_list) {
        my $gene      = $gene_aptr->fetch_by_dbID($gene_id);
        my $gene_type = $gene->type;
        next if $gene_type eq 'obsolete';
        my $gene_name = $gene->gene_info->name->name;
        my @header = ($gene_type);
        if (my $gene_description = $gene->description) {
            push(@header, $gene_description);
        }

        my $max_length = 0;
        my $longest;
        foreach my $tsct (@{ $gene->get_all_Transcripts }) {
            my $seq = $tsct->spliced_seq;
            if (length($seq) > $max_length) {
                $longest = Bio::PrimarySeq->new;
                $longest->seq($seq);
                $longest->id($gene_name);
                $longest->desc(join "  ",
                    $tsct->transcript_info->name,
                    @header);
                $max_length = length($seq);
            }
        }

        $out->write_seq($longest);
    }
}

__END__

=head1 NAME - dump_transcript_fasta

=head1 AUTHOR

Ana Code B<email> anacode@sanger.ac.uk

