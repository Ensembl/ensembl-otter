#!/usr/bin/env perl
# Copyright [2018] EMBL-European Bioinformatics Institute
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


use warnings;


use strict;
use Bio::Otter::Lace::Defaults;
use Bio::Vega::DBSQL::DBAdaptor;

my ($dataset);
Bio::Otter::Lace::Defaults::do_getopt('ds|dataset=s' => \$dataset);

my $client    = Bio::Otter::Lace::Defaults::make_Client(); # Bio::Otter::Lace::Client
my $dset      = $client->get_DataSet_by_name($dataset);    # Bio::Otter::Lace::DataSet
my $loutre_db = $dset->make_Vega_DBAdaptor;               # Bio::Vega::DBSQL::DBAdaptor
my $ga        = $loutre_db->get_GeneAdaptor;
my $ta        = $loutre_db->get_TranscriptAdaptor;

my $sql = $loutre_db->prepare("select transcript_id, stable_id, version, modified_date from transcript_stable_id");
$sql->execute;

my $id_ver;
while ( my ( $tid, $id, $ver, $modtime) = $sql->fetchrow ){
  $id_ver->{$id}->{$ver}->{$modtime} = $tid;
}

foreach my $tsid ( keys %$id_ver ){
  foreach my $ver ( keys %{$id_ver->{$tsid}} ){
    if ( scalar keys %{$id_ver->{$tsid}->{$ver}} > 1 ){
      # warn "$tsid Ver $ver: @{$id_ver->{$tsid}->{$ver}}";
      my @sorted_time = sort keys %{$id_ver->{$tsid}->{$ver}};
      my $count;
      foreach my $time ( @sorted_time ){
        $count++;
        my $tid = $id_ver->{$tsid}->{$ver}->{$time};
        print "$tsid Ver $ver: transID: $tid $time\n";
        print "UPDATE transcript_stable_id set modified_date ='".$sorted_time[0], "' WHERE transcript_id = $tid;\n" if $count != 1;
      }
    print "\n";
    }
  }
}


