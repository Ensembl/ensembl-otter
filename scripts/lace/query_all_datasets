#!/usr/bin/env perl
# Copyright [2018-2022] EMBL-European Bioinformatics Institute
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


### query_all_datasets

use strict;
use warnings;
use Bio::Otter::Lace::Defaults;
use Bio::Otter::Server::Config;
use Try::Tiny;

{
    my $sql;
    my $pipe_flag    = 0;
    my $do_flag      = 0;
    my $ignore_flag  = 0;
    my $include_test = 0;
    Bio::Otter::Lace::Defaults::do_getopt(
        'query=s' => \$sql,
        'pipe!'   => \$pipe_flag,
        'do!'     => \$do_flag,
        'ignore!' => \$ignore_flag,
        'test!'   => \$include_test,
    );
    unless ($sql) {
        local $/ = undef; # slurp the whole of STDIN
        $sql = <>;
    }
    die "No query" unless $sql;

    print "$sql\n";

    foreach my $ds (Bio::Otter::Server::Config->SpeciesDat->all_datasets) {
        unless ($include_test) {
            next if $ds->name =~ /_(dev|test)$/;
        }
        printf "Querying dataset %s\n", $ds->name;
        my $query_dba =
          $pipe_flag
          ? $ds->pipeline_dba('rw')
          : $ds->otter_dba;

        try {
            my $row_count;
            if ($do_flag) {
                $row_count = $query_dba->dbc->do($sql);
            }
            else {
                my $sth = $query_dba->dbc->prepare($sql);
                $sth->execute;
                my $head = "\t" . DBI::neat_list($sth->{'NAME'}) . "\n";
                my $data = $sth->fetchall_arrayref;
                $row_count = $sth->rows;
                if ($row_count) {
                    print $head;
                    foreach my $row (@$data) {
                        print "\t", DBI::neat_list($row), "\n";
                    }
                }
            }

            printf STDERR "%d row%s\n", $row_count, $row_count == 1 ? '' : 's';

        } catch {
            if ($ignore_flag) {
                warn $_;
            }
            else {
                die $_;
            }
        };

        # while (my @row = $sth->fetchrow) {
        #     print join("\t", @row), "\n";
        # }
    }
}

__END__

=head1 NAME - query_all_datasets

=head1 SYNOPSIS

  query_all_datasets [-test] [-pipe] [-do] -query "SQL STATEMENT"
  query_all_datasets [-test] [-pipe] [-do] < tmp.sql

=head1 PARAMETERS

=over 4

=item B<-test>

Include datasets ending in C<_test> and C<_dev>. The default is to skip them.

=item B<-pipe>

Query the pipeline databases instead of the (default) loutre databases.

=item B<-do>

For non-SELECT statements, uses the C<DBI $dbh-E<gt>do()> method to run them.

=item B<-query>

The SQL to send to each database. Alternatively it will take SQL from STDIN.

=item B<-ignore>

Ignore otherwise fatal errors from executing queries.

=back

=head1 AUTHOR

Ana Code B<email> anacode@sanger.ac.uk

