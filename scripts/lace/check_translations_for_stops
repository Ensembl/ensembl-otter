#!/usr/bin/env perl
# Copyright [2018-2019] EMBL-European Bioinformatics Institute
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


use warnings;


### check_translations_for_stops

use strict;
use Getopt::Long 'GetOptions';
use Bio::Otter::Lace::Defaults;
use Bio::Seq;
use Bio::EnsEMBL::Intron;

$| = 1;

my ($out2, $out3, $out4, $out5, $out6, $out7);

{
    my ($dataset, $sequence_set, $chr_start_acc, $chr_end_acc, $gene_stable_id);
    my ($tunnel, $remarks, $verbose, $seleno, $sql, $prefix, $tags, $tlen, 
    $nmd, $nmds, $stat);
    my $help = sub { exec('perldoc', $0) };
    my $min_len=30;

    Bio::Otter::Lace::Defaults::do_getopt(
        'ds|dataset=s'          => \$dataset,
        'chr|set=s'             => \$sequence_set,
        'start_acc=s'           => \$chr_start_acc,
        'end_acc=s'             => \$chr_end_acc,
        'gene_stable_id=s'      => \$gene_stable_id,
        'tunnel=s'              => \$tunnel,
        'remarks'               => \$remarks,
        'seleno|selenocysteine' => \$seleno,
        'sql:s'                 => \$sql,
        'tags:s'                => \$tags,
        'verbose|v'             => \$verbose,
        'prefix:s'              => \$prefix,
    'min_length:s'          => \$min_len,
    'tlen:s'                => \$tlen,
    'nmd:s'                 => \$nmd,
    'nmds:s'                => \$nmds,
    'stat:s'                => \$stat,
        'h|help'                => $help,
      )
      or $help->();
    $help->() unless $dataset;

    my $client = Bio::Otter::Lace::Defaults::make_Client();
    my $dset   = $client->get_DataSet_by_name($dataset);

    # for tunnelling
    if ($tunnel) {
        $dset->HOST('127.0.0.1');
        $dset->PORT($tunnel);
        $dset->DNA_HOST('127.0.0.1');
        $dset->DNA_PORT($tunnel);
        print STDERR "Tunnelling otter mysql connection\n";
        print STDERR '  HOST=' . $dset->HOST . "\n";
        print STDERR '  PORT=' . $dset->PORT . "\n";
        print STDERR '  DNA_HOST=' . $dset->DNA_HOST . "\n";
        print STDERR '  DNA_PORT=' . $dset->DNA_PORT . "\n";
    }
    my $otter_db  = $dset->get_cached_DBAdaptor;
    my $gene_aptr = $otter_db->get_GeneAdaptor;

    my $gene_id_list=[];
    if ($gene_stable_id) {
      my @list;
      if (-e $gene_stable_id) {
    # 'gene_stable_id' is a file
    open(my $in, '<', $gene_stable_id) || die "cannot open $gene_stable_id";
    while (<$in>) {
      chomp;
      push(@list,$_);
    }
    close($in);
      } else {
    @list=(split(/,/, $gene_stable_id));
      }
      my $n=0;
      foreach my $gsi (@list) {
    $n++;
    # convert transcript_id into gene_id
    if ($gsi =~ /T\d+/) {
      my $g;
      eval{
        $g=$gene_aptr->fetch_by_transcript_stable_id($gsi);
      };
      next if ($@ || !$g);
      my $gsi2=$g->stable_id;
      print STDERR "$gsi -> $gsi2\n";
      $gsi=$gsi2;
    }
    eval{
      push(@$gene_id_list, $gene_aptr->fetch_by_stable_id($gsi)->dbID);
    };
    next if ($@);
      }
      print STDERR "checking ".scalar(@$gene_id_list)." valid gene_stable_ids out of $n\n";
      print join(',',@$gene_id_list)."\n";
      exit if scalar(@$gene_id_list)==0;
    } elsif ($sequence_set) {
        my $slice_aptr = $otter_db->get_SliceAdaptor;

        # code warns to set this, but doesn't exist/work...
        #$client->get_SequenceSets_for_DataSet($dset);
        my $ss = $dset->get_SequenceSet_by_name($sequence_set);
        $dset->selected_SequenceSet($ss);
        $dset->fetch_all_CloneSequences_for_SequenceSet($ss);
        if ($chr_start_acc or $chr_end_acc) {
            die sprintf(
                "Need both start_acc (got '%s') and end_acc (got '%s')\n",
                $chr_start_acc || 'NONE',
                $chr_end_acc   || 'NONE',
              )
              unless $chr_start_acc
              and $chr_end_acc;
            select_CloneSequence_contig($ss, $chr_start_acc, $chr_end_acc);
        }
        else {
            $ss->selected_CloneSequences($ss->CloneSequence_list);
        }
        my ($chr, $chr_start, $chr_end) =
          $client->chr_start_end_from_contig($ss->selected_CloneSequences);
        my $slice =
          $slice_aptr->fetch_by_chr_start_end($chr, $chr_start, $chr_end);
        $gene_id_list = $gene_aptr->list_current_dbIDs_for_Slice($slice);
    }
    else {
        $gene_id_list = $gene_aptr->list_current_dbIDs;
    }
    printf STDERR "Found %d current genes\n", scalar(@$gene_id_list);
    my $i = 0;

    # if sql file name specified, writes sql to add annotation remarks for
    # selenocysteine in correct format.
    if ($sql) {
        open($out2, '>', $sql) || die "cannot open $sql";
    }
    if ($tags) {
        open($out3, '>', $tags) || die "cannot open $tags";
    }
    if ($tlen) {
        open($out4, '>', $tlen) || die "cannot open $tlen";
    }
    if ($nmd) {
        open($out5, '>', $nmd) || die "cannot open $nmd";
    }
    if ($stat) {
        open($out6, '>', $stat) || die "cannot open $stat";
    }
    if ($nmds) {
        open($out7, '>', $nmds) || die "cannot open $nmds";
    }
    foreach my $id (@$gene_id_list) {
        $i++;
        print STDERR '.';
        print STDERR " $i\n" unless $i % 50;
        my $gene = $gene_aptr->fetch_by_dbID($id);
        my $gt   = $gene->type;
        next if ($prefix && $gt !~ /$prefix:/);
        next if ($gt eq 'obsolete');
    my $ntrans=0;
    my $ntranscript=0;
    my $nnmd=0;
    my $nnmdl=0;
        foreach my $trans (@{ $gene->get_all_Transcripts }) {

        # for stats, also report transcripts that are labelled as NMD
        if($nmd){
          my $transcript_info=$trans->transcript_info;
          my $tc=$transcript_info->class->name;
          if($tc eq 'Nonsense_mediated_decay'){
        my $tsi=$trans->stable_id;
        my $tn=$transcript_info->name;
        my $gsi=$gene->stable_id;
        print $out5 "$tsi ($tn) [$gsi]: INFO: annotated as NMD\n";
        $nnmdl++;
          }
        }

        $ntranscript++;
            next unless $trans->translation;
        $ntrans++;

        # check for translations containing stop codons
            my $sqltxt =
              check_for_stops($gene, $trans, $remarks, $verbose, $seleno, $sql);
            print $out2 $sqltxt if $sql;

        # check for translations with inconsistent 'snf, enf tags'
        print $out3 check_start_end($gene, $trans) if $tags;

        # check for translations that are very short
        print $out4 check_length($gene, $trans, $min_len) if $tlen;

        # check for translations when probably nmd
        print $out5 check_nmd($gene, $trans, $stat, \$nnmd) if $nmd;
        }
    if($ntrans>0){
      my $gid=$gene->stable_id;
      my $gn=$gene->gene_info->name->name;
      if($ntrans==$nnmd){
        print $out5 "$gid ($gn): WARN: all translations flagged as NMD ($ntrans)\n";
      }
      if($nmds){
        $nnmdl+=$nnmd;
        print $out7 "$gid ($gn)\t$ntrans\t$nnmd\t$ntranscript\t$nnmdl\n";
      }
    }
    }
    print STDERR " $i\n";
    close $out2 if $sql;
    close $out3 if $tags;
    close $out4 if $tlen;
    close $out5 if $nmd;
}

sub check_start_end {
  my ($gene, $trans)=@_;

  # 1. what tags are set tag?
  my $transcript_info=$trans->transcript_info;
  my $mrna_start_not_found=$transcript_info->mRNA_start_not_found;
  my $cdna_start_not_found=$transcript_info->cds_start_not_found;
  my $cdna_end_not_found=$transcript_info->cds_end_not_found;
  my $mrna_end_not_found=$transcript_info->mRNA_end_not_found;

  my $tsi=$trans->stable_id;
  my $tn=$transcript_info->name;
  my $mrna=$trans->seq->seq;
  my $cdna=$trans->translateable_seq;

  # 2. does the translation start with a valid start
  my $valid_start=0;
  if($cdna=~/^(ATG)/){
    $valid_start=1;
  }

  my $cdna2=$cdna;
  $cdna2=~s/^N+//;
  my $utr5='';
  my $utr3='';
  if($mrna=~/(.*)$cdna2(.*)/){
    $utr5=$1;
    $utr3=$2;
  }else{
    # should never get this error
    print "ERROR: $tsi: cDNA not found in mRNA: $cdna, $mrna\n";
  }

  # 3. does the translation end in a valid stop
  my $valid_stop=0;
  my $out;
  if(length($cdna) % 3 == 0){
    if($cdna=~/(TAG|TGA|TAA)$/){
      $valid_stop=1;
      # if not a valid end, are next 3 bp potentially valid?
    }elsif($utr3=~/^(TAG|TGA|TAA)/){
      $out.=' ERR31: offset STOP - shift 3bp into UTR for valid stop; ';
    }
  }

  # 4. is translation start also start of transcript
  my $abutted_translation_start=0;
  if(length($utr5)==0){
    $abutted_translation_start=1;
  }
  if($cdna ne $cdna2 && length($utr5)>0){
    # should never get this error
    print STDERR "ERROR: $tsi: cDNA truncated but not aligned with start".
    " of mRNA: $cdna, $mrna\n";
  }
  
  # 5. is translation end also end of transcript
  my $abutted_translation_end=0;
  if(length($utr3)==0){
    $abutted_translation_end=1;
  }

  # look for inconsistencies:
  if($valid_start){
    if($abutted_translation_start){
      $out.=' WARN11: valid start, but transcript and translation same length; ';
      # requires annotator investigation
    }
    if($cdna_start_not_found){
      $out.=' ERR11: valid start, but cdna_start_not_found tag present; ';
      # candidate for automatically fix - remove tag
    }
  }else{
    if(!$abutted_translation_start){
      $out.=' ERR12: invalid start, but translation starts after start of transcript; ';
      # requires annotator investigation
    }
    if(!$cdna_start_not_found){
      $out.=' ERR13: invalid start, but cdna_start_not_found tag missing; ';
      # requires annotator investigation
    }
  }
  if($abutted_translation_start){
    if(!$mrna_start_not_found){
      $out.=' WARN12: abutted start, but mRNA_start_not_found tag not present; ';
    }
  }

  if($valid_stop){
    if($abutted_translation_end){
      $out.=' WARN21: valid stop, but transcript and translation same length; ';
      # requires annotator investigation
    }
    if($cdna_end_not_found){
      $out.=' ERR21: valid stop, but cdna_end_not_found tag present; ';
      # candidate for automatically fix - remove tag
    }
  }else{
    if(!$abutted_translation_end){
      $out.=' ERR22: invalid stop, but translation stops before end of transcript; ';
      # requires annotator investigation
    }
    if(!$cdna_end_not_found){
      $out.=' ERR23: invalid stop, but cdna_end_not_found tag missing; ';
      # requires annotator investigation
    }
  }
  if($abutted_translation_end){
    if(!$mrna_end_not_found){
      $out.=' WARN22: abutted end, but mRNA_end_not_found tag not present; ';
    }
  }

  if($out){
    $out="$tsi ($tn): $out\n";
  }else{
    $out='';
  }
  return $out;
}

sub check_length {
  my ($gene, $trans, $min_len)=@_;

  my $transcript_info=$trans->transcript_info;
  my $tsi=$trans->stable_id;
  my $tn=$transcript_info->name;

  # extract original transcript name from remark (external imports only):
  if($tn=~/^(\w+):/){
    my $prefix=$1;
    foreach my $remark ($transcript_info->remark) {
      my $remark_txt=$remark->remark;
      #print STDOUT "$tsi: $tn: $remark\n";
      if($remark_txt=~/^$prefix\sname:\s(\w+)/){
    $tn.="; $1";
      }
    }
  }

  # 6. short CDS sequences
  my $out;
  my $pseq = $trans->translate->seq;
  my $lpseq=length($pseq);
  if($lpseq<$min_len){
    $out.=" WARN30: peptide is very short ($lpseq residues); ";
  }

  if($out){
    $out="$tsi ($tn): $out\n";
  }else{
    $out='';
  }
  return $out;
}

sub check_nmd {

  # rule is NMD if 
  # 1. multi-exon gene
  # 2. stop codon > 50 bp away from last slice site (i.e. last but 1 exon)

  my ($gene, $trans, $stat, $rnnmd)=@_;

  my $transcript_info=$trans->transcript_info;
  my $tsi=$trans->stable_id;
  my $tn=$transcript_info->name;
  my $tc=$transcript_info->class->name;

  my $flag_exception;
  foreach my $remark ($transcript_info->remark) {
    my $text = $remark->remark;
    if($text=~/Annotation_remark- NMD_exception/i){
      $flag_exception=1;
    }
  }

  my $gsi=$gene->stable_id;

  my $flag_nmd;

  my $out;
  if($tc eq 'Nonsense_mediated_decay'){
    $out.=" ERR1: transcript with translation labelled as 'NMD'; ";
  }

  # process all exons and look for ones where last exon is not translated
  my @exons = @{$trans->get_all_Exons()};

  # processing depends on number of exons
  my $ne=scalar(@exons);

  if($ne>1){

    # last exon
    my $lexon=pop @exons;
    my $pep_str;
    eval{
      $pep_str=$lexon->peptide($trans)->seq;
    };
    if($@){
      print STDERR "ERROR: $tsi $tn $gsi\n".$@;
    }
    if($pep_str eq ''){
      # only process further if last exon has no translation at all
      # last-1 exon
      my $l2exon=pop @exons;

      # get length of last intron
      my $ilen=0;
      eval{
    my $intron = Bio::EnsEMBL::Intron->new($l2exon, $lexon);
    $ilen=$intron->end - $intron->start + 1;
      };
      if($@){
    print STDERR "ERR: $tsi ($tn) $gsi: exons on different slices\n";
      }

      my $pep_str = $l2exon->peptide($trans)->seq;
      # use $enum to allow processing of both e-1 and e-2 exons
      my $enum;
      if($pep_str eq ''){
    # if last-1 exon has no translation, must be NMD
    $flag_nmd='whole exon';
    $enum=-2;
    # actually last but 2 exon
    $l2exon=pop @exons;
      }else{
    # get full sequence of transcript including this exon
    # but excluding last
    $enum=-1;
      }
      push(@exons,$l2exon);

      # get length of exon
      my $elen=$l2exon->end - $l2exon->start +1;

      my $eseq;
      foreach my $exon (@exons){
    $eseq.=$exon->seq->seq;
      }
      # get transcript sequence
      my $cds=$trans->translateable_seq;
      # strip off leading N's
      if($cds=~/^N{1,2}(.*)/){
    $cds=$1;
      }
      # compare cds with transcript to get length to exon boundary
      if($eseq=~/$cds(.*)/){
    my $leseq=length($1);
    # write distance for all cases for analysis
    if($stat){
      print $out6 "$leseq\t$tsi\t$tn\t$gsi\t$enum\t$ilen\t$elen\n";
    }
    # only flag as NMD if considering -1 exon
    if($leseq>50 && $enum==-1){
      $flag_nmd="$leseq bases from spice";
    }
      }else{
    print STDERR "ERR: translation not in transcript: $tsi $tn $gsi $enum\n $eseq\n $cds\n";
      }
    }
  }

  if($flag_nmd){
    if($flag_exception){
      $out.=" INFO: annotated as exception to NMD rule ($flag_nmd): labelled as $tc; ";
    }else{
      $out.=" ERR2: appears NMD ($flag_nmd), but labelled as $tc; ";
    }
  }

  if($out){
    $out="$tsi ($tn) [$gsi]: $out\n";
    $$rnnmd++;
  }else{
    $out='';
  }
  return $out;
}

sub check_for_stops {
    my ($gene, $trans, $remarks, $verbose, $seleno) = @_;

    # stop is ok if
    # - pseudogene
    # - selenocysteine and only single stop

    # selenocysteine stop codon
    my $scodon = 'TGA';
    my $sql    = '';

    # Translate method trims stops from sequence end
    my $peptide = $trans->translate;
    my $pseq    = $peptide->seq;

    # exit if no stops
    return $sql unless ($pseq =~ /\*/);

    # contains stops: find out where and how many there are
    my @stop;
    my $tstop;
    my $ttstop;
    {
        my $mrna        = $trans->translateable_seq;
        my $offset      = 0;
        my $last_offset = 0;
      LOOP:
        {
            if ($pseq =~ /([^\*]+)\*(.*)/) {
                my $pseq1_f = $1;
                $pseq = $2;

                # see if stop codon is result of selenocysteine (TGA)
                my $seq_flag = 0;
                $offset += length($pseq1_f) * 3;
                my $stop = substr($mrna, $offset, 3);
                if ($verbose) {
                    my $pseq3_f = join('  ', split(//, $pseq1_f));
                    my $mrna_f =
                      substr($mrna, $last_offset, $offset - $last_offset);
                    printf "%4d  " . $pseq3_f
                      . "   *\n%4d "
                      . $mrna_f . " "
                      . $stop
                      . "\n", length($pseq1_f), length($mrna_f);
                }
        ### check should below be +1 ??? 
        ### (checked this - correct - should be +1)
                my $aaoffset = int($offset / 3)+1;
                push(@stop, [ $stop, $aaoffset ]);
        if($tstop) { $tstop .= " "; }
        $tstop .= "$aaoffset";
                if ($ttstop) { $ttstop .= "; "; }
                $ttstop .= "$aaoffset:$stop";

                $offset += 3;
                $last_offset = $offset;
                redo LOOP if $pseq ne '';
            }
        }
    }

    my $nstop = scalar(@stop);

    my $flag_seq = 0;

    # if all stops are TGA, this is a candidate selenocysteine
    {
        my $ntga = 0;
        for (my $i = 0 ; $i < $nstop ; $i++) {
            if ($stop[$i]->[0] eq $scodon) {
                $ntga++;
            }
        }
        if ($ntga == $nstop) {
            $flag_seq = 1;
        }
    }

    # check if pseudo or not
    my $trans_class = $trans->transcript_info->class->name, my $flag_pseudo = 0;
    if ($trans_class =~ /seudogene$/) {
        $flag_pseudo = 1;
    }

    # check remarks
    my $flag_remark  = 0; # 1 if word seleno has been used
    my $flag_remark2 = 0; # 1 if existing remark has correct numbering
    my $flag_remark3 = 0; # 1 if new remark or format of existing remark had to be updated

    my $alabel       = 'Annotation_remark- selenocysteine ';
    my $alabel2      = 'selenocysteine ';
    my $out          = '';
    my $out2         = '';
    my $tiid;
    foreach my $remark ($trans->transcript_info->remark) {
        my $dbid = $remark->dbID;
        $tiid = $remark->transcript_info_id;
        my $text = $remark->remark;

    # word seleno has been used
        if ($text =~ /seleno/i) {
            $flag_remark = 1;
        }

        # check if existing remark has approved structure for
        # automatic parsing 'Annotation_remark- selenocysteine XX[ YY]' 
        # where XX, YY are the number of the aminoacid in the
        # translation that is a selenocysteine
    my $stops;
    my $flag_patch=0;
        if ($text =~ /^$alabel(.*)/) {
      $stops=$1;
    }elsif($text=~/^$alabel2(.*)/){
      my $tsid=$trans->stable_id;
      print STDERR "\nWARN: seleno remark for $tsid stored as plain remark\n";
      $flag_patch=1;
      $stops=$1;
    }
    if($stops){
            my $nmatch     = 0;
            my $i          = 0;
            foreach my $offset (split(/\s+/, $stops)) {
                if ($i + 1 > $nstop) {
                    $nmatch = 0;
                    last;
                }
        if($offset!~/^\d+$/){
          # not a number - ignore
        }
                elsif ($stop[$i]->[1] == $offset) {
                    $nmatch++;
                }
                elsif (($stop[$i]->[1] * 3) == $offset) {
            # catch old annotations where number was in DNA
            # not peptide coordinates
                    $nmatch++;
                    $flag_patch = 1;
        }
                elsif (($stop[$i]->[1]) == $offset+1) {
            # catch old annotations where number off by one
                    $nmatch++;
                    $flag_patch = 1;
                }
                $i++;
            }
            if ($nmatch == $nstop) {
                $flag_remark2 = 1;
                if ($flag_patch) {
            $flag_remark3=1;
                    # existing structured remark is wrong - patch
                    $sql .=
"update transcript_remark set remark=\'$alabel$tstop\' where transcript_remark_id=$dbid;\n";
                    $out2 = sprintf(
                        "  UPDATED REMARK: %s %s\n",
                        $trans->transcript_info->name,
                        "$alabel$tstop"
                    );
                }
            }
        }
        $out .= "  remark: $text\n";
    }

    # provide feedback
    my $label;
    if ($flag_pseudo) {
        $label = 'P-OK';
    }
    elsif ($flag_seq == 1) {
        if ($flag_remark) {

            # remark indicates stop is a Selenocysteine
            $label = 'S-OK';
            if (!$flag_remark2) {
            $flag_remark3=1;

                # unless structured remark exists, build appropriate sql
                $sql .=
"insert into transcript_remark values (NULL,\'$alabel$tstop\',$tiid);\n";
                $out2 = sprintf(
                    "  NEW REMARK: %s %s\n",
                    $trans->transcript_info->name,
                    "$alabel$tstop"
                );
            }
        }
        else {
            $label = 'S-??';
        }
    }
    else {
        $label = '????';
    }

    # don't report if perfectly tagged seleno, unless -seleno option
    if ($seleno || $flag_remark3 == 1) {
        printf "%-24s %-24s %18s %2d %12s %4s %2d %s\n",
          $gene->gene_info->name->name, $trans->transcript_info->name,
          $trans->stable_id, $trans->version, $trans_class, $label, $nstop,
          $ttstop;

        print "$out$out2\n" if $remarks;
    }
    return $sql;
}

### Also in gene_stats - should be in a module
sub select_CloneSequence_contig {
    my ($ss, $start_acc, $end_acc) = @_;

    my $ctg       = [];
    my $in_contig = 0;
    my $cs_list   = $ss->CloneSequence_list;
    foreach my $cs (@$cs_list) {
        my $acc = $cs->accession;
        if ($acc eq $start_acc) {
            $in_contig = 1;
        }
        if ($in_contig) {
            push(@$ctg, $cs);
        }
        if ($acc eq $end_acc) {
            if ($in_contig) {
                $in_contig = 0;
            }
            else {
                die "Found end '$end_acc' but not start '$start_acc'\n";
            }
        }
    }
    if (@$ctg == 0) {
        die "Failed to find start '$start_acc'\n";
    }
    elsif ($in_contig) {
        die "Failed to find end '$end_acc'\n";
    }

    $ss->selected_CloneSequences($ctg);

    return;
}

__END__

=head1 NAME - check_translations_for_stops

=head1 SYNOPSIS

  ./check_translations_for_stops -dataset <NAME>

=head1 DESCRIPTION

Checks all the translations of the genes in an
otter database, printing a report to STDOUT of
those that have internal stop codons.

=head1 FLAGS

=over 4

=item -remarks

Reports remark records for any transcript containing stops

=item -selenocysteine

Reports transcripts containing stops labelled as such in remarks
(skipped by default)

=back

=head1 AUTHOR

Ana Code B<email> anacode@sanger.ac.uk

