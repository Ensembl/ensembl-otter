#!/usr/bin/env perl
# Copyright [2018] EMBL-European Bioinformatics Institute
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


use warnings;


use strict;

use Bio::Vega::Transform::XMLToRegion;
use Bio::Vega::DBSQL::DBAdaptor;
use Bio::EnsEMBL::Slice;
use Bio::Otter::Lace::Defaults;


my ($dataset_name, $xmlfile, $input_dir);

Bio::Otter::Lace::Defaults::do_getopt(
    'ds|dataset=s'  => \$dataset_name,
    'indir=s'       => \$input_dir,
    ) ;


if ( !defined $dataset_name || ! $input_dir){
  Bio::Otter::Lace::Defaults::show_help();
}

my $parser;

foreach my $file ( `ls $input_dir` ) {
  chomp $file;
  next unless $file =~ /.xml$/;
  if ( -s $file == 0 ){
    warn "Skip $file: no features\n";
    next;
  }
  $file =~ /(.*)\.xml/;

  my $xmlfile = "$input_dir/$file";

  warn "Parsing $xmlfile\n";


  ##create an XML parser
  $parser = Bio::Vega::Transform::XMLToRegion->new;
  die 'Broken by refactoring of Bio::Vega::Transfrom::XMLToRegion on 2015-03-18: needs CoordSystemFactory.';
  my $region = $parser->parsefile($xmlfile);

  my $cl = Bio::Otter::Lace::Defaults::make_Client();
  my $ds = $cl->get_DataSet_by_name($dataset_name);
  my $db = $ds->make_Vega_DBAdaptor;
  my $sa = $db->get_SliceAdaptor();

  warn "\nConnecting to host:".$db->dbc->host." port:".$db->dbc->port." database:".$db->dbc->dbname." as user:".$db->dbc->username;

  my $aname=$cl->author();
  my $aemail=$cl->email();
  my $clauthor;
  if ( defined $aname && defined $aemail) {
    $clauthor=Bio::Vega::Author->new;
    $clauthor->email($aemail);
    $clauthor->name($aname);
  }

  ##Let begin a transaction and do all the database changes within a transaction
  $db->begin_work();

  if( eval{
    # Load SimpleFeatures in xml

    my $chr_slice=$region->slice;

    my $new_slice = $sa->fetch_by_name($chr_slice->name);

    my @simple_features = $region->seq_features;
    my $sfa=$db->get_SimpleFeatureAdaptor;

    foreach my $new_feat (@simple_features) {

      $new_feat->slice($new_slice);
      eval { $sfa->store($new_feat); 1; }
            or die "problem with loading of simplefeatures\n$@\n";
    }

        1;
      }) {


  $db->commit;
  print STDOUT "\nCommitted all session data from XML in database\n";
  }
  else {
    print STDERR "\nError saving genes from file: Rolled back all data of this session - Please correct errors\n".$@;
    $db->rollback;
  }
}

$parser->DESTROY;
warn "\nParser now out of scope\n";

1;

=head1 AUTHOR

Ana Code B<email> anacode@sanger.ac.uk

=head1 DESCRIPTION

load_vega_xml -dataset loutre_'species' -indir input_dir_of_XML_files

=cut
