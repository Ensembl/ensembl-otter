#!/usr/bin/env perl
# Copyright [2018-2019] EMBL-European Bioinformatics Institute
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


use warnings;


use lib '/Users/jgrg/work/ensembl-head/modules';

### loutre_gene_edit_stats

use strict;
use Bio::Otter::Lace::Defaults;
use Bio::Vega::DBSQL::DBAdaptor;


my $dataset_name = 'ns_human';

{
    my $source_name = 'havana';

    my $usage = sub { exec('perldoc', $0) };
    # This do_getopt() call is needed to parse the otter config files
    # even if you aren't giving any arguments on the command line.
    Bio::Otter::Lace::Defaults::do_getopt(
        'h|help!'       => $usage,
        'dataset=s'     => \$dataset_name,
        'source=s'      => \$source_name,
        ) or $usage->();
    $usage->() unless $dataset_name;
    
    # Client communicates with otter HTTP server
    my $cl = Bio::Otter::Lace::Defaults::make_Client();
    
    # DataSet interacts directly with an otter database
    my $ds = $cl->get_DataSet_by_name($dataset_name);

    my $otter_dba = $ds->get_cached_DBAdaptor->dbc;
    
    do_gene_counts($otter_dba, $source_name);
    do_transcript_counts($otter_dba, $source_name);
}

sub do_transcript_counts {
    my ($otter_dba, $source_name) = @_;
    
    my $count_transcripts = $otter_dba->prepare(q{
        SELECT count(*)
        FROM transcript t
          , gene g
        WHERE t.gene_id = g.gene_id
          AND g.is_current = 1
          AND g.biotype != 'obsolete'
          AND g.source = ?
        });
    
    # List transcripts in order of modification
    my $list_transcripts = $otter_dba->prepare(q{
        SELECT s.stable_id
          , s.version
          , DATE_FORMAT(s.modified_date, "%Y-%m")
          , g.is_current
          , g.biotype
        FROM transcript t
          , gene g
          , transcript_stable_id s
        WHERE g.gene_id = t.gene_id
          AND t.transcript_id = s.transcript_id
          AND g.source = ?
        ORDER BY s.modified_date ASC
        });
    
    do_counts('transcript', $otter_dba, $source_name, $count_transcripts, $list_transcripts);

    return;
}

sub do_gene_counts {
    my ($otter_dba, $source_name) = @_;
    
    my $count_genes = $otter_dba->prepare(q{
        SELECT count(*)
        FROM gene
        WHERE is_current = 1
          AND biotype != 'obsolete'
          AND source = ?
        });
    
    my $list_genes = $otter_dba->prepare(q{
        SELECT s.stable_id
          , s.version
          , DATE_FORMAT(s.modified_date, "%Y-%m")
          , g.is_current
          , g.biotype
        FROM gene g
          , gene_stable_id s
        WHERE g.gene_id = s.gene_id
          AND g.source = ?
        ORDER BY s.modified_date ASC
        });
    
    do_counts('gene', $otter_dba, $source_name, $count_genes, $list_genes);

    return;
}

sub do_counts {
    my ($object, $otter_dba, $source_name, $get_total, $list_sth) = @_;
    
    print "loutre $object counts for $source_name genes in $dataset_name\n",
        "Month\tNew\tModified\tDeleted\n";

    $get_total->execute($source_name);
    my ($total_current) = $get_total->fetchrow;
    
    # So we can tell when we get the latest version of a object if it is deleted
    my $get_max = $otter_dba->prepare(qq{
        SELECT stable_id
          , MAX(version)
        FROM ${object}_stable_id
        GROUP BY stable_id
        });
    $get_max->execute;
    my %stable_max;
    while (my ($stable, $max) = $get_max->fetchrow) {
        $stable_max{$stable} = $max;
    }
    
    $list_sth->execute($source_name);

    my (%seen_stable, %seen_mod, %new_this_month);
    my $last_month = "";
    my ($new, $mod, $del) = (0,0,0);
    my $total_objects = 0;
    while (my ($stable, $version, $mod_month, $is_current, $biotype) = $list_sth->fetchrow) {

        # Print report for last month, and zero variables, when we reach a new month
        if ($mod_month ne $last_month) {
            if ($last_month) {
                print join("\t", $last_month, $new, $mod - $del, $del), "\n";
                $total_objects += $new;
                ($new, $mod, $del) = (0,0,0);
                %seen_mod = ();
                %new_this_month = ();
            }
            $last_month = $mod_month;
        }

        if ($seen_stable{$stable}) {
            # Don't count same object modfied in same month more than once
            unless ($seen_mod{$stable}) {
                $mod++;
                $seen_mod{$stable} = 1;
            }
        } else {
            # Skip deleted objects from another source
            next if $biotype eq 'obsolete';
            $seen_stable{$stable} = 1;
            $new++;
            $new_this_month{$stable} = 1;
        }
        
        # Is the object version the latest one?
        if ($version == $stable_max{$stable}) {
            if ($is_current == 0) {
                # Latest, but not current, means it is deleted
                $del++;
                #$new-- if $new_this_month{$stable};
            }
        }
    }
    # Print last month left in queue
    print join("\t", $last_month, $new, $mod - $del, $del), "\n";
    $total_objects += $new;

    print "Total ${object}s\t$total_objects\n",
        "Current ${object}s\t$total_current\n\n";

    return;
}




__END__

=head1 NAME - loutre_gene_edit_stats

=head1 AUTHOR

Ana Code B<email> anacode@sanger.ac.uk

