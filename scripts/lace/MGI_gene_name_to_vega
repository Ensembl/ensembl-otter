#!/usr/bin/env perl
# Copyright [2018] EMBL-European Bioinformatics Institute
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


use warnings;


use strict;
use Bio::Otter::Lace::Defaults;
use Bio::Vega::DBSQL::DBAdaptor;
use Hum::Chromoview::Utils qw(unixtime2YYYYMMDD);

my %updated_gsid;
my ($scriptdir) = $0 =~ m{^(.+)/[^/]+$};
my $duplicate_file = "/var/tmp/ids_to_skip.".$$;
my @GENE_NAMEs;


#----------------- IMPORTANT ------------------------------------------------------------------------------------------
# run this script in test mode which is default
# (1) grep "also used for" in the output file -> send those to annotator to fix problem in db first before live update
# (2) check the output file "MGI_2_multiple_vega_ids.ori" -> annotator to check, remove the bad id in list
#      and rename that file as "MGI_2_multiple_vega_ids.rev"
#-----------------------------------------------------------------------------------------------------------------------

{
  my $dataset_name = 'mouse'; # this script is tailored to mouse anyway
  my $test = 1; # default is doing test
  my $has_duplicates = 0;

  Bio::Otter::Lace::Defaults::do_getopt(
                                        'test!'        => \$test,
                                        'name=s@'      => \@GENE_NAMEs,    # useful to update only certain names
                                        'duplicates'   => \$has_duplicates # need to have 2 files prepared before hand
                                                                           # as in (2) above
                                                                           # see script filter_vega_ids
                                       );
  Bio::Otter::Lace::Defaults::show_help() unless $dataset_name;

  my $cl         = Bio::Otter::Lace::Defaults::make_Client();
  my $ds         = $cl->get_DataSet_by_name($dataset_name);
  my $loutre_dba = $ds->make_Vega_DBAdaptor;
  my $geneAd     = $loutre_dba->get_GeneAdaptor;

  print STDERR my $msg = $test ? "\nTEST mode update...\n\n" : "\nLIVE mode update....\n\n";

  my ($mgi_data, $mgiSymbol_2_vegaIDs) = parse_mgi_input($loutre_dba, $geneAd, $test);

  $loutre_dba->begin_work;
  eval{
    update_loutre($loutre_dba, $mgi_data, $test, $mgiSymbol_2_vegaIDs, $has_duplicates);
  };
  if ($@) {
    $loutre_dba->rollback;
    die $@, "\nNo changes saved to otter db\n";
  } else {
    $loutre_dba->commit;
  }

  #remove temp file for duplicates
  unlink $duplicate_file or warn "Failed to remove $duplicate_file";
}

#--------------------------------
#         subroutines
#--------------------------------

sub parse_mgi_input {

    my ($loutre_dba, $geneAd, $test) = @_;
    my @field_names = qw{ mgi_id locus_symbol locus_description score chromosome vega_id };
    # my @field_names = qw{ vega_id locus_symbol mgi_id old_locus_symbol locus_description };

    my %nameSet;
    if ( @GENE_NAMEs ){
        %nameSet = map {($_,1)} @GENE_NAMEs;
    }

    my $mgi_data = [];
    my $mgiSymbol_2_vegaIDs = {}; # for checking symbols linked to multiple VEGA ids
    # as there were quite a few in MGI data

    # bad vega ids (obsolte or source is not 'havana') are filtered
    while (<>) {
        next if /^$/;       # Blank lines
        next if /^\s*#/;    # Comment lines
        chomp;

        my @fields = split /\t/, $_; # Fields should be tab separated
        my $original_line = $_;

        # There's something wrong with the line if we
        # don't have the right number of fields.
        unless (@fields == @field_names) {
            die 'Bad line: ', fmt_list(@fields);
        }

        my $parsed_line = {};
        for (my $i = 0 ; $i < @field_names ; $i++) {
            my $field_name = $field_names[$i];
            my $data = $fields[$i];
            $data =~ s/(^\s+)|(\s+$)//g; # Trim leading and trailing whitespace
            unless ($data) {
                die 'Bad data element: ', fmt_list(@fields);
            }
            next if $data eq 'NULL';

            $parsed_line->{$field_name} = $data;
        }

        my $vega_id_from_mgi = $parsed_line->{'vega_id'};
        my $mgi_symbol       = $parsed_line->{'locus_symbol'};

        # does only gene_names specifed
        if ( keys %nameSet ){
            next unless $nameSet{$mgi_symbol};
        }

        my $curr_gene = $geneAd->fetch_by_stable_id($vega_id_from_mgi);

        unless ( $curr_gene ){
            print STDERR "ERROR: $vega_id_from_mgi is NOT in current database\n";
            next;
        }

        my $source = $curr_gene->source;
        # double check that MGI update only contains genes which source is 'havana/WU'
        if ( $source ne 'havana' and $source ne 'WU'){
            print STDERR "SKIP: $vega_id_from_mgi source is $source\n";
            next;
        }

        # currently, lots of MGI names are still bad names!
        next unless check_for_good_symbols($mgi_symbol);

        # check this in the test mode and send it to annotator
        # before doing Live update
        check_MGI_symbol_is_unique_in_loutre($loutre_dba, $mgi_symbol, $curr_gene) if $test;

        push(@{$mgiSymbol_2_vegaIDs->{$mgi_symbol}}, $vega_id_from_mgi);

        $parsed_line->{'original_line'} = $original_line;
        push(@$mgi_data, $parsed_line);
    }

    print STDERR "\n-------------------  END OF PARSING  -----------------------\n\n";

    # checking symbols linked to multiple VEGA id

    my $duplcate_list;
    my $fh;

    if ( keys %$mgiSymbol_2_vegaIDs > 0 ){
        $duplcate_list = "MGI_2_multiple_vega_ids.ori";
        open($fh, '>', $duplcate_list) or die $!;
    }
    foreach my $symbol ( keys %$mgiSymbol_2_vegaIDs ){
        if ( @{$mgiSymbol_2_vegaIDs->{$symbol}} > 1 ){

            my $dups = sprintf("%s\t%s\t%s\n", 'MGI_2_MULTILE_IDs', $symbol,
            join("\t", @{$mgiSymbol_2_vegaIDs->{$symbol}})
            );

            print $fh $dups; # the annotators need to revise this list, ie, pick the right ID for update
            print STDERR $dups;
        }
    }

    return ($mgi_data, $mgiSymbol_2_vegaIDs);
}

sub check_MGI_symbol_is_unique_in_loutre {
  my ($loutre_dba, $mgi_symbol, $curr_gene) = @_;

  my $seq_region_name = $curr_gene->slice->seq_region_name;
  my $curr_gsid = $curr_gene->stable_id;

  print STDERR "DUP_SYMBOL_CHK for MGI $mgi_symbol ($curr_gsid) --- ";

  my $dup = $loutre_dba->dbc->prepare(qq{
    SELECT gsi.stable_id
      , sr.name
    FROM gene_stable_id gsi
      , gene g
      , gene_attrib ga
      , attrib_type at
      , seq_region sr
    WHERE sr.seq_region_id = g.seq_region_id
      AND g.gene_id = gsi.gene_id
      AND g.gene_id = ga.gene_id
      AND ga.attrib_type_id = at.attrib_type_id
      AND g.is_current = 1
      AND at.code = 'name'
      AND ga.value = ?
      });
  $dup->execute($mgi_symbol);

  if ( $dup->rows != 0 ){
    my $failed = 0;
    while(my ($gsid, $seqRname)= $dup->fetchrow){
      if ( $gsid ne $curr_gsid and $seqRname eq $seq_region_name ){
        $failed = 1;
        print STDERR "also used for $gsid in loutre db\n";
      }
    }
    print STDERR "PASSED\n" unless $failed;
  }
  else {
    print STDERR "PASSED\n";
  }

  return;
}

sub check_for_good_symbols {
  my ($mgi_symbol) = @_;

  # symbols considered OK
  my @ok_symbols = qw(P140 C9 T F2 H13 H19 H47 F10 F7 F8 F9 Fcgbp);
  my %ok_syms = map {($_, 1)} @ok_symbols;

  # skip these for now
  my @skip_list = qw(Tcra-V8);
  my %ok_skip = map {($_, 1)} @skip_list;

  if ( $ok_syms{$mgi_symbol} ){
    print STDERR "cat-1: SYMBOL_OK\n";
    return 1;
  }
  elsif ( $ok_skip{$mgi_symbol} ){
    print STDERR "cat-2: SYMBOL_SKIP\n";
    return 0;
  }

  # Ignore these symbols:
  #   clone based names - starting with two capital letters
  #   names that are Gene models - starting with Gm
  #   riken based names - end with Rik

  elsif ( $mgi_symbol =~ /^Gm|Rik$|OTTMUS|^[A-Z]{2,}/ ) {
    print STDERR "cat-3: SYMBOL_BAD\n";
    return 0;
  }

  # hand-check first letter is capital and followed by digits only
  # or single capital letter only
  #elsif ( $mgi_symbol =~ /^[A-Z]{1,1}\d+$/ || $mgi_symbol =~ /^[A-Z]{1,1}$/ ) {
  elsif ( $mgi_symbol =~ /^[A-Z]{1,1}\d*$/ ){
    print STDERR "cat-4: SYMBOL_BAD\n";
    return 0;
  }

  # want first letter is capital and do not have internal capital letter(s)
  elsif ( $mgi_symbol =~ /^[A-Z]{1,1}\w+/ and $mgi_symbol !~ /^.+[A-Z]/ ) {
    print STDERR "cat-5: SYMBOL_OK\n";
    return 1;
  }

  # ignore internal captital letter(s)
  elsif ( $mgi_symbol =~ /^.+[A-Z]/) {
    print STDERR "cat-6: SYMBOL_BAD\n";
    return 0;
  }

  # ignore pure digits
  elsif ($mgi_symbol =~ /^\d+$/ ) {
    print STDERR "cat-7: SYMBOL_BAD\n";
    return 0;
  }

  # the rest is also bad
  else {
    print STDERR "cat-8: SYMBOL_BAD\n";
    return 0;
  }
}

sub update_loutre {
  my ($loutre_dba, $mgi_data, $test, $mgiSymbol_2_vegaIDs, $has_duplicates) = @_;

  print STDERR "\n---------------- BEGINNING NAME/DESC UPDATE-----------------\n\n";

  my $geneAd  = $loutre_dba->get_GeneAdaptor;

  my @ids_to_skip;
  if ( $has_duplicates ){
    system("$scriptdir/filter_vega_ids", $duplicate_file);
    open(my $fh, '<', $duplicate_file) or die $!;
    my $ids = <$fh>;
    @ids_to_skip = split('\s', $ids);
  }

  foreach my $mgi (@$mgi_data) {

    my $mgi_symbol = $mgi->{'locus_symbol'};
    my $gene_SID   = $mgi->{'vega_id'};

    print STDERR "UPDATING with MGI data: $gene_SID ($mgi_symbol) ...";

    if ( @ids_to_skip and grep({/$gene_SID/} @ids_to_skip) ) {
      print STDERR "SKIP DUPLICATE $gene_SID - another gene is already linked to $mgi_symbol\n";
      next;
    }

    my $mgi_id     = $mgi->{'mgi_id'};
    my $mgi_desc   = $mgi->{'locus_description'};
    my $mgi_chr    = $mgi->{'chromosome'};

    my $curr_gene = $geneAd->fetch_by_stable_id($gene_SID);

    my $last_modified_date = unixtime2YYYYMMDD($curr_gene->modified_date);

    # double check MGI VEGA chr
    $curr_gene->slice->seq_region_name =~ /^chr(\w+)-/;
    my $chr = $1;
    if ( $mgi_chr and $chr ne $mgi_chr ){
      print STDERR "ERROR: chromosome diff: $chr (V) vs $mgi_chr (M)\n";
      next;
    }

    my $curr_gene_name  = $curr_gene->get_all_Attributes('name')->[0]->value;

    if ( $curr_gene_name ne $mgi_symbol ){
      print STDERR "\nCHECKING: $gene_SID $curr_gene_name (V) $mgi_symbol (M)\n";
      update_gene_name_and_description($chr, $loutre_dba, $geneAd, $curr_gene, $curr_gene_name, $mgi_id, $mgi_symbol, $mgi_desc, $test);
    }
    else {
      print STDERR " already up-to-date\n";
    }
  }

  return;
}

sub fmt_list { ## no critic (Subroutines::RequireArgUnpacking)
    return join(', ', map { "'$_'" } @_);
}

sub update_gene_name_and_description {

  my ( $chr, $loutre_dba, $geneAd, $gene, $vega_name, $mgi_id, $mgi_symbol, $mgi_desc, $test) = @_;

  #----------------------------------------------------------------------
  # find all current genes with prefix:$vega_name and from its haplotype
  #----------------------------------------------------------------------

  my $gids = find_genes_with_gene_names_from_prefixed_names_and_haplotype($loutre_dba, $vega_name, $chr);

  if ( ! $gids->[0] ){
    print STDERR "NO matching gene_name found via prefixed_names and haplotypes by $vega_name\n";
    store_update($loutre_dba, $geneAd, $gene, $mgi_symbol, $mgi_desc, $mgi_id, $test);
    print STDERR "\n";
  }
  else {
    my $num = @$gids;

    my $search_name = $vega_name;
    if ( $vega_name =~ /:(\w+)/ ){
      $search_name = $1;
    }
    print STDERR "MULTIPLE OCCURRENCE for $search_name: $num [@$gids]\n" if $num > 1;

    foreach my $gene_id ( @$gids ){

      my $curr_gene  = $geneAd->fetch_by_dbID($gene_id);
      my $gsid       = $curr_gene->stable_id;

      # reason see store_gene() below
      if ( $updated_gsid{$gsid} ){
        print STDERR "SKIP $gsid ($gene_id): already updated\n";
        next;
      }
      store_update($loutre_dba, $geneAd, $curr_gene, $mgi_symbol, $mgi_desc, $mgi_id, $test);
    }
    print STDERR "\n";
  }

  return;
}

sub find_genes_with_gene_names_from_prefixed_names_and_haplotype {
  my ($loutre_dba, $vega_name, $chr) = @_;

  my $search_name = $vega_name;
  if ( $vega_name =~ /\w+:(\w+)/ ){
    $search_name = $1;
  }
  warn "SEARCHING for gene_names via prefixed_names and haplotype by $search_name\n";

  my $mapping = get_expected_haplotype_from_chr($chr);

  my $sql = qq{SELECT sr.name, g.gene_id, gsi.stable_id, g.source
               FROM gene_attrib ga, gene_stable_id gsi, gene g, seq_region sr, attrib_type at
               WHERE sr.seq_region_id=g.seq_region_id
               AND g.gene_id=ga.gene_id
               AND g.gene_id=gsi.gene_id
               AND ga.attrib_type_id=at.attrib_type_id
               AND at.code='name'
               AND g.is_current = 1
             };

  my $prefix_match = qq{ AND ga.value like "%:$search_name"}; # look for prefixed gene names
  my $name_match   = qq{ AND ga.value = "$search_name"};      # look for identical gene names

  my $qryA = $loutre_dba->dbc->prepare($sql.$name_match);
  my $qryB = $loutre_dba->dbc->prepare($sql.$prefix_match);

  my $gids = get_gids($qryA, $qryB, $chr, $vega_name, $mapping);
  return $gids;
}

sub get_gids {
  my ($qryA, $qryB, $chr, $vega_name, $mapping) = @_;

  my $gids = [];
  foreach my $qry ($qryA, $qryB) {
    $qry->execute;

    while ( my ( $seq_region_name, $gid, $gsid, $source ) = $qry->fetchrow ){
      # prefix can only be KO or WU for now
      if ( $source !~ /KO|WU|havana/ ){
        print STDERR "ERROR: FOUND unexpected $gsid in $seq_region_name, gid: $gid, source: $source\n";
        next;
      }
      if ( $mapping->[0] and $seq_region_name !~ /^chr/i  ){
        push(@$gids, $gid) if find_from_expected_haplotype($chr, $seq_region_name, $vega_name, $mapping, $gsid, $gid, $source);
      }
      else {
        print STDERR "FOUND $gsid (gene_id: $gid, source: $source) in ASSEMBLY $seq_region_name\n";
        push(@$gids, $gid);
      }
    }
  }
  return $gids;
}
sub find_from_expected_haplotype {

  my ($chr, $seq_region_name, $vega_name, $mapping, $gsid, $gid, $source) = @_;

  warn "SEARCHING for HAPLOTYPE(s) in ", join(', ', @$mapping), "\n";
  my $match;
  foreach ( @$mapping ) {
    #warn "$_ vs $seq_region --------\n";
    if ( index($seq_region_name, $_) == 0 ){
      $match = 1;
      print STDERR "FOUND $gsid (gene_id: $gid, source: $source) in HAPLOTYPE $seq_region_name\n";
    }
  }
  if ( $match ){
    return 1;
  }
  else {
    print STDERR "ERROR: $seq_region_name as haplotype unexpected for VEGA symbol $vega_name, source: $source\n";
    return 0;
  }
}

sub store_update {

  my ($loutre_dba, $geneAd, $gene, $mgi_symbol, $mgi_desc, $mgi_id, $test) = @_;

  my $name_attr  = $gene->get_all_Attributes('name')->[0];
  my $curr_name  = $name_attr->value;
  my $curr_desc  = $gene->description || 'NA';
  my $curr_stable_id = $gene->stable_id;
  my $source     = $gene->source;
  my $status     = $gene->status;
  my $biotype    = $gene->biotype;
  my $assembly   = $gene->slice->seq_region_name;
  my $prefixed_mgi_symbol = $source . ":" . $mgi_symbol;
  my $need_update = 0;

  if ( $source =~ /KO|WU/  ){
    if ( $curr_name ne $prefixed_mgi_symbol ){
      $need_update = 1;
      $name_attr->value($prefixed_mgi_symbol);  # also update WashU and KO genes
      print STDERR "NAME CHANGE from $curr_name ($curr_stable_id) to $prefixed_mgi_symbol ($biotype : $status) (non-havana)\n";
    }
    else {
      print STDERR "NAME UP-TO-DATE: $source gene: $curr_name ($curr_stable_id)\n";
    }
  }
  else {
    $need_update = 1;
    $name_attr->value($mgi_symbol);
    print STDERR "NAME CHANGE from $curr_name ($curr_stable_id) to $mgi_symbol => $assembly\n";
  }

  if ( $mgi_desc and $mgi_desc ne $curr_desc ){
    $need_update = 1;
    $gene->description($mgi_desc);
    print STDERR "DESC CHANGE from '$curr_desc' to '$mgi_desc' => $assembly\n";
  }
  else {
    print STDERR "DESC UP-TO-DATE: $source gene: $curr_name ($curr_stable_id)\n";
  }

  if ($need_update){
    # see subroutine for rules applied to status change
    $gene = change_gene_trans_status($loutre_dba, $geneAd, $gene);

    # store gene if not already locked on contig
    store_gene($loutre_dba, $geneAd, $gene, $mgi_id, $curr_name) unless $test;
    print STDERR "\n";
  }

  return;
}


sub change_gene_trans_status {
  my ( $loutre_dba, $geneAd, $curr_gene ) = @_;

  my $g_biotype = $curr_gene->biotype;
  my $g_status  = $curr_gene->status;

  # Change status to KNOWN if it is not a pseudogene (or is a polymorphic_pseudogene)
  if (($g_biotype !~ /pseudo/i or $g_biotype =~ /polymorphic/i) and $g_status ne 'KNOWN') {
    print STDERR "GENE TYPE CHANGE from $g_status to KNOWN\n";
    $curr_gene->status('KNOWN');
  } else {
    print STDERR "GENE STATUS OK: $g_status\n";
  }

  return $curr_gene;
}

sub store_gene {

  my ($loutre_dba, $geneAd, $gene, $mgi_id, $old_name) = @_;

  my $gsid         = $gene->stable_id;
  my $curr_gene_id = $gene->dbID;

  # check lock before saving
  # use project as some genes span multiple clones
  if ( my $contig_lock = check_contig_lock($loutre_dba, $gene) ) {
    print STDERR "LOCK: $gsid is locked on @$contig_lock\n";
  }
  else {

    warn "storing gene......";
    $geneAd->store($gene);
    my $new_gene_id = $gene->dbID;

    printf STDERR ("Storing %s ==> Old dbID: %d New dbID: %d\n", $gsid, $curr_gene_id, $new_gene_id);

    my $sql = qq{ INSERT INTO gene_name_update VALUES(?,?,?, now()) };
    my $update = $loutre_dba->dbc->prepare($sql);
    $update->execute($new_gene_id, $mgi_id, $old_name);

    # --------------------------------------- IMPORTANT -----------------------------------------------------------
    # Needs to record updated gsid to make sure no second update will be done with it
    # as gene_name is used to find those in haplotype and prefixed genes
    # ie, this avoids, eg,

    # MGI:96015	Hba-a1	hemoglobin alpha, adult chain 1	16.0	11	OTTMUSG00000005377 (old name is Hba-a2)
    # MGI:96016	Hba-a2	hemoglobin alpha, adult chain 2	16.0	11	OTTMUSG00000005376 (old name is Hba-a1)

    # As when the old Hba-a2 of OTTMUSG00000005377 is first changed to Hba-a1,
    # it comes to updating Hba-a1 of OTTMUSG00000005376.
    # Here, Hba-a1 is used to find all genes in haplotype and gene_names with
    #  "prefix:Hba-a1", which we also need to update.
    # So without excluding updated gsids, this will pick up Hba-a1 of OTTMUSG00000005377 and changes back to Hba-a2

    $updated_gsid{$gsid}++;
    #---------------------------------------------------------------------------------------------------------------
  }

  return;
}

sub get_expected_haplotype_from_chr {

  my $chr = shift;

  my $map = {1  => [qw(NOD_IDD5.1 CHORI29_IDD5.1_test NOD_IDD5.3 NOD_IDD5.4)],
             3  => [qw(129_IDD3 NOD_IDD3 NOD_IDD10 NOD_IDD18)],
             4  => [qw(129_MUP B6_MUP NOD_IDD9)],
             5  => [qw(chr5_steel)],
             6  => [qw(chr6_steel CHO_IDD6)],
             11 => [qw(CHO_IDD4 NOD_IDD4)],
             17 => [qw(CHO_IDD16)]
            };

  return $map->{$chr};
}

sub check_contig_lock {
  my ($loutre_dba, $gene) = @_;

  my $lock = $loutre_dba->dbc->prepare(qq{
                               SELECT contig_lock_id
                               FROM contig_lock cl, seq_region sr
                               WHERE sr.name= ?
                               AND cl.seq_region_id=sr.seq_region_id
                             });

  my $locked_contigs;
  foreach my $p ( @{$gene->project('contig')}) {
    my $ctgname = $p->[2]->seq_region_name;
    $lock->execute( $ctgname );
    push(@$locked_contigs, $ctgname) if $lock->fetchrow;
  }

  return $locked_contigs;
}

__END__

=head1 NAME - MGI_gene_name_to_vega

=head1 AUTHOR

Ana Code B<email> anacode@sanger.ac.uk

