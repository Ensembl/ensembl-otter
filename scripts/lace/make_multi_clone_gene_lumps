#!/usr/bin/env perl
# Copyright [2018] EMBL-European Bioinformatics Institute
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


use warnings;


### make_multi_clone_gene_lumps

use strict;
use Bio::Otter::Lace::Defaults;

{
    my $dataset_name = 'zebrafish';
    my $intra_set_gap = 10_000;
    my $inter_set_gap = 200_000;
    Bio::Otter::Lace::Defaults::do_getopt(
        'dataset=s' => \$dataset_name,
        'intra=i'   => \$intra_set_gap,
        'inter=i'   => \$inter_set_gap,
        );
    my $cl = Bio::Otter::Lace::Defaults::make_Client();
    my $ds = $cl->get_DataSet_by_name($dataset_name);
    my $ens_db = $ds->get_cached_DBAdaptor;
    
    my $sth = $ens_db->prepare(q{
        SELECT g.gene_id
          , c.embl_acc
          , c.embl_version
          , ctg.length
        FROM gene g
          , transcript t
          , exon_transcript et
          , exon e
          , contig ctg
          , clone c
        WHERE g.gene_id = t.gene_id
          AND t.transcript_id = et.transcript_id
          AND et.exon_id = e.exon_id
          AND e.contig_id = ctg.contig_id
          AND ctg.clone_id = c.clone_id
        GROUP BY g.gene_id
          , c.clone_id
        });
    $sth->execute;
    
    my( %acc_sv_length, %gene2acc_sv );
    while (my ($gene_id, $acc, $sv, $length) = $sth->fetchrow) {
        my $list = $gene2acc_sv{$gene_id} ||= [];
        my $acc_sv = "$acc.$sv";
        $acc_sv_length{$acc_sv} = $length;
        push(@$list, $acc_sv);
    }
    
    my $get_gene_name = $ens_db->prepare(q{
        SELECT n.name
        FROM gene g
          , gene_stable_id gsid
          , current_gene_info c
          , gene_name n
        WHERE g.gene_id = gsid.gene_id
          AND gsid.stable_id = c.gene_stable_id
          AND c.gene_info_id = n.gene_info_id
          AND g.gene_id = ?
        });
    
    
    my( %acc_sv2pool, @all_pools );
    while (my ($id, $accs) = each %gene2acc_sv) {
        if (@$accs > 1) {
            my( %pool_pool );
            foreach my $acc_sv (@$accs) {
                my $pool = $acc_sv2pool{$acc_sv} or next;
                $pool_pool{$pool} = $pool;
            }
            my @existing = values %pool_pool;
            my( $pool );
            if (@existing) {
                $pool = merge_pools(@existing);
            } else {
                $pool = {
                    'acc_sv'    => {},
                    'gene_id'   => [],
                    };
                push(@all_pools, $pool);
            }
            push(@{$pool->{'gene_id'}}, $id);
            foreach my $acc_sv (@$accs) {
                # Keep a count of how many shared genes are in this clone
                $pool->{'acc_sv'}{$acc_sv}++;
                
                $acc_sv2pool{$acc_sv} = $pool;
            }
        } else {
            delete($gene2acc_sv{$id});
        }
    }
    
    # Remove the pools that have been merged with others
    for (my $i = 0; $i < @all_pools;) {
        if ($all_pools[$i]->{'is_dead'}) {
            splice(@all_pools, $i, 1);
        } else {
            $i++;
        }
    }
    
    my $chr_pos = 0;
    my $row = 0;
    foreach my $pool (@all_pools) {
        my $genes = $pool->{'gene_id'};
        my $accs  = $pool->{'acc_sv'};
        my( @gene_name );
        foreach my $id (@$genes) {
            $get_gene_name->execute($id);
            my ($name) = $get_gene_name->fetchrow;
            push(@gene_name, $name);
        }
        @gene_name = sort @gene_name;
        print "# GENES: @gene_name\n";
        my $gap_size = 0;
        foreach my $acc_sv (sort keys %$accs) {
            if ($gap_size) {
                my $chr_start = $chr_pos + 1;
                $chr_pos += $gap_size;
                print join("\t",
                    'chrUNK', $chr_start, $chr_pos, ++$row, 'N', $gap_size,
                    ), "\n";
            }
        
            my $length = $acc_sv_length{$acc_sv};
            my $count = $accs->{$acc_sv};
            my $chr_start = $chr_pos + 1;
            $chr_pos += $length;
            print join("\t",
                'chrUNK', $chr_start, $chr_pos, ++$row, 'F', $acc_sv, 1, $length, '+',
                ), "\n";
            $gap_size = $intra_set_gap;
        }
        $gap_size = $inter_set_gap;
        my $chr_start = $chr_pos + 1;
        $chr_pos += $gap_size;
        print join("\t",
            'chrUNK', $chr_start, $chr_pos, ++$row, 'N', $gap_size,
            ), "\n";
    }
    
    $get_gene_name->finish;
}

sub merge_pools {
    my( $primary, @others ) = @_;
    
    my $gene_list = $primary->{'gene_id'};
    my $acc_hash  = $primary->{'acc_sv'};
    
    foreach my $pool (@others) {
        $pool->{'is_dead'} = 1;
        push(@$gene_list, @{$pool->{'gene_id'}});
        while (my ($acc_sv, $count) = each %{$pool->{'acc_sv'}}) {
            $acc_hash->{$acc_sv} += $count;
        }
    }
    
    return $primary;
}


__END__

=head1 NAME - make_multi_clone_gene_lumps

=head1 SYNOPSIS

  make_multi_clone_gene_lumps -dataset <DATASET_NAME>

=head1 DESCRIPTION

Outputs an AGP with clones containing common
genes separated by 10,000bp.  This allows them to
be opened in a single contig, and the genes
edited, because it avoids any of the genes being
marked as truncated, and hence locked. 


=head1 AUTHOR

Ana Code B<email> anacode@sanger.ac.uk

