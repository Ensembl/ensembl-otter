#!/usr/bin/env perl
# Copyright [2018-2022] EMBL-European Bioinformatics Institute
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


use warnings;


### get_peptides

use strict;
use Bio::Otter::Lace::Defaults;
use Bio::SeqIO;


{
    my( $dataset_name, $set_name, $locus_skip_file, $gene_type, $file_name );
    my $keep_stops = 1;

    my $usage = sub { exec('perldoc', $0) };
    Bio::Otter::Lace::Defaults::do_getopt(
        'h|help!'           => $usage,
        'dataset=s'         => \$dataset_name,
        'set|chr=s'         => \$set_name,
        'file=s'            => \$file_name,
        'stops!'            => \$keep_stops,
        'skip=s'            => \$locus_skip_file,
        'type|gene_type=s'  => \$gene_type,
        ) or $usage->();
    $usage->() unless $dataset_name and $set_name and $gene_type;

    $file_name ||= "$dataset_name-$set_name-$gene_type";
    my $pep_file = "$file_name.pep";
    if (-e $pep_file) {
        die "ERROR: file '$pep_file' already exists\n";
    } else {
        print STDERR "Writing peptides to '$pep_file'\n";
    }
    

    my $cl = Bio::Otter::Lace::Defaults::make_Client();
    my $ds = $cl->get_DataSet_by_name($dataset_name);
    my $ss = $ds->get_SequenceSet_by_name($set_name);
    $ds->fetch_all_CloneSequences_for_SequenceSet($ss);
    $ss->selected_CloneSequences($ss->CloneSequence_list);
    
    my( %skip_list );
    if ($locus_skip_file) {
        #my %req_gene = map {$_, 1} @gene_id;
    
        open my $skip, '<', $locus_skip_file or die "Can't read '$locus_skip_file' : $!";
        while (<$skip>) {
            foreach my $id (split) {
                $skip_list{$id} = 1;
                #if ($req_gene{$id}) {
                #    warn "Gene '$id' is on command line but will be skipped\n";
                #}
            }
        }
        close $skip;
    }
    
    my $pep_out = Bio::SeqIO->new(
        -FORMAT => 'fasta',
        -FILE   => "> $pep_file",
        );
    
    my $slice_aptr = $ds->get_cached_DBAdaptor->get_SliceAdaptor;
    my $gene_aptr  = $ds->get_cached_DBAdaptor->get_GeneAdaptor;
    my $ctg_list = $ss->selected_CloneSequences_as_contig_list;
    my $gene_count = 0;
    foreach my $ctg (@$ctg_list) {
        my( $gene_id );
        {
            my $chr_name  = $ctg->[0]->chromosome->name;
            my $start     = $ctg->[0]->chr_start;
            my $end       = $ctg->[-1]->chr_end;
            print STDERR "Fetching slice of chr '$chr_name' from '$start' to '$end'\n";
            my $slice = $slice_aptr->fetch_by_chr_start_end($chr_name, $start, $end);
            $gene_id = $gene_aptr->list_current_dbIDs_for_Slice_by_type($slice, $gene_type);
        }
        $gene_count += @$gene_id;
        foreach my $gid (@$gene_id) {
            my $gene = $gene_aptr->fetch_by_dbID($gid);
            my $name        = $gene->gene_info->name->name;
            my $description = $gene->description;
            if ($skip_list{$name} or $name =~ /^GD:/i) {
                warn "Skipping '$name'\n";
                next;
            }
            eval {
                warn "Translating gene '$name'\n";
                foreach my $tscript (@{$gene->get_all_Transcripts}) {
                    my $translation = $tscript->translation or next;
                    my $pep = $tscript->translate;
                    my $t_name = $tscript->transcript_info->name;
                    my $tsid = $tscript->stable_id;
                    if ($pep->seq =~ /\*/) {
                        warn "Stops detected in gene '$name' tscript '$tsid'\n";
                    }
                    my @ele = (
                        qq{SUBMIT_ID "$tsid"},
                        qq{CATEG "$gene_type"},
                        );
                    push(@ele, qq{NAME "$description"}) if $description;
                    if ($gene->gene_info->known_flag) {
                        push(@ele, qq{SYMBOL "$name"});
                    }
                    my @evidence = map { $_->name } @{$tscript->transcript_info->get_all_Evidence};
                    if (@evidence) {
                        push(@ele, qq{AC "@evidence"});
                    }
                    my $desc = join(' | ', @ele);
                    $pep->id($t_name);
                    $pep->desc($desc);
                    $pep_out->write_seq($pep);
                }
            };
            if ($@) {
                warn "ERROR in '$name':\n$@";
            }
        }    
    }

    if ($gene_count) {
        warn "Got peptides for $gene_count '$gene_type' genes\n";
    } else {
        die "No genes of type '$gene_type'";
    }

}



__END__

=head1 NAME - get_peptides

=head1 AUTHOR

Ana Code B<email> anacode@sanger.ac.uk

