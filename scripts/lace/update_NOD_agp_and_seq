#!/usr/bin/env perl
# Copyright [2018] EMBL-European Bioinformatics Institute
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


use strict;
use warnings;


# compare chromoview NOD/CHORI agps with agps in ~jgrg/work/mouse
# update if necessary and copy over new ones to /nfs/WWWdev/SANGER_docs/htdocs/Projects/M_musculus-NOD/NOD_AGP
# which is used by /nfs/WWWdev/SANGER_docs/cgi-bin/Projects/M_musculus/mouse_NOD_clones_TPF script
# to generate webpage at http://wwwdev.sanger.ac.uk/cgi-bin/Projects/M_musculus/mouse_NOD_clones_TPF
#

use Hum::Sort ('ace_sort');
use File::Basename;
use Tie::IxHash;
use Hum::Tracking ('prepare_track_statement');

# get all NOD/CHORI subregions to chrom digit mapping
my $nod = prepare_track_statement(qq{
    SELECT s.subregion, c.chromosome
    FROM subregion s, chromosomedict c
    WHERE s.chromosome=c.id_dict
    AND s.speciesname= ?
    AND s.SUBREGION LIKE ?
    });
$nod->execute('Mouse', 'NOD%');

my $nod_chrdigit;
while ( my ($subregion, $chr_digit)= $nod->fetchrow ){

 # ignore old subregions - should have been remove by the finishers
  next if ( $subregion eq "NOD_IDD3" or
            $subregion eq "NOD_IDD4" or
            $subregion eq "NOD_IDD10" or
            $subregion eq "NOD_IDD16" or
            $subregion eq "NOD_IDD18" or
            $subregion eq "NOD_IDD6.1+2"
      );

  $nod_chrdigit->{$subregion} = $chr_digit;
}

my $chori = prepare_track_statement(qq{
    SELECT s.subregion, c.chromosome
    FROM subregion s, chromosomedict c
    WHERE s.chromosome=c.id_dict
    AND s.speciesname= ?
    AND s.SUBREGION LIKE ?
    });
$chori->execute('Mouse', 'CHO%');
while ( my ($subregion, $chr_digit)= $chori->fetchrow ){

  if ( $subregion eq "CHO_IDD5" ){
    $subregion = "CHO_IDD5.1_Test";
  }
  $nod_chrdigit->{$subregion} = $chr_digit;

}

if ( $ARGV[0] eq "test" ){
  foreach my $region (keys %$nod_chrdigit ){
    warn "$region ", $nod_chrdigit->{$region};
  }
  die;
}

my $nod_base = "/nfs/team71/analysis/jgrg/work/mouse";
my $dest_dir = "/nfs/WWWdev/SANGER_docs/htdocs/Projects/M_musculus-NOD/NOD_AGP";

system("rm -f $dest_dir/*");

my (@latest_agps);

foreach my $region (keys %$nod_chrdigit ){
  my $chr = $nod_chrdigit->{$region};

  my $agpfile = "chr$chr"."_$region-*agp";

  my @sorted_files = sort { ace_sort($a, $b) } glob ("$nod_base/chr_$chr/$agpfile");
  #warn "@sorted_files";
  my $latest = $sorted_files[-1];
  my $file = basename($latest);

  my $is_current = check_agp_is_up_2_date($chr, $region, $file, $nod_base);
  next if $is_current == 0;

  $file =~ s/-\d+//;

  if ( $file =~ /(.*_)CHO(_.*)/ ){
    $file = $1."CHORI29".$2;
  }

  my $outfile = "$dest_dir/$file";

  if ( $file ){

    my $fh;
    open ( $fh, '>', $outfile) or die $!;

    my $cols =<<"COLS";
----------------------------------------------------------------------------
$region AGP
----------------------------------------------------------------------------
col_1: chromosome name
col_2: AGP start
col_3: AGP_end
col_4: assembly order (ranks)
col_5: sequencing status: F(finished), N(unfinished), A(contiguous)
col_6: accession.version or gap (default 50,000 bp)
col_7: start position of clone sequence used in AGP
col_8: end position of clone sequence used in AGP
col_9: orientation
-----------------------------------------------------------------------------

COLS

    print $fh $cols;
    close $fh;

    system("cat $latest >> $outfile");
    push(@latest_agps, $latest);

  }
}
warn "\n";

# make latest region sequence of an agp file

foreach my $file ( @latest_agps ){

 # warn $file;
  #my $chk_gap = `egrep '(clone|contig|N	50000)' $file`; ## no critic (CodeLayout::ProhibitHardTabs)
  my $chk_gap = `egrep '(clone|contig|N	)' $file`; ## no critic (CodeLayout::ProhibitHardTabs)
  if ( $chk_gap ){
    warn "UNFINISHED: $file\n";

    # Assembly sequences for these NOD regions with gaps
    # note that these gaps will never be filled as they are of no interest
    # and will stay as is except IDD4 on chr 11.
    # So make contigs for consecutive clones.

    assembly_contig_seq($file);
    next;
  }

  my $fh;
  open($fh, '<', $file) or die $!;

  my $agpfile = basename($file);

  if ( $agpfile =~ /(.+_)CHO(_.+)/ ){
    $agpfile = $1."CHORI29".$2;
  }

  $agpfile =~ s/-\d+//;
  my $region_seq = $agpfile.".seq";

  open(my $agpseq, '>', "$dest_dir/$region_seq") or die $!;
  print $agpseq basename($file), "\n\n";

  warn "  FINISHED: $agpfile [$region_seq]";

  my $non_n = 0;

  my $seq;

  while (<$fh>){
    chomp;

    #warn $_, "\n";
    # agp format:
    # chr11   1       176646  1       F       CR933541.6      1       176646  +

    next if /^col/;

    my ($start, $end, $rank, $status, $acc, $acc_ori, $strand) = get_fields($_);

    $acc =~ s/\.\d+$//;

    my $test_sv = `pfetch -D $acc`;
    chomp $test_sv;
    $test_sv =~ /^(.*\.\d+)\s.+/;
    $test_sv = $1;

#    warn "$acc_ori $acc $test_sv";

    # acc sequence
    if ( $acc_ori !~ /^\d+/ ){

      $non_n = 1;

      if ( $test_sv eq $acc_ori ){
        $seq .= `pfetch -s $start -e $end -q $acc`;
      }

      # stop if version does not match
      else {
        #unlink("$file.seq");
        warn "Unmatched versions: AGP [$acc_ori], Pfetch [$test_sv] in $file";
      }
    }

    # gap sequence
    else {
      $seq .= "n" x $acc if $non_n == 1; # $acc here is eg, 50000 (bp of gap)
    }
  }
  print $agpseq sixty_cols($seq);
  close $fh;
  close $agpseq;
}

# update NOD agp/seq files in live site
warn "\n";


sub check_agp_is_up_2_date {

  my ($chr, $region, $file, $nod_base) = @_;

  $region = "CHO_IDD5" if $region eq "CHO_IDD5.1_Test";

  my $script = "/nfs/team71/analysis/ck1/SCRIPT_CVS/chromoview/oracle2agp";
  my $args = " -chromosome $chr -species Mouse -subregion $region -unfinished";

  chdir $nod_base."/chr_$chr";

  `$script $args > tmp`;
  warn $args, " $file" if $region eq "CHO_IDD5";
  my $diff = system("diff tmp $file");
  if ( $diff != 0 ){
    print "AGP changed in chromoview: $file\n";
    $file =~ /(.+-)(\d+)(\.agp)/;
    my $version = $2;
    $version++;
    my $newfile = $1.$version.$3;
    `mv tmp $newfile`;
  }
  else {
    unlink "tmp";
  }
  return $diff;
}

sub get_fields {

  my $info = shift;
  chomp $info if $info =~ /\n/;

  my @fields = split(/\t/, $info);

  my $start   = $fields[6];
  my $end     = $fields[7];
  my $rank    = $fields[3];
  my $status  = $fields[4];
  my $acc     = $fields[5];
  my $acc_ori = $acc;
  my $strand  = $fields[8];

  return ($start, $end, $rank, $status, $acc, $acc_ori, $strand);
}

sub assembly_contig_seq {

  my $file = shift;
  my $fh;
  open ( $fh, '<', $file ) or die $!;

  my $seq;
  my $N = 1;
  my $contig_acc_start_end_strand = {};

  # need to preserve the order of clones
  tie %$contig_acc_start_end_strand, "Tie::IxHash";

  while ( <$fh> ) {

    my ($start, $end, $rank, $status, $acc, $acc_ori, $strand) = get_fields($_);

    #warn "$start, $end, $rank, $status, $acc, $acc_ori, $strand";

    if ( $status =~ /F|A/ ) { #eq "F" or $status eq "A" ) {
      push(@{$contig_acc_start_end_strand->{$acc}}, $rank, $start, $end, $strand);
    }
    elsif ( $status eq "N") {
      my $clones = scalar keys %$contig_acc_start_end_strand;

      if ( $clones < 2 ){
        $contig_acc_start_end_strand = {};
        tie %$contig_acc_start_end_strand, "Tie::IxHash";
      }

#      # assembly contig seq if there are > 1 consecutive clones
      elsif ( $clones >= 2 ) {
        concat_seq($contig_acc_start_end_strand, $file);

        $contig_acc_start_end_strand = {};
        tie %$contig_acc_start_end_strand, "Tie::IxHash";
      }
    }
  }

  if ( scalar keys %$contig_acc_start_end_strand >= 2 ){
    concat_seq($contig_acc_start_end_strand, $file);
  }

  return;
}

sub concat_seq {
  my ( $contig_acc_start_end_strand, $file ) = @_;

  my $seq;
  my $ranks = "No_";
  my @ranks;
  $file = basename($file);
  $file =~ s/-\d+\.agp$//;

  if ( $file =~ /(.+_)CHO(_.+)/ ){
    $file = $1."CHORI29".$2;
  }

  #warn $file, " ", keys %$contig_acc_start_end_strand;
  foreach my $acc ( keys %$contig_acc_start_end_strand ) {

    my $acc_ori = $acc;
    $acc =~ s/\.\d+$//;
    my $start  = $contig_acc_start_end_strand->{$acc_ori}->[1];
    my $end    = $contig_acc_start_end_strand->{$acc_ori}->[2];
    my $rank   = $contig_acc_start_end_strand->{$acc_ori}->[0];
    push(@ranks, $rank);

    $seq .= `pfetch -s $start -e $end -q $acc`;
  }

  $ranks .= $ranks[0]."-".$ranks[-1];

  my $seq_file = $file."_$ranks".".seq";
  my $outfile = "$dest_dir/$seq_file";
  my $fh;
  open ( $fh, '>', $outfile ) or die $!;

  print "Writing to $seq_file\n";
  print $fh "$seq_file\n\n", sixty_cols($seq);

  return;
}


sub sixty_cols {

  my $seq  = shift;
  my $seqfrag;
  my $len;
  my $formatted;

  while ($seq =~ /(.{1,60})/g) {
    $seqfrag = $1;
    $len += length($seqfrag);

    $formatted .= sprintf("%-60s\t%d\n", $seqfrag, $len);
  }
  return lc($formatted);
}

sub revcomp {
  my $seq = shift;
  $seq =~ tr/ATCG/TAGC/;
  $seq = reverse($seq);

  return $seq;
}

__END__
