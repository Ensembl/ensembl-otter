#!/usr/bin/env perl
# Copyright [2018-2019] EMBL-European Bioinformatics Institute
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


use warnings;


# Shows contigs that do not belong to any assembly
# and tries to give a possible hint
# as to which assembly each contig could belong to
# (based on the clone name match without the version)

use strict;
use Bio::Otter::Lace::Defaults;

{
    my $dataset_name    = 'human'; # 'test_human';      # 'mouse', ...
    my $with_genes      = 0; # whether we take into account only contigs containing annotated genes
    my $without_genes   = 0; # whether we take into account only contigs containing no annotated genes

    Bio::Otter::Lace::Defaults::do_getopt(
        'dataset=s'      => \$dataset_name,
        'with_genes!'    => \$with_genes,
        'without_genes!' => \$without_genes,
    );
    
    # Client communicates with otter HTTP server
    my $cl = Bio::Otter::Lace::Defaults::make_Client();

    # DataSet interacts directly with an otter database
    my $ds = $cl->get_DataSet_by_name($dataset_name);
    
    my $otter_dba = $ds->get_cached_DBAdaptor;

    my $sth_orphan = $otter_dba->prepare( $with_genes
    ? qq{
        SELECT DISTINCT c.name
        FROM (contig c, exon e)
        LEFT JOIN assembly a
        ON a.contig_id=c.contig_id
        WHERE e.contig_id=c.contig_id
        AND a.type IS NULL;
    } : $without_genes
    ? qq {
        SELECT DISTINCT c.name
        FROM contig c
        LEFT JOIN exon e
        ON e.contig_id=c.contig_id
        LEFT JOIN assembly a
        ON a.contig_id=c.contig_id
        WHERE e.exon_id IS NULL
        AND   a.type    IS NULL;
    } : qq{
        SELECT c.name
        FROM contig c
        LEFT JOIN assembly a
        ON a.contig_id=c.contig_id
        WHERE a.type IS NULL
    });

    my $sth_similar = $otter_dba->prepare(qq{
        SELECT a.type, c.name
        FROM contig c, assembly a
        WHERE a.contig_id=c.contig_id
        AND c.name LIKE concat(?,"%")
    });

    my $cnt = 0;

    $sth_orphan->execute();
    while( my ($contig_name) = $sth_orphan->fetchrow()) {
        printf ("%4d    %s:", ++$cnt, $contig_name);

        my %clone_to_asmlist = ();
        my $proper_name = (split(/\./, $contig_name))[0];
        $sth_similar->execute($proper_name);
        while( my ($asm, $similar_name) = $sth_similar->fetchrow()) {
            push @{$clone_to_asmlist{$similar_name}}, $asm;
        }

        foreach my $similar_name (keys %clone_to_asmlist) {
            print "    $similar_name(".join(', ', @{$clone_to_asmlist{$similar_name}}).")";
        }
        print "\n";
    }
}

