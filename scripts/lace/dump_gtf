#!/usr/bin/env perl
# Copyright [2018-2022] EMBL-European Bioinformatics Institute
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


use warnings;


### dump_gtf

use strict;
use Bio::Otter::Lace::Defaults;
use Bio::Vega::DBSQL::DBAdaptor;

{
    my ($dataset_name);
    my $local_coords   = 0;
    my $include_codons = 1;
    my $fix_phases     = 0;
    my $corf           = 0;
    my $sanger         = 1;

    my $usage = sub { exec('perldoc', $0) };
    Bio::Otter::Lace::Defaults::do_getopt(
        'h|help!'   => $usage,
        'dataset=s' => \$dataset_name,
      )
      or $usage->();
    $usage->() unless $dataset_name;

    # Client communicates with otter HTTP server
    my $cl = Bio::Otter::Lace::Defaults::make_Client();

    # DataSet interacts directly with an otter database
    my $ds = $cl->get_DataSet_by_name($dataset_name);

    my $otter_dba  = $ds->get_cached_DBAdaptor;
    my $slice_aptr = $otter_dba->get_SliceAdaptor;
    my $gene_aptr  = $otter_dba->get_GeneAdaptor;

    foreach my $set_name (@ARGV) {

        # Get the slice of the whole sequence set
        my $ss = $ds->get_SequenceSet_by_name($set_name);
        $ds->selected_SequenceSet($ss);
        $ds->fetch_all_CloneSequences_for_SequenceSet($ss);
        my ($chr, $chr_start, $chr_end) =
          $cl->chr_start_end_from_contig($ss->CloneSequence_list);
        my $slice =
          $slice_aptr->fetch_by_chr_start_end($chr, $chr_start, $chr_end);
        
        # Write the AGP data into a separate file
        my $agp_file = "$dataset_name.$set_name.agp";
        if (-e $agp_file) {
            die "Error: file '$agp_file' already exists\n";
        }
        open my $agp, '>', $agp_file or die "Can't write to '$agp_file' : $!";
        warn "Creating AGP file '$agp_file'\n";
        print $agp @{$ss->agp_data};
        close $agp or die "Error writing to '$agp_file' : $!";

        # Create the GTF file to write the genes into
        my $file_name = "$dataset_name.$set_name.gtf";
        if (-e $file_name) {
            die "Error: file '$file_name' already exists\n";
        }
        open my $fh, '>', $file_name or die "Can't write to '$file_name' : $!";
        warn "Writing GTF data to '$file_name'\n";


        my $gene_id_list = $gene_aptr->list_current_dbIDs_for_Slice($slice);
        my $i = 0;
        foreach my $gene_dbid (@$gene_id_list) {
            my $gene = $gene_aptr->fetch_by_dbID($gene_dbid);
            next if $gene->type eq 'obsolete';
            if ($sanger) {
                next if $gene->gene_type_prefix;
            }
            $i++;
            
            $gene = $gene->transform($slice);

            my $tsct_dumped = 0;
            foreach my $tsct (@{ $gene->get_all_Transcripts }) {
                if ($corf) {
                    next unless is_corf_transcript($tsct);
                }
                $tsct_dumped = 1;
                my $exons_truncated = $tsct->truncate_to_Slice($slice);
                eval {
                    write_transcript_gtf($fh, $slice, $gene, $tsct, $local_coords,
                        $exons_truncated, $include_codons, $fix_phases, $set_name);

                };
                warn $@ if $@;
            }
            print STDERR $tsct_dumped ? '+' : ".";
            unless ($i % 50) {
                print STDERR " $i\n";
            }
        }
        if ($i % 50) {
            print STDERR " $i\n";
        }
        close $fh or die "Error writing to '$file_name' : $!";
    }
}

sub is_corf_transcript {
    my( $tsct ) = @_;
    
    my $is_corf = 0;
    foreach my $rem ($tsct->transcript_info->remark) {
        if ($rem->remark =~ /^Annotation_remark-\s*corf$/) {
            $is_corf = 1;
            last;
        }
    }
    return $is_corf;
}

sub write_transcript_gtf {
    my ($fh, $slice, $gene, $transcript, $localcoords, $exons_truncated,
        $include_codons, $fix_phases, $seqname)
      = @_;

    my $sliceoffset = 0;
    if (!$localcoords) {
        $sliceoffset = $slice->chr_start - 1;
    }

    my @startcs =
      make_start_codon_features($transcript, $transcript->stable_id);
    my @endcs =
      make_stop_codon_features($transcript, $transcript->stable_id);

    my $chrname;
    $chrname = $slice->chr_name;

    my $idstr;

    if (defined($seqname)) {
        $idstr = $seqname;
    }
    else {
        $idstr = $chrname;
    }

    my ($hasstart, $hasend) = check_start_and_stop($slice, $transcript);

    if (!$include_codons) {
        $hasstart = $hasend = 0;
    }

    my @translateable_exons;
    @translateable_exons = @{ $transcript->get_all_translateable_Exons }
      if $transcript->translation;

    if ($fix_phases) {
        my $phase = 0;
        foreach my $exon (@translateable_exons) {
            $exon->phase($phase);
            $exon->end_phase(($exon->length + $exon->phase) % 3);
            $phase = $exon->end_phase;
        }
    }

    my $count   = 1;
    my $intrans = 0;
    my $instop  = 0;

    foreach my $exon (@{ $transcript->get_all_Exons }) {
        my $strand = $exon->strand;

        if ($exon->strand == -1) {
            $strand = "-";
        }
        elsif ($exon->strand == 1) {
            $strand = "+";
        }
        elsif ($exon->strand == 0) {
            $strand = ".";
        }

        if (   $transcript->translation
            && $exon == $transcript->translation->start_Exon)
        {
            $intrans = 1;
        }

        print $fh $idstr . "\t"
          . $gene->type . "\t" . 'exon' . "\t"
          . ($exon->start + $sliceoffset) . "\t"
          . ($exon->end + $sliceoffset) . "\t" . "." . "\t"
          . $strand . "\t" . "." . "\t";
        print_attribs($fh, $gene, $transcript, $count, 'exon');

         # remarks don't seem to exist in the ensembl schema as they do in otter
         # gene_description is used for something else, so is not appropriate
        if ($count == 1) {
            print_description_attribs($fh, $gene, $transcript, $count, $exons_truncated);
        }

        print $fh "\n";

        if ($intrans) {

            my $cdsexon = shift @translateable_exons;
            my $phase   = $cdsexon->phase;
            if ($cdsexon->phase == 1) {
                $phase = 2;
            }
            elsif ($cdsexon->phase == 2) {
                $phase = 1;
            }
            elsif ($cdsexon->phase == -1) {
                $phase = 0;
            }

            my $exon_start = $cdsexon->start;
            my $exon_end   = $cdsexon->end;
            if (
                $transcript->translation
                &&

                # $exon == $transcript->translation->end_Exon &&
                $hasend && $exon->overlaps($endcs[0])
              )
            {

                if ($cdsexon->strand == 1) {
                    $exon_end = $cdsexon->end - $endcs[0]->length;
                }
                else {
                    $exon_start = $cdsexon->start + $endcs[0]->length;
                }
            }

            if (   $exon_start <= $cdsexon->end
                && $exon_end >= $cdsexon->start
                && !$instop)
            {
                print $fh $idstr . "\t"
                  . $gene->type . "\t" . 'CDS' . "\t"
                  . ($exon_start + $sliceoffset) . "\t"
                  . ($exon_end + $sliceoffset) . "\t" . "." . "\t"
                  . $strand . "\t"
                  . $phase . "\t";
                print_attribs($fh, $gene, $transcript, $count, 'CDS');
                print $fh "\n";
            }
        }
        if (   $transcript->translation
            && $exon == $transcript->translation->start_Exon
            && $hasstart)
        {
            my $tmpcnt = $count;
            foreach my $startc (@startcs) {
                print $fh $idstr . "\t"
                  . $gene->type . "\t"
                  . 'start_codon' . "\t"
                  . ($startc->start + $sliceoffset) . "\t"
                  . ($startc->end + $sliceoffset) . "\t" . "." . "\t"
                  . $strand . "\t"
                  . $startc->phase . "\t";
                print_attribs($fh, $gene, $transcript, $tmpcnt++, 'start_codon');
                print $fh "\n";
            }
        }
        if ($transcript->translation
            && ($exon == $transcript->translation->end_Exon))
        {
            if ($hasend) {
                my $tmpcnt = $count - $#endcs;
                foreach my $endc (@endcs) {
                    print $fh $idstr . "\t"
                      . $gene->type . "\t"
                      . 'stop_codon' . "\t"
                      . ($endc->start + $sliceoffset) . "\t"
                      . ($endc->end + $sliceoffset) . "\t" . "." . "\t"
                      . $strand . "\t"
                      . $endc->phase . "\t";
                    print_attribs($fh, $gene, $transcript, $tmpcnt++, 'stop_codon');
                    print $fh "\n";
                }
            }
            $intrans = 0;
        }

        if (scalar(@endcs) && $exon->overlaps($endcs[0])) {
            $instop = 1;
        }

        $count++;
    }

    return;
}

sub make_start_codon_features {
    my ($trans, $id) = @_;

    if (!$trans->translation) {
        return (());
    }

    my @translateable = @{ $trans->get_all_translateable_Exons };

    my @pepgencoords = $trans->pep2genomic(1, 1);

    if (scalar(@pepgencoords) > 2) {
        die("pep start does not map cleanly\n");
    }
    elsif (scalar(@pepgencoords) == 2) {
        print "WOW got a 2 feature start codon for "
          . $trans->stable_id
          . " strand "
          . $translateable[0]->strand . "\n";
    }

    unless ($pepgencoords[0]->isa('Bio::EnsEMBL::Mapper::Coordinate')) {
        die("pep start maps to gap\n");
    }
    unless (
        $pepgencoords[-1]->isa('Bio::EnsEMBL::Mapper::Coordinate'))
    {
        die("pep start (end of) maps to gap\n");
    }

    @translateable = @{ $trans->get_all_translateable_Exons };
    my @startc_feat;
    my $phase = 0;
    foreach my $pepgencoord (@pepgencoords) {
        push @startc_feat, Bio::EnsEMBL::SeqFeature->new(
            -seqname     => $id,
            -source_tag  => 'starttrans',
            -primary_tag => 'similarity',
            -start       => $pepgencoord->start,
            -end         => $pepgencoord->end,
            -phase       => $phase,
            -strand      => $translateable[0]->strand
        );
        $phase = 3 - ($pepgencoord->end - $pepgencoord->start + 1);

# print "New phase = $phase given " . $pepgencoord->start . " " . $pepgencoord->end . " " . ( $pepgencoord->end - $pepgencoord->start+1) . "\n";
    }
    if ($translateable[0]->strand == 1) {
        @startc_feat = sort { $a->start <=> $b->start } @startc_feat;
    }
    else {
        @startc_feat = sort { $b->start <=> $a->start } @startc_feat;
    }
    return @startc_feat;

}

sub make_stop_codon_features {
    my ($trans, $id) = @_;

    if (!$trans->translation) {
        return (());
    }
    my @translateable = @{ $trans->get_all_translateable_Exons };

    my $cdna_endpos = $trans->cdna_coding_end;

    my @pepgencoords = $trans->cdna2genomic($cdna_endpos - 2, $cdna_endpos);

    if (scalar(@pepgencoords) > 2) {
        die("pep end does not map cleanly\n");
    }
    elsif (scalar(@pepgencoords) == 2) {
        print "WOW got a 2 feature stop codon for "
          . $trans->stable_id
          . " strand "
          . $translateable[0]->strand . "\n";
    }

    unless ($pepgencoords[0]->isa('Bio::EnsEMBL::Mapper::Coordinate')) {
        die("pep end maps to gap\n");
    }
    unless (
        $pepgencoords[-1]->isa('Bio::EnsEMBL::Mapper::Coordinate'))
    {
        die("pep end (end of) maps to gap\n");
    }

    my @stopc_feat;
    my $phase = 0;
    foreach my $pepgencoord (@pepgencoords) {
        push @stopc_feat, Bio::EnsEMBL::SeqFeature->new(
            -seqname     => $id,
            -source_tag  => 'endtrans',
            -primary_tag => 'similarity',
            -start       => $pepgencoord->start,
            -end         => $pepgencoord->end,
            -phase       => $phase,
            -strand      => $translateable[0]->strand
        );
        $phase = 3 - ($pepgencoord->end - $pepgencoord->start + 1);

# print "New phase = $phase given " . $pepgencoord->start . " " . $pepgencoord->end . " " . ($pepgencoord->end-$pepgencoord->start+1) . "\n";
    }

    if ($translateable[0]->strand == 1) {
        @stopc_feat = sort { $a->start <=> $b->start } @stopc_feat;
    }
    else {
        @stopc_feat = sort { $b->start <=> $a->start } @stopc_feat;
    }

    #print "Ended with " . scalar(@stopc_feat) . " stop codon features\n";
    return @stopc_feat;
}

sub print_description_attribs {
    my ($fh, $gene, $transcript, $count, $exons_truncated) = @_;

    # Make gene description from its remarks
    my @gene_desc;
    foreach my $remark ($gene->gene_info->remark) {
        my $txt = $remark->remark;
        unless ($txt =~ /^Annotation_remark-/) {
            push(@gene_desc, $txt);
        }
    }
    if (@gene_desc) {
        my $txt = join(', ', @gene_desc);
        print $fh qq{ gene_description "$txt";};
    }

    if ($exons_truncated) {
        print $fh qq{ exons_off_assembly "$exons_truncated";};
    }

    my $info = $transcript->transcript_info;
    foreach my $method (
        qw{
        cds_start_not_found
        cds_end_not_found
        mRNA_start_not_found
        mRNA_end_not_found
        }
      )
    {
        print $fh qq{ $method;} if $info->$method();
    }

    foreach my $remark ($transcript->transcript_info->remark) {
        my $rem = $remark->remark;
        unless ($rem =~ /^Annotation_remark-/) {
            print $fh qq{ transcript_remark "$rem";};
        }
    }

    return;
}


sub print_attribs {
    my ($fh, $gene, $transcript, $count, $type) = @_;

    my $gene_name;
    $gene_name = $gene->gene_info->name->name;

    my $trans_name;
    $trans_name = $transcript->transcript_info->name;

    print $fh " gene_id \""
      . get_gene_id($gene) . "\";"
      . " transcript_id \""
      . get_transcript_id($transcript) . "\";";
    print $fh " exon_number \"$count\";";
    print $fh " gene_name \"" . $gene_name . "\";"        if ($gene_name);
    print $fh " transcript_name \"" . $trans_name . "\";" if ($trans_name);
    if ($type eq 'exon') {

        #  print $fh ' gbkey "mRNA";';
    }
    elsif ($type eq 'CDS') {
        print $fh ' protein_id "'
          . get_translation_id($transcript->translation) . '";';
    }

    return;
}



sub get_gene_id {
    my $gene = shift;

    if (defined($gene->stable_id)) {
        return $gene->stable_id;
    }
    return $gene->dbID;
}

sub get_transcript_id {
    my $transcript = shift;

    if (defined($transcript->stable_id)) {
        return $transcript->stable_id;
    }
    return $transcript->dbID;
}

sub get_translation_id {
    my $translation = shift;

    if (defined($translation->stable_id)) {
        return $translation->stable_id;
    }
    return $translation->dbID;
}


sub check_start_and_stop {
    my ($slice, $trans) = @_;

    return (0, 0) if (!defined($trans->translation));

    my $tln = $trans->translation;

    $trans->sort;

    my $coding_start = $trans->cdna_coding_start;
    my $coding_end   = $trans->cdna_coding_end;
    my $cdna_seq     = uc($trans->spliced_seq);

    my $startseq = substr($cdna_seq, $coding_start - 1, 3);
    my $endseq   = substr($cdna_seq, $coding_end - 3,   3);

    #print STDERR "Codons: " . $startseq . " " . $endseq . "\n";

    my $has_start = 1;
    my $has_end   = 1;

    $has_start = 0 if ($startseq ne "ATG");
    $has_end = 0 if ($endseq ne "TAG" && $endseq ne "TGA" && $endseq ne "TAA");

    return ($has_start, $has_end);
}





__END__

=head1 NAME - dump_gtf

  dump_gtf -dataset <DATASET_NAME> <LIST OF SEQUENCE SETS>

=head1 EXAMPLE

  dump_gtf -dataset human chr1-06 chr6-09

=head1 DESCRIPTION

Dumps GTF format files for each sequence set
(chromosome) named on the command line along with
an AGP file.

=head1 AUTHOR

Ana Code B<email> anacode@sanger.ac.uk

