#!/usr/bin/env perl
# Copyright [2018-2022] EMBL-European Bioinformatics Institute
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


use warnings;


=head1 NAME - submissions_to_otter

=head1 SYNOPSIS
    
submission_to_otter -dataset <DATASET NAME> [-domain <DOMAIN NAME>]

=head1 DESCRIPTION
    
checks through the contigs in an otter databases and if no sequence notes are present, it copies them from the submissions database

=cut
 

use strict;
use Carp;
use Hum::Submission qw{sub_db prepare_statement};
use DBI;
use Bio::Otter::Lace::PipelineDB;
use Bio::Otter::Lace::Defaults;

my $otter_db;

{
    my $dataset_name = undef;
    my $help         = 0;
    my $domain = 'sanger.ac.uk';
    Bio::Otter::Lace::Defaults::do_getopt(
        'help!'     => \$help,
        'dataset=s'   => \$dataset_name,
        'domain=s'    => \$domain,
        ) || usage();
    die "I need a dataset name, is that too much to ask?\n" unless $dataset_name;
    if ($domain) {
        $domain = "\@$domain";
    }
    my $cl = Bio::Otter::Lace::Defaults::make_Client();
    my $ds = $cl->get_DataSet_by_name($dataset_name);
    # Make a connection to the otter database
    $otter_db = $ds->get_cached_DBAdaptor;
    
    my $fetch_notes_sanger = prepare_statement(q{
        SELECT r.annotator_uname
          , r.review_comment
          , r.review_time
        FROM (project_acc pa
          , project_dump d
          , sequence s
          , ana_sequence a)
        STRAIGHT_JOIN ana_sequence_review r
        WHERE pa.sanger_id = d.sanger_id
          AND d.seq_id = s.seq_id
          AND s.seq_id = a.seq_id
          AND a.ana_seq_id = r.ana_seq_id
          AND d.is_current = 'Y'
          AND a.is_current = 'Y'
          AND pa.accession = ?
          AND s.sequence_version = ?
        ORDER BY r.review_time DESC
        });
    
    my $fetch_notes_external = prepare_statement(q{
        SELECT r.annotator_uname
          , r.review_comment
          , r.review_time
        FROM (sequence s
          , ana_sequence a)
        STRAIGHT_JOIN ana_sequence_review r
        WHERE s.seq_id = a.seq_id
          AND a.ana_seq_id = r.ana_seq_id
          AND a.is_current = 'Y'
          AND s.sequence_name = ?
          AND s.sequence_version = ?
        ORDER BY r.review_time DESC
        });

    my $insert_note = $otter_db->prepare(q{
        INSERT INTO sequence_note( author_id
              , contig_id
              , is_current
              , note
              , note_time)
        VALUES(?,?,?,?,?)
        });

    my $author_id_hash = get_author_id_hash($otter_db);

    # query otter database for each of the contigs that have no comment
    my $otter_sth = $otter_db->prepare(q{
        SELECT cl.embl_acc
          , cl.embl_version
          , cg.contig_id
        FROM (clone cl
          , contig cg)
        LEFT JOIN sequence_note sn
          ON sn.contig_id = cg.contig_id
        WHERE cg.clone_id = cl.clone_id
          AND sn.note IS NULL
        }) ;
    $otter_sth->execute;

    my $count = 0;
    while (my ($accession, $version, $contig_id) = $otter_sth->fetchrow){
        foreach my $sth ($fetch_notes_sanger, $fetch_notes_external) {
            $sth->execute($accession, $version);
            my ($username, $comment, $time);
            $sth->bind_columns( \$username, \$comment, \$time );

            # set initaially to 'Y' for the first note (most recent) copied over, then set to 'N'
            my $is_current = 'Y';
            while ($sth->fetch) {
                next unless $comment;
                my $author_id = $author_id_hash->{$username} ||= insert_new_author($username, $domain);
                # insert the note 
                $insert_note->execute($author_id, $contig_id, $is_current, $comment, $time);
                $count++;
                $is_current = 'N';
            }
            last if $sth->rows;
        }
    }

    print STDERR "\n", $count ." sequence notes copied over\n";

}

sub get_author_id_hash {
    my( $db ) = @_;
    
    my $sth = $db->prepare(q{
        SELECT author_id
          , author_name
        FROM author
        });
    $sth->execute;
    
    my $authors = {};
    while (my ($id, $name) = $sth->fetchrow) {
        $authors->{$name} = $id;
    }
    return $authors;
}

### Use this in SequenceNotes for new authors
sub insert_new_author {
    my( $username, $domain ) = @_;

    my $sth = $otter_db->prepare(qq{ 
        INSERT INTO author (author_name
              , author_email)
        VALUES (?,?)
        });
    $sth->execute($username, "$username$domain");
    my $id = $sth->{'mysql_insertid'}
        or confess "No insert_id from author insert";

    return $id;
}


=head1 AUTHOR

Ana Code B<email> anacode@sanger.ac.uk

