#!/usr/bin/env perl
# Copyright [2018-2022] EMBL-European Bioinformatics Institute
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


use warnings;


### check_gene_transcript_spans_by_ratio

use strict;
use Getopt::Long 'GetOptions';
use Bio::Otter::Lace::Defaults;
use Data::Dumper;

$| = 1;

my ($dataset, $verbose, @a_types);
my $check_vega = 0;

my $help = sub { exec('perldoc', $0) };

Bio::Otter::Lace::Defaults::do_getopt(
    'ds|dataset=s' => \$dataset,
    'v|verbose'    => \$verbose,
    't|type=s@'    => \@a_types,
    'h|help'       => $help,
    'vega!'        => \$check_vega,
    ) or $help->();    # plus default options
$help->() unless $dataset;

my $client    = Bio::Otter::Lace::Defaults::make_Client();          # Bio::Otter::Lace::Client
my $dset      = $client->get_DataSet_by_name($dataset);             # Bio::Otter::Lace::DataSet
my $otter_db  = $dset->get_cached_DBAdaptor;                        # Bio::EnsEMBL::Containerr


unless ( @a_types ){

  # sql query to get all assembly types
  my $sql = q{SELECT assembly_type FROM sequence_set};
  if ($check_vega) {
    $sql .= q{  where vega_set_id != 0 };
  }
  my $sth = $otter_db->prepare($sql);
  $sth->execute;
  while( my ($type) = $sth->fetchrow_array()) {
    push (@a_types, $type);
  }
  $sth->finish;
}

# loop thru all assembly types to fetch all annotated genes in it on otter

open(my $f, '>', "vega_data_error") || die $!;

foreach my $type ( @a_types ) {

  print STDERR "\nExamining genes on '$type'\n";

  my $seqSet    = $dset->get_SequenceSet_by_name($type);
  $dset->fetch_all_CloneSequences_for_SequenceSet($seqSet);
  my $chrom     = $seqSet->CloneSequence_list()->[0]->chromosome;

  my $geneAd  = $otter_db->get_GeneAdaptor; # Bio::Otter::AnnotatedGeneAdaptor

  my $sliceAd = $otter_db->get_SliceAdaptor;
  my $slice = $sliceAd->fetch_by_chr_name($chrom->name);

  my $latest_gene_id = $geneAd->list_current_dbIDs_for_Slice($slice);

  my $i = 0;
  GENE: foreach my $id ( @$latest_gene_id ) {
    $i++;
    my $gene = $geneAd->fetch_by_dbID($id)->transform($slice);

    my $all_exons = $gene->get_all_Exons;
    foreach ( @$all_exons ){
      if ( $_->contig != $slice ){
    print $f "$type\t". $gene->stable_id ."\t". $gene->gene_info->name->name. " has no exons within the slice\n" if ( $_->contig != $slice );
    next GENE;
      }
    }

    my $gene_length = $gene->end - $gene->start + 1;

    my $all_trans = $gene->get_all_Transcripts;
    my( $longest );
    my $longest_length = 0;
    foreach my $tsct (@$all_trans) {

        my $length = $tsct->end - $tsct->start + 1;
        if ($length > $longest_length) {
            $longest_length = $length;
            $longest = $tsct;
        }
    }

    unless ($longest) {
    print $f "\n$type\tFAILED TO GET LONGEST TRANSCRIPT FOR ", $gene->stable_id, "\n";
        next;
    }

    my $ratio = $longest_length / $gene_length;
    if ($ratio != 1) {
        print STDERR "+";
        print join("\t",
            $type,
            $gene->stable_id,
            $longest->transcript_info->name,
            $ratio,
            ), "\n";
    } else {
        print STDERR '.';
    }
    unless ($i % 60) {
        print STDERR "\n";
    }
  }
}


__END__

=head1 NAME - check_gene_transcript_spans_by_ratio

=head1 AUTHOR

Ana Code B<email> anacode@sanger.ac.uk

=head1 SYNOPSIS

  check_gene_transcript_spans_by_ratio -dataset <DATASET> [-vega] [-type <SET>]




