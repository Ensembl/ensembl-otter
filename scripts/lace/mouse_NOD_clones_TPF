#!/usr/bin/env perl
# Copyright [2018-2022] EMBL-European Bioinformatics Institute
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


use strict;
use warnings;


### ck1 - Team 71
### mouse_NOD_clones_TPF: Displays up-to-date mouse NOD clone/Assembly sequencing status to external collaborators;
###                       It queries the Oracle Trackings database and generates info on the fly, however
###                       caching is implemented

# use SangerPaths qw(core badger humpub);
# use SangerWeb;
# use Hum::Submission ('prepare_statement');
# use Hum::Tracking ('prepare_track_statement');
# use Hum::Sort ('ace_sort');
# use Tie::IxHash;

use CGI;
use CGI::Carp qw(warningsToBrowser fatalsToBrowser);

die <<"EOM"
This script "$0" is obsolete.  It used the now unsupported SangerPaths tags
"badger" and "humpub".
EOM
    ;

__END__

{

  my $cache = "$ENV{'DOCUMENT_ROOT'}/tmp/mouse_NOD_clones_TPF.html";

  ($cache) = $cache =~ m|([a-z0-9_/\.]+)|i;

  if ( -M $cache > (1/48) || ! -e $cache ){
    main($cache);
  }
  else {
    open(my $fh, '<', $cache) or die "Failed loading cached page";
    while(<$fh>){
      print $_;
    }
  }

}


sub main {

  my $cached = shift;
  open(my $fh, '>', $cached) or die "Cannot create cached page!";

  my $sw = SangerWeb->new({
      'title'   => 'Mouse NOD clone / Assembly sequencing status',
      'banner'  => qq{<div style='font-family: sans-serif;
                           padding: 10px;
                     margin-bottom: 1em;
                      margin-right: 0.7em;
                        text-align: center;
                        background: #00008B;
                             color: white;
                              size: 90%;'>Clone / Assembly info of the NOD genome<br>
           from 2 NOD (Non-Obese Diabetic) mouse BAC libraries:<br>
           NOD <font size=4 color='#DAD9FE'>[Strain NOD/MrkTac]</font>,
           CHORI-29 <font size=4 color='#DAD9FE'>[Strain NOD/LtJ]</font></div>},
           'inifile' => "$ENV{'DOCUMENT_ROOT'}/Projects/M_musculus-NOD/header.ini",
                          });

  print     $sw->header();
  print $fh $sw->header();

  my $q = CGI->new;

  # test
  #print map { "$_ --> $ENV{$_}<br>" } (keys %ENV);

  print     qq{<center><div style='margin-bottom: 1em'><h6>NA = not available</h6></div>\n};
  print $fh qq{<center><div style='margin-bottom: 1em'><h6>NA = not Available</h6></div>\n};

  print     qq{<div style='margin-right: 1em;'><table width="100%">\n};
  print $fh qq{<div style='margin-right: 1em;'><table width="100%">\n};

  # all NOD clones columns
  my $clone_info = get_all_NOD_clones();

  my ($contig_clone, $tpf_clones) = tpf_contig_clone($clone_info);

  # gap info
  my $clones_followed_by_gap = find_gap('bQ', 'bCN');

  #--------------------------------------------------------------------------------------------
  #   do each tpf clone table: eg, NOD_IDD5.1 (chr. 1) NOD_IDD3 (chr. 3)  NOD_IDD10 (chr. 3)
  #--------------------------------------------------------------------------------------------

  my $header = ['#', 'Clone', 'Project', 'Accession', 'Chr.', 'Library', 'Status', 'Status date'];
  my $cols = @$header;

  my $clones_tpf = [];
  my $count = 0;

  my @sorted_ctgs =  sort { ace_sort($a, $b) } keys %$contig_clone;

  foreach my $ctg_name ( @sorted_ctgs ) {

    $count++;

    # replace chr number with contig_name of a tpf clone (not for non-tpf clone)
        $clone_info->{$_}->[2] = $ctg_name for @{$contig_clone->{$ctg_name}};

    push (@$clones_tpf, @{$contig_clone->{$ctg_name}});

    # add space in between clones of different chromosomes
    push (@$clones_tpf, "space");
  }

  my $caption_tpf = qq{<font color="3723AA"><center>Assembled Clones</center></font>};
  my $rows_tpf = clone_status($q, $cols, $clones_tpf, $clone_info, $clones_followed_by_gap);

  #-----------------------------
  #   do non-TPF clones table
  #-----------------------------
  my $clones = [];

  foreach my $cln ( keys %$clone_info ) {
    if ( !exists $tpf_clones->{$cln} && $clone_info->{$cln}->[3] =~ /^NOD/) {
      push(@$clones, $cln);
    }
    if ( !exists $tpf_clones->{$cln} && $clone_info->{$cln}->[3] =~ /^CHORI-29/) {
      push(@$clones, $cln);
    }
  }

  my $caption_non_tpf = qq{<font color="620E34"><center>Non-assembled Clones</center></font>};
  my $rows_non_tpf = clone_status($q, $cols, $clones, $clone_info);


  #------------------------------
  #  now make one table for all
  #------------------------------

  print     results_table($header, $caption_tpf, $rows_tpf, $caption_non_tpf, $rows_non_tpf);
  print $fh results_table($header, $caption_tpf, $rows_tpf, $caption_non_tpf, $rows_non_tpf);

  print     qq{</table></center>\n};
  print $fh qq{</table></center>\n};

  my $footer =  qq{<div style='text-align: center;
                         background-color: #C1CDCD;
                            margin-bottom: 1em;'>
                 Wellcome Trust Genome Campus, Hinxton, Cambridge, CB10 1SA, UK&nbsp;&nbsp;
                 Tel:+44 (0)1223 834244&nbsp;&nbsp;webmaster\@sanger.ac.uk</div>};

  print     $footer;
  print $fh $footer;

  #print     $sw->footer(); # screws with <div> tag
  #print $fh $sw->footer();

  print qq{</body></html>};

  return;
}

sub get_all_NOD_clones {

  # all NOD clones (ie, some not in tpf_row table)
  my $sth = prepare_track_statement(qq{
        SELECT c.clonename
          , c.chromosome
          , c.libraryname
          , cp.projectname
          , psd.description
          , ps.statusdate
        FROM clone c
          , clone_project cp
          , project_status ps
          , projectstatusdict psd
        WHERE c.clonename = cp.clonename
          AND cp.projectname = ps.projectname
          AND ps.status = psd.id_dict
          AND ps.iscurrent = 1
          AND (c.libraryname like 'CHORI-29%' or c.libraryname like 'NOD%')
          ORDER BY c.chromosome
        });

  $sth->execute;

  my $clone_info = {};
  tie %$clone_info, "Tie::IxHash";

  while (my ($clone, $chromid, $lib, $proj, $desc, $date) = $sth->fetchrow) {

    # rather than "AND psd.description !='Cancelled'" in the query (case sensitivity may cause failure)
    # also filter out bQ480D22, bQ143F13, mmNODBACend and CHORI29_BACend
    # as they are used to close a gap in the genomic B6 mouse project

    if ( lc($desc) eq "cancelled" or
         $clone eq 'bQ480D22'     or
         $clone eq 'bQ143F13'     or
         $clone eq 'mmNODBACend'  or
         $clone eq 'bQ353G8'      or   # do not belong to NOD (cas info)
         $clone eq 'bQ262D11'     or   # do not belong to NOD (cas info)
         $clone eq 'CHORI29_BACend' ){
     next;
    }

    my $proj_info = project_name_to_accession_status( $proj );
    my $acc = $proj_info->{$proj}->[0];
    $acc = "NA" if !$acc;

    if ($clone ne $proj) {
      $proj = qq{<b><font color='blue'>$proj</font></b>};
    }

    my $chromname = chromosome_name($chromid);

    $clone_info->{$clone} = [$proj, $acc, $chromname, $lib, $desc, $date];
  }

  return $clone_info;
}

sub project_name_to_accession_status {

  my $project_name = shift;

  my $sth = prepare_statement(qq{
            SELECT pa.accession
            FROM project_acc pa
            ,    project_dump pd
            ,    sequence s
            WHERE pa.sanger_id=pd.sanger_id
            AND pd.seq_id = s.seq_id
            AND pa.project_name = '$project_name'
            LIMIT 1
            });

  $sth->execute();

  my $acc = $sth->fetchrow;

  my $htgphase = sequence_status($project_name);

  my $proj_acc_phase = {};
  push(@{$proj_acc_phase->{$project_name}}, $acc, $htgphase);

  $sth->finish;

  return $proj_acc_phase;
}

sub chromosome_name {

  # chromosome name chromosome id mapping
  my $chromid = shift;
  my $sth = prepare_track_statement(qq{
       SELECT id_dict, chromosome
       FROM CHROMOSOMEDICT
       WHERE id_dict = ?
       });

  $sth->execute($chromid);

  my $chrom_name = {};
  my ($id, $chromname) = $sth->fetchrow;
  $sth->finish;

  return $chromname;
}


sub sequence_status {

  # id_htgsphase = 1 is unfinished; >1 is finished

  my $proj = shift;
  my $sth = prepare_track_statement(qq{
        SELECT id_htgsphase
            FROM sequence where projectname='$proj'
        ORDER by sv
            DESC
            });

  $sth->execute();
  return $sth->fetchrow; # takes only the first row (most recent: limit 1 not working with oracle?)
}

sub tpf_contig_clone {

  my $clone_info = shift;
  my $sth = prepare_track_statement(qq{
            SELECT tr.contigname
            ,      tr.clonename
            FROM tpf_row tr
            ,    tpf t
            ,    clone c
            WHERE tr.clonename = c.clonename
            AND tr.id_tpf = t.id_tpf
            AND t.iscurrent = 1
            AND (c.libraryname like 'CHORI-29%' or c.libraryname like 'NOD%')
           });

  $sth->execute();

  my $contig_clone    = {};
  my $tpf_clones      = {};
  my $region_unfinished = {};

  while ( my ( $contig, $clone ) = $sth->fetchrow ){

    # this query may pick up clones that are cancelled
    if ( exists $clone_info->{$clone} ){
      push(@{$contig_clone->{$contig}}, $clone);

      $tpf_clones->{$clone} = $contig;
    }
  }
  $sth->finish;

  return $contig_clone, $tpf_clones;
}

sub find_gap {

  my ($bQ, $bCN) = @_;

  my $clones_followed_by_gap = {};

  foreach my $prefix ( $bQ, $bCN){
    my $sth = prepare_track_statement(qq{
          SELECT tr.id_tpfrow tr, tr.clonename
          FROM   tpf_row tr
          ,      clone c
          WHERE  tr.clonename like '$prefix%'
          AND    tr.clonename = c.clonename
          AND    c.speciesname = 'Mouse'
          });

    $sth->execute;

    my ( $next_row, $last_clone );

    while (my ($row, $clone) =  $sth->fetchrow) {

      if ( $next_row and $next_row != $row ){

        #print "GAP\t",$next_row," $last_clone<br>";

        my $gap_info = [];
        $gap_info = fetch_gap_info($next_row);


        $clones_followed_by_gap->{$last_clone} = $gap_info if ref($gap_info) eq "ARRAY";
      }

      # cases where the clone is no long followed by a gap
      if ( exists $clones_followed_by_gap->{$clone} ){
        delete $clones_followed_by_gap->{$clone};
      }

     # print $row, " ----------- $clone<br>";
      $next_row = $row + 1;
      $last_clone = $clone;
    }
  }
  return $clones_followed_by_gap;
}

sub fetch_gap_info {

  my $row = shift;

  my $sth = prepare_track_statement(qq{select length, id_gaptype from tpf_gap where id_tpfrow = $row});
  $sth->execute;

  my $gap_info = [];
  while (my ($length, $gap_type) = $sth->fetchrow) {
    $length = 'unknown' if !$length;

    return my $gap_info = [$length, $gap_type];
  }

  return;
}

sub clone_status {
  my( $q, $cols, $clones, $clone_info, $clones_followed_by_gap ) = @_;

  my $rows = [];
  my $num = 0;

  foreach my $clone ( @$clones ){

    # get external clone name &
    # sequence status (based on id_htgphase of oracle sequence table): unfinished_sequence = 1, finished > 1

    my $ext         = external_clone_name($clone);
    my $proj_info   = project_name_to_accession_status($clone_info->{$clone}->[0]);
    my $seq_status  = $proj_info->{$clone_info->{$clone}->[0]}->[1];
    my $contig_name = $clone_info->{$clone}->[2];

    $num++ if $clone ne "space";

    # another font color for CHORI-29 library
    $clone_info->{$clone}->[3] = qq{<font color="#7210CA">$clone_info->{$clone}->[3]</font>} if $clone_info->{$clone}->[3] =~ "^CHORI";

    # check region separator "space"

    if ( $clone eq "space" ){

      # to separate clones of different chromosomes
      push( @$rows, [qq{<td align="center" colspan="$cols"><font color='white' size=6>SPACE</font></td>}]);
       $num = 0;
    }

    # clones followed by gap
    elsif ( $clones_followed_by_gap and exists $clones_followed_by_gap->{$clone} ){

      my $length   = "Length $clones_followed_by_gap->{$clone}->[0]";
      my $gap_type = "type $clones_followed_by_gap->{$clone}->[1]";

      if ( $num == 1 and $contig_name =~ /^chr/i ){

        # $contig_name here is eg, chr3_NOD_IDD3

        # add a link to AGP file, seq file of the region, embl acc and swap sanger name with external clone name
        $rows = links_to_agp_seq($contig_name, $cols, $rows);
      }

      $rows = links_to_acc_and_swap($seq_status, $clone, $clone_info, $rows, $num, $ext);

      $num++; # increment by 1 for gap
      push( @$rows, [$num, "GAP - ($gap_type) $length"] );
    }

    # overlapping clones
    else {
      if ( $num == 1 and $contig_name =~ /^chr(\d+)/ ){
        $rows = links_to_agp_seq($contig_name, $cols, $rows);
      }
      $rows = links_to_acc_and_swap($seq_status, $clone, $clone_info, $rows, $num, $ext);
    }
  }

  return $rows;
}

sub links_to_agp_seq {

  my ($contig_name, $cols, $rows) = @_;

  my $agp     = $contig_name.".agp";
  my $agp_seq = $agp.".seq";
  my $chk;

  # hard coded html links to contigs of consecutive clones
  my $regionContig_seq = {
      'chr17_NOD_IDD16' => [
          'chr17_NOD_IDD16_Ranks_6-8.seq',
          'chr17_NOD_IDD16_Ranks_10-11.seq',
          ],
          'chr1_NOD_IDD5.1' => [
              'chr1_NOD_IDD5.1_Ranks_1-2.seq',
              'chr1_NOD_IDD5.1_Ranks_4-5.seq',
          ],
          'chr3_NOD_IDD10'  => [
              'chr3_NOD_IDD10_Ranks_5-7.seq',
              'chr3_NOD_IDD10_Ranks_11-13.seq',
          ],
          'chr3_NOD_IDD3'   => [
              'chr3_NOD_IDD3_Ranks_1-2.seq',
              'chr3_NOD_IDD3_Ranks_6-7.seq',
          ],
          'chr11_NOD_IDD4'  => [
              'chr11_NOD_IDD4_Ranks_1-9.seq',
          ]
  };


  if ( -e "$ENV{'DOCUMENT_ROOT'}/Projects/M_musculus-NOD/NOD_AGP/$agp_seq" ){
    $chk = 1;
  }

  if ( $chk ) {
    push( @$rows, [qq{<td bgcolor="F5EFE9" align="center"colspan="$cols" >
                      <font color='#660D1B' size=4><B>$contig_name</B></font>&nbsp;&nbsp;
                      <a target='_new' href='/Projects/M_musculus-NOD/NOD_AGP/$agp'><font size=1>AGP</font></a>&nbsp;
                      <a target='_new' href='/Projects/M_musculus-NOD/NOD_AGP/$agp_seq'><font size=1>Region Sequence</font></a>
                      </td>
                     }
                  ]
        );
  }
  # skip Region Sequence link if region is not yet finished
  else {

    my $seqhref;
    foreach my $seqfile ( @{$regionContig_seq->{$contig_name}} ){
      $seqfile =~ /.+_(Ranks.+)/;
      $seqhref .= "<a target='_new' href='/Projects/M_musculus-NOD/NOD_AGP/$seqfile'>
                   <font size=1>$1</font></a>&nbsp;";
    }

    push( @$rows, [qq{<td bgcolor="F5EFE9" align="center"colspan="$cols" >
                      <font color='#660D1B' size=4><B>$contig_name</B></font>&nbsp;&nbsp;
                      <a target='_new' href='/Projects/M_musculus-NOD/NOD_AGP/$agp'><font size=1>AGP</font></a>&nbsp;
                      $seqhref
                      </td>
                     }
                  ]
        );
  }

  return $rows;
}

sub links_to_acc_and_swap {

  my ($seq_status, $clone, $clone_info, $rows, $num, $ext) = @_;

  # get chrom digit
  my $contig_name = $clone_info->{$clone}->[2];
  if ( $contig_name =~ /^chr(\d+)/ ) {
    $clone_info->{$clone}->[2] = $1;
  }

  # make acc linked to EMBL seq page in ftp site
  clone_seq_link($seq_status, $clone, $clone_info);

  # swap sanger_name with external clone name
  push( @$rows, [$num, $ext, @{$clone_info->{$clone}}] );

  return $rows;
}

sub external_clone_name {

  my $clone = shift;

  my $sth = prepare_track_statement(qq{
                                       SELECT externalname
                                       FROM external_name
                                       WHERE clonename = '$clone'
                                      });

  $sth->execute;

  return $sth->fetchrow;
}

sub clone_seq_link {

  my ($seq_status, $clone, $clone_info) = @_;

  my $ftp = "ftp://ftp.sanger.ac.uk/pub/sequences/mouse";
  my $acc = $clone_info->{$clone}->[1];

  if ( $seq_status == 1 && $acc ne "NA" ){
    $clone_info->{$clone}->[1] = qq{<a href="$ftp/Chr_$clone_info->{$clone}->[2]/unfinished_sequence/$clone" target="_new">$acc</a>};
  }
  elsif ( $seq_status != 1 && $acc ne "NA" ){
    $clone_info->{$clone}->[1] = qq{<a href="$ftp/Chr_$clone_info->{$clone}->[2]/$clone" target="_new">$acc</a>};
  }

  return $clone_info;
}

sub results_table {

    my( $header, @info ) = @_;

    my $col_count = scalar @$header;

    my $t = qq{<table border=1 cellspacing=0 cellpadding=4 width="100%">\n};

    for (my $i = 0; $i < scalar @info; $i = $i + 2 ) {

      $t .= t_row(
          qq{    <th bgcolor="#ccccff" colspan=$col_count>$info[$i]</th>},
         );

      $t .= t_row(
          map { qq{    <th bgcolor="#ccccff" align="left" >$_</th>} } @$header,
          );

      my $count = 1;

      if ( $info[$i+1]->[0] ) {

        foreach my $r (@{$info[$i+1]} ) {

          $count++;
          my $bgcolor = ($count % 2 == 0) ? "#ffffff" : "#D8E0F4";

          my $tr =[];

          # @$r: all the col. info of each clone
          foreach ( @$r ) {

            if ( /^GAP/ ) {
              push(@$tr, qq{    <td bgcolor="#99CCFF" align="center" colspan="$col_count-1"><font color='black' size=3><B>$_</B></font></td>});
            }
            elsif ( /^<td/ ) {
              push(@$tr, qq{    <td bgcolor="white" align="center"><font color='white'><B>$_</B></font></td>});
            }
            else {
              push(@$tr, qq{    <td bgcolor="$bgcolor">$_</td>});
            }
          }

          $t .= t_row(@$tr);
        }
      }
      else {
        $count++;
        my $bgcolor = ($count % 2 == 0) ? "#ffffff" : "#D8E0F4";
        $t .= t_row(qq{    <td bgcolor="$bgcolor" align="center" colspan="$col_count"><font color='black'><B>NA</B></font></td>});
      }
    }

    $t .= qq{</table>\n};

    return $t;
  }

sub t_row { ## no critic (Subroutines::RequireArgUnpacking)
  return qq{  <tr>\n} . join('', map { "$_\n" } @_) . qq{  </tr>\n};
}

__END__

=head1 NAME - mouse_NOD_clones_TPF

=head1 AUTHOR

Ana Code B<email> anacode@sanger.ac.uk

