#!/usr/bin/env perl
# Copyright [2018] EMBL-European Bioinformatics Institute
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


use warnings;


### fetch_assembly_tags_to_misc_features

use strict;
use Hum::Submission ('prepare_statement');
use Hum::Tracking ('intl_clone_name');
use Hum::AnaStatus::Sequence;

use Bio::Otter::Lace::Defaults;

use Bio::EnsEMBL::MiscFeature;
use Bio::EnsEMBL::MiscSet;
use Bio::EnsEMBL::Attribute;

use Bio::Vega::DBSQL::DBAdaptor;
use Bio::Vega::AssemblyTag;

use Getopt::Long 'GetOptions';

$| = 1;

# global
my $mfeats = [];
my $atags  = [];

{
  my ($dataset, $verbose, $do_atag, $do_misc, $update);

  #default
  $do_misc = $do_atag = 1;

  my $help = sub { exec('perldoc', $0) };


  Bio::Otter::Lace::Defaults::do_getopt(
      'ds|dataset=s' => \$dataset,
      'v|verbose'    => \$verbose,
      'update'       => \$update,
      'h|help'       => $help,
      'atag'         => \$do_atag,   # load atag data into assembly_tag / assembly_tagged_contig tables
      # (will eventually become obsolete)
      'misc'         => \$do_misc    # load atag data as misc features (4 tables)
      ) or $help->(); # plus default options

  $help->() unless ( $dataset and ($do_misc or $do_atag) );

  my $client    = Bio::Otter::Lace::Defaults::make_Client();
  my $dset      = $client->get_DataSet_by_name($dataset);
  my $loutre_db = $dset->make_Vega_DBAdaptor;
  my $sliceAd   = $loutre_db->get_SliceAdaptor;
  my $mfeatAd   = $loutre_db->get_MiscFeatureAdaptor;
  my $atagAd    = $loutre_db->get_AssemblyTagAdaptor;

  # need to update assembly_tag data following change of AGP
  delete_old_assembly_tags($loutre_db, $mfeatAd) if $update;

  populate_assembly_tagged_contig_table($loutre_db);

  # fetch acefile with assembly_tag info of clones
  my $clones = $sliceAd->fetch_all('clone');
  prepare_assembly_tag_data($sliceAd, $atagAd, $loutre_db, $clones, $verbose, $do_misc, $do_atag, $dataset);

  if ( $do_misc ){
    $mfeatAd->store(@$mfeats);
    print "Loaded ", scalar @$mfeats, " misc_feats\n";
  }
  if ( $do_atag ){
    update_database($atags, $atagAd);
    print "Loaded ", scalar @$atags, " assembly_tags\n";
  }

}

#--------------------
#    subroutines
#--------------------

sub delete_old_assembly_tags {
  my ($loutre_db, $mfa) = @_;

  my $misc_feat_ids;
  foreach my $code ( qw(atag_CLE atag_CRE atag_Misc atag_Unsure) ) {
    foreach my $mf ( @{$mfa->fetch_all_by_attribute_type_value($code)} ) {
      push(@$misc_feat_ids, $mf->dbID);
    }
  }
  if($misc_feat_ids) {
      my $ids = join(',', @$misc_feat_ids);
      foreach my $t ( qw(misc_feature misc_attrib misc_feature_misc_set) ) {
          my $del_misc_feat = $loutre_db->dbc->prepare(qq{DELETE FROM $t WHERE misc_feature_id in ($ids)});
          $del_misc_feat->execute;
      }
  }
  foreach my $t ( qw(assembly_tag assembly_tagged_contig) ) {
    my $del_atag = $loutre_db->dbc->prepare("DELETE FROM $t");
    $del_atag->execute();
  }
  print STDERR "=== Old assembly_tags deleted ===\n";

  return;
}

sub update_database {

  my ($atags, $atagAd) = @_;

  foreach my $atag ( @$atags ) {
    $atagAd->store($atag);
  }

  return;
}

sub populate_assembly_tagged_contig_table {

  my ($loutre_db) = @_;
  my $sth = $loutre_db->dbc->prepare(q{
    SELECT sr.seq_region_id
    FROM (seq_region sr
          , coord_system cs)
    LEFT JOIN assembly_tagged_contig atc
      ON sr.seq_region_id = atc.seq_region_id
    WHERE cs.coord_system_id = sr.coord_system_id
      AND cs.name = 'contig'
      AND atc.seq_region_id IS NULL
  });
  $sth->execute;

  my @seqids;

  while ( my $id = $sth->fetchrow ){
    push(@seqids, "($id)");
  }
  $sth->finish;

  print STDERR "Found ", scalar @seqids, " clones to update\n\n";

  my $vals = join(',', @seqids);
  exit 0 unless $vals;

  my $insert = $loutre_db->dbc->prepare(qq{INSERT INTO assembly_tagged_contig (seq_region_id) VALUES $vals});
  eval {
    $insert->execute;
  };
  die $@ if $@;

  return;
}

sub prepare_assembly_tag_data {

  my ($sliceAd, $atagAd, $loutre_db, $clones, $verbose, $do_misc, $do_atag, $dataset) = @_;

  foreach my $cl ( @$clones ) {
    $cl->seq_region_name =~ /(.*)\.(\d+)/;

    my $cln_db_ver  = $2;
    my $acc         = $1;
    my $contig_name = $cl->seq_region_name.".".$cl->start.".".$cl->end;
    my $seq;

    eval {
      # turn off warning temporarily
      # Use of uninitialized value in concatenation (.) or string at
      # /nfs/team71/analysis/ck1/SCRIPT_CVS/PerlModules/Hum/AnaStatus/Sequence.pm line 176.
      local $^W = 0;
      $seq = Hum::AnaStatus::Sequence->new_from_accession($acc);
    };

    unless ( $@ ) {
      my $seq_ver =  $seq->sequence_version;
      unless ( $seq_ver ){
        print STDERR "ERROR: $acc has no version in submissions db - cannot update, Investigate!\n";
        next;
      }

      # only update if the version of loutre contig match that of submissions db
      if ( $cln_db_ver eq $seq_ver ) {

        my $dir      = $seq->analysis_directory;
        my $seq_ver  = $seq->sequence_version;
        my $seq_name = $seq->sequence_name;
        my $contig   = $sliceAd->fetch_by_region('contig', $contig_name);
        my $seq_region_id = $sliceAd->get_seq_region_id($contig);

        my $acefile;
        # double check existence of acefile
        if ( -e "$dir/rawdata/$seq_name.humace.ace" ) {
          $acefile = "$dir/rawdata/$seq_name.humace.ace";
        }
        elsif ( -e "$dir/rawdata/$seq_name.humace.ace.gz" ){
          $acefile = "$dir/rawdata/$seq_name.humace.ace.gz";
        }

        if ( $acefile ){
          print STDERR "INFO: updating $acc.$seq_ver: $acefile\n" if $verbose;
          parse_ace($contig, $seq_region_id, $acefile, $loutre_db, $sliceAd, $verbose, $do_misc, $do_atag, $dataset); # create a list of atag objs
        }
        else {
          # external clones: omit
          #print STDERR "No update for $acc.$seq_ver: MISSING  $dir/rawdata/$seq_name.humace.ace\n";
        }
      }
    }
  }

  return;
}

sub parse_ace {

  my ($contig, $seq_region_id, $acefile, $loutre_db, $sliceAd, $verbose, $do_misc, $do_atag, $dataset) = @_;
  my $contig_name       = $contig->seq_region_name;
  my $ctg_seq_region_id = $sliceAd->get_seq_region_id($contig);
  my $ctg_len           = $contig->seq_region_length;
  my $ctg_strand        = $contig->strand;
  $ctg_strand = 1 unless $ctg_strand; # default to 1 if info not available
  my $aceori = $acefile;

  if ($acefile =~ /\.gz$/) {
    $acefile = "gzip -cd $acefile |";
  }

  open my $fh, '<', $acefile || die "Failed to read $acefile";

  my ($info, $seen_lines);

  while ( my $line = <$fh> ) {
    chomp $line;
    $line =~ s/\s+\"$//;  # some have excess white spaces
    $line .= '"';

    # track duplicates
    $seen_lines->{$line}++;
    next if $seen_lines->{$line} > 1;

    my ( $tag_type, $tag_start, $tag_end, $tag_info);

    # omit Type "Oligo"
    if ( $line =~ /Assembly_tags\s*(-|\"-\"|unsure)\s*(\d+)\s*(\d+)\s*\"(.*)\"/i){
      ($1 eq "-" || $1 eq "\"-\"") ? ($tag_type = "Misc") : ($tag_type = $1);

      my $s = $2;
      my $e = $3;

      # convertion for Ensembl/otter_db: starting coord is always smaller, so flip if not so
      #                                  starting coord > end coord means minus strand

      if ( $s > $e ) {
        $tag_start = $e;
        $tag_end   = $s;
        if ( $ctg_strand == -1 ) {
          $ctg_strand = 1;
        }
      } elsif ( $s < $e ) {
        $tag_start  = $s;
        $tag_end    = $e;
      } elsif ( $s == $e ) {
        $tag_start = $tag_end = $s;
        $ctg_strand = 1;        # default setting
      }

      $4 ? ($tag_info = $4) : ($tag_info = "Null");
      $tag_info = trim($tag_info);

      # flag info about unsure tag beyond the length of the contig in contig table of otter db
      # this will be filtered out

      my $skip = 1;
      if ( $tag_type =~ /unsure/i ) {

        if ( $tag_end > $ctg_len ) {
          $skip = 0;
          $info .= "Unsure tag out of bound (contig seq_region_id $ctg_seq_region_id)\n" .
            "\t [tag coord: $tag_end VS contig length: $ctg_len) - SKIPPED\n";
        }
      }

      # filter out unsure tag out of bound
      if (  $skip == 1 ) {
        $info .= "flip\n" if $s>$e;
        $info .= "$ctg_seq_region_id : $tag_type : $ctg_strand : $tag_start : $tag_end : $tag_info\n";

        make_misc_feats_for_atags($contig, $ctg_seq_region_id, $tag_type, $ctg_strand, $tag_start, $tag_end, $tag_info) if $do_misc;
        make_atags($contig, $ctg_seq_region_id, $tag_type, $ctg_strand, $tag_start, $tag_end, $tag_info) if $do_atag;
      }
    }

    if ( $line =~ /^(Clone_\w+_end)\s+(.+)\s+(\d+)/i and $dataset ne "tomato" ) {

      $tag_type   = $1;
      $tag_start  = $3;
      $tag_end    = $3;         # set end value to start value as no end value present
      $tag_info   = $2;
      $ctg_strand = 1;
     # $tag_info   =~ s/\"//g;
      $tag_info   = trim($tag_info);

      # replace internal Sanger name (= $tag_info) with international clone name
      my $name = $tag_info." (Sanger name) ";
      $tag_info = Hum::Tracking::intl_clone_name($tag_info); # info in Oracle Trackings db
      $name .= $tag_info." (intl name)";

      $info .= "$ctg_seq_region_id : $tag_type : $ctg_strand : $tag_start : $tag_end : $tag_info --- [$name]\n" if $verbose;
      make_misc_feats_for_atags($contig, $ctg_seq_region_id, $tag_type, $ctg_strand, $tag_start, $tag_end, $tag_info) if $do_misc;
      make_atags($contig, $ctg_seq_region_id, $tag_type, $ctg_strand, $tag_start, $tag_end, $tag_info) if $do_atag;
    }
  }

  # log/info message
  if ( $verbose ){
    if ($info) {
      print $contig_name." => ". $aceori."\n".$info."\n";
    }
    else {
      print "\nNOTE: ".$contig_name." => ".$aceori." (no assembly_tag data)\n";
    }
  }

  return;
}

sub trim {
  my $st = shift;
  $st =~ s/\\n/ /g;
  $st =~ s/\s{1,}/ /g;
  $st =~ s/\"//g;
  $st =~ s/\.$//;

  return $st;
}

sub make_misc_feats_for_atags {
  my ($contig, $ctg_seq_region_id, $tag_type, $ctg_strand, $tag_start, $tag_end, $tag_info) = @_;

  $tag_type = ucfirst($tag_type);

  my $tag_type_val = {
      'Clone_left_end'  => 'atag_CLE' ,   #133
      'Clone_right_end' => 'atag_CRE',    #134
      'Misc'            => 'atag_Misc',   #135
      'Unsure'          => 'atag_Unsure'  #136
  };

  die "TAG: $tag_type ILLEGAL" unless $tag_type_val->{$tag_type};


  my $mfeat = Bio::EnsEMBL::MiscFeature->new(
      -START  => $tag_start,
      -END    => $tag_end,
      -STRAND => $ctg_strand,
      -SLICE  => $contig
      );

  push(@$mfeats, $mfeat);

  my $atag_set = Bio::EnsEMBL::MiscSet->new(
      -CODE            => $tag_type_val->{$tag_type},
      -NAME            => 'Assembly tag',
      -DESCRIPTION     => $tag_type,
      -LONGEST_FEATURE => 1e6
      );

  # load misc_attribe table
  my $atag_attrib = Bio::EnsEMBL::Attribute->new(
      -VALUE => $tag_info,
      -CODE  => $tag_type_val->{$tag_type},
      -NAME  => $tag_type
      );

  $mfeat->add_MiscSet($atag_set);
  $mfeat->add_Attribute($atag_attrib);

  return;
}

sub make_atags {
  my ($contig, $ctg_seq_region_id, $tag_type, $ctg_strand, $tag_start, $tag_end, $tag_info) = @_;

  my $atag = Bio::Vega::AssemblyTag->new();

#  $atag->seq_region_id($ctg_seq_region_id); # handled by atag adaptor
  $atag->seq_region_start($tag_start);
  $atag->seq_region_end($tag_end);
  $atag->seq_region_strand($ctg_strand);
  $atag->tag_type(ucfirst($tag_type)); # eg, unsure/Unsure
  $atag->tag_info($tag_info);
  $atag->slice($contig);

  push(@$atags, $atag);

  return;
}


__END__


=head1 NAME - fetch_assembly_tags_for_loutre

=head1 SYNOPSIS

Running the script

Eg, fetch_assembly_tags B<-dataset> zebrafish [-verbose][-update]

B<-update>: use when AGP is changed

B<-misc>:   loads assembly_tag data as misc_features to B<misc_set>, B<misc_feature_misc_set>, B<misc_attrib> and B<misc_feature> tables

B<-atag>:   loads assembly_tag data to B<assembly_tag> and B<assembly_tagged_contig> tables

-misc and -atag are turned on by default

=head1 DESCRIPTION

Assembly_tags info of Sanger clones are submitted to EMBL. They are parsed from acefiles kept on disc, eg /lustre/cbi4/work1/humpub/analysis/
The filepaths are kept in sequence.file_path of submissions db.

The Assembly_tags info is shown in AceDB under the Assembly_tags tag of a Sequence object.

This script populates and updates the loutre B<assembly_tag> and B<assemlby_tagged_contig> tables.
All clones in the B<assemlby_tagged_contig> table have the transferred value initially set to "no".
For clones which have assembly_tag data, it will be updated to "yes".

The B<assembly_tagged_contig> table allows quick look up of clones that have assembly_tag info.

In the future, assembly_tag data will all become misc_features.

=head1 AUTHOR

Ana Code B<email> anacode@sanger.ac.uk

