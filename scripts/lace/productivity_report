#!/usr/bin/env perl
# Copyright [2018-2022] EMBL-European Bioinformatics Institute
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


use warnings;


### productivity_report

use strict;
use Bio::Otter::Lace::Defaults;
use Bio::Otter::Server::Config;

{
    my $from;

    my @dataset_name = qw{
        human
        tas_devil
        cat
        chimp
        cow
        zebrafish
        platypus
        mouse
        pig
        gibbon
        chicken
        opossum
        marmoset
        wallaby
        rat
        gorilla
        mus_spretus
        lemur
        dog
        sheep
    };

    my @annotator_names = qw{
        aeb
        af2
        al1
        cas
        clb
        dm4
        erb
        gdr
        gm5
        ib2
        jel
        jla1
        jm12
        jr4
        mh19
        mms
        mpk
        mt4
        sb7
        th2
    };

    my $usage = sub { exec('perldoc', $0) };
    my $split_created_moidified = 0;
    my @annotator_cmdline;
    Bio::Otter::Lace::Defaults::do_getopt(
        'h|help!'       => $usage,
        'dataset=s'     => \@dataset_name,
        'from=s'        => \$from,
        'annotators=s'  => \@annotator_cmdline,
        'split!'        => \$split_created_moidified,
        ) or $usage->();

    unless ($from) {
        # Default to showing last six months
        my ($month, $year) = (localtime)[4,5];
        $month -= 6;
        if ($month < 0) {
            $year--;
            $month += 12;
        }
        $from = sprintf "%4d-%02d", $year + 1900, $month + 1;
    }

    my ($year_from, $month_from) = $from =~ /^(\d{4})-(\d{2})$/
        or die "Failed to parse year and month from '$from'";
        $month_from--;

    my %annotator = ();
    my $restrict_names = 0;

    if (@annotator_cmdline) {
        @annotator_names = @annotator_cmdline;
    }
    if (@annotator_names) {
        $restrict_names = 1;
        foreach my $str (@annotator_names) {
            foreach my $name (split /\W+/, $str) {
                $annotator{$name} = $name;
            }
        }
    }
    @annotator_names = sort keys %annotator;

    my $species_dat = Bio::Otter::Server::Config->SpeciesDat;

    my( @dataset );
    if (@dataset_name) {
        foreach my $name (@dataset_name) {
            my $ds = $species_dat->dataset($name);
            push(@dataset, $ds);
        }
    } else {
        @dataset = @{ $species_dat->datasets };
    }

    my $global_counts = {};

    my @object_types = qw{ gene transcript };

    foreach my $ds (@dataset) {
        my $otter_dba = $ds->otter_dba;

        foreach my $type (@object_types) {
            my $sql = qq{
                SELECT o.stable_id
                  , UNIX_TIMESTAMP(o.created_date)
                  , UNIX_TIMESTAMP(o.modified_date)
                  , a.author_name
                  , o.seq_region_id
                  , o.${type}_id
                FROM $type o
                JOIN ${type}_author oa
                  ON o.${type}_id = oa.${type}_id
                JOIN author a
                  ON oa.author_id = a.author_id
                ORDER BY o.stable_id ASC
                  , o.modified_date ASC
            };
            my $sth = $otter_dba->dbc->prepare($sql);
            $sth->execute;

            my( $stable_id, $created, $modified, $author, $seq_region, $db_id );
            $sth->bind_columns(\$stable_id, \$created, \$modified, \$author, \$seq_region, \$db_id);

            my $counts = {};
            my $prev_stable_id  = '';
            my $prev_seq_region = 0;
            my $prev_modified = 0;
            while ($sth->fetch) {

                if ($prev_stable_id ne $stable_id) {
                    # New gene or transcript
                    $prev_stable_id = $stable_id;
                    $prev_seq_region = 0;
                    $prev_modified = 0;
                }
                elsif ($prev_seq_region) {
                    # Skip edits where the seq_region changed (the result of automated transfer
                    # when changing assemblies) or object wasn't modified (which happens for
                    # transcripts unchanged in a gene).
                    if ($prev_seq_region != $seq_region or $modified == $prev_modified) {
                        $prev_seq_region = $seq_region;
                        $prev_modified = $modified;
                        next;
                    }
                }
                $prev_seq_region = $seq_region;
                $prev_modified = $modified;

                my $action = $created == $modified ? 'created' : 'modified';
                my ($month, $year) = (localtime($modified))[4,5];
                $year += 1900;
                # if ($author eq 'aeb' and $year == 2014 and $month == 10) {
                #     warn join("\t", $stable_id, $db_id, $seq_region, $created, $modified, $action), "\n";
                # }
                $counts->{$author}{$year}{$month}{$stable_id} ||= $action;
            }
            foreach my $author (keys %$counts) {
                my $author_conunts = $counts->{$author};
                foreach my $year (keys %$author_conunts) {
                    my $year_counts = $author_conunts->{$year};
                    foreach my $month (keys %$year_counts) {
                        my $type_counts = $year_counts->{$month};
                        foreach my $action (values %$type_counts) {
                            $global_counts->{$year}{$month}{$author}{$type}{$action}++;
                        }
                    }
                }
            }
        }
    }

    printf "Gene and transcripts in datasets: %s\n", join(", ", sort map { $_->name } @dataset);

    # Author name headers
    my ($author_header, $gene_tsct_header, $created_modified);
    foreach my $name (@annotator_names, 'Total') {
        if ($split_created_moidified) {
            $author_header .= "\t$name\t\t\t";
            $gene_tsct_header .= "\tgene\t\ttsct\t";
            $created_modified .= "\tcre\tmod" x 2;
        }
        else {
            $author_header .= "\t$name\t";
            $gene_tsct_header .= "\tgene\ttsct";
        }
    }
    print "$author_header\n",
        "$gene_tsct_header\n";
    if ($split_created_moidified) {
        print "$created_modified\n";
    }

    my @month_names = qw{
        Jan Feb Mar
        Apr May Jun
        Jul Aug Sep
        Oct Nov Dec
    };
    my $in_month = $month_from;
    foreach my $year (sort {$a <=> $b} keys %$global_counts) {
        next unless $year >= $year_from;
        my $year_counts = $global_counts->{$year};
        foreach my $month (sort {$a <=> $b} keys %$year_counts) {
            if ($month >= $in_month) {
                $in_month = 0;
            }
            else {
                next;
            }
            my $month_counts = $year_counts->{$month};
            my $display_month = $month_names[$month];
            print "$year $display_month";
            my $month_totals = {};
            foreach my $author (@annotator_names) {
                my $author_counts = $month_counts->{$author};
                foreach my $type (@object_types) {
                    my $cre = $author_counts->{$type}{'created'}  || 0;
                    my $mod = $author_counts->{$type}{'modified'} || 0;
                    my $count = $cre + $mod;
                    if ($split_created_moidified) {
                        print "\t$cre\t$mod";
                        $month_totals->{$type}{'created'}  += $cre;
                        $month_totals->{$type}{'modified'} += $mod;
                    } else {
                        print "\t$count";
                        $month_totals->{$type} += $count;
                    }
                }
            }
            if ($split_created_moidified) {
                foreach my $type (@object_types) {
                    my $cre = $month_totals->{$type}{'created'}  || 0;
                    my $mod = $month_totals->{$type}{'modified'} || 0;
                    print "\t$cre\t$mod";
                }
            }
            else {
                foreach my $type (@object_types) {
                    my $count = $month_totals->{$type} || 0;
                    print "\t$count";
                }
            }
            print "\n";
        }
        print "\n";
    }
}


__END__

=head1 NAME - productivity_report

=head1 SYNOPSIS

  productivity_report [-dataset <NAME> [-dataset <NAME>]] -annotator <STRING> > report.txt

=head1 EXAMPLE

    productivity_report -dataset zebrafish -annotator jel,gkl,hks,kj2 > report.txt

=head1 DESCRIPTION

Counts who last modified each of the current genes
in which week.

This can be restriced to one or more datasets, or
one or more annotators, using the B<dataset> and
B<annotator> arguments.

The report is tab-separated text suitable for
importing into a spreadsheet application. Weeks
when no genes were last modified do not appear in
the report. The week is given by the date of the
Monday.

=head1 AUTHOR

Ana Code B<email> anacode@sanger.ac.uk

