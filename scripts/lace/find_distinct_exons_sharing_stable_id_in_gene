#!/usr/bin/env perl
# Copyright [2018] EMBL-European Bioinformatics Institute
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


use warnings;


### find_distinct_exons_sharing_stable_id_in_gene

use strict;
use Bio::Otter::Lace::Defaults;

{
    my( $dataset_name );

    my $usage = sub { exec('perldoc', $0) };
    Bio::Otter::Lace::Defaults::do_getopt(
        'h|help!'       => $usage,
        'dataset=s'     => \$dataset_name,
        ) or $usage->();
    $usage->() unless $dataset_name;
    
    # Client communicates with otter HTTP server
    my $cl = Bio::Otter::Lace::Defaults::make_Client();
    
    # DataSet interacts directly with an otter database
    my $ds = $cl->get_DataSet_by_name($dataset_name);

    my $otter_dba = $ds->get_cached_DBAdaptor;

    my $gene_aptr = $otter_dba->get_GeneAdaptor;
    my $exon_aptr = $otter_dba->get_ExonAdaptor;
    my $stab_aptr = $otter_dba->get_StableIdAdaptor;
    my $gene_id_list = $gene_aptr->list_current_dbIDs;
    
    my $sth = $otter_dba->prepare(q{
        SELECT distinct esid1.exon_id
          , esid1.stable_id
          , esid1.version

        FROM transcript t1
          , exon_transcript et1
          , exon_stable_id esid1
          , exon_stable_id esid2
          , exon_transcript et2
          , transcript t2

        WHERE t1.transcript_id = et1.transcript_id
          AND et1.exon_id = esid1.exon_id
          AND esid1.stable_id = esid2.stable_id
          AND esid2.exon_id = et2.exon_id
          AND et2.transcript_id = t2.transcript_id

          AND t1.gene_id = t2.gene_id
          AND esid1.version != esid2.version
          AND t1.gene_id = ?
          
        ORDER BY stable_id, version
        });
    
    @$gene_id_list = sort {$a <=> $b} @$gene_id_list;
    foreach my $gene_id (@$gene_id_list) {
        $sth->execute($gene_id);
        
        my %distinct_exons = ();
        my $str = '';
        
        while (my ($exon_id, $exon_stable, $exon_version) = $sth->fetchrow) {
            my $exon = $exon_aptr->fetch_by_dbID($exon_id);
            my $list = $distinct_exons{$exon_stable}{exon_hash_key($exon)} ||= [];
            push( @$list, $exon );
            #$str .= sprintf "%9d  %s.%d\n", $exon_id, $exon_stable, $exon_version;
        }

        foreach my $stable (keys %distinct_exons) {
            my $uniq_exons = $distinct_exons{$stable};
            # Give all exons with the same key the same version
            if (keys %$uniq_exons > 1) {
                $str .= "  $stable\n";
                my $keep = 1;
                foreach my $exon_key (keys %$uniq_exons) {
                    my @version_list = sort {$a <=> $b} map { $_->version } @{$uniq_exons->{$exon_key}};
                    $str .= "    $exon_key  (@version_list)\n";
                    if ($keep) {
                        $keep = 0;
                        next;
                    }
                    # Make new stable IDs for exons after the first key
                    my $new_stable = $stab_aptr->fetch_new_exon_stable_id;
                    my $new_version = 1;
                    foreach my $version (@version_list) {
                        print qq{UPDATE exon_stable_id SET stable_id = '$new_stable', version = $new_version },
                            qq{WHERE stable_id = '$stable' and version = $version;\n};
                        $new_version++;
                    }
                }
            }
        }
        print STDERR "\n$gene_id\n$str" if $str;
    }
}


sub exon_hash_key {
    my( $exon ) = @_;
    
    # This assumes that all the exons we
    # compare will be on the same contig
    return sprintf("%6d %6d - %6d %2d <%2d %2d>",
        $exon->seq_region_id,
        $exon->start,
        $exon->end,
        $exon->strand,
        $exon->phase,
        $exon->end_phase);
}



__END__

=head1 NAME - find_distinct_exons_sharing_stable_id_in_gene

=head1 AUTHOR

Ana Code B<email> anacode@sanger.ac.uk

