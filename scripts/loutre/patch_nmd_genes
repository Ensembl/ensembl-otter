#!/usr/bin/env perl
# Copyright [2018-2022] EMBL-European Bioinformatics Institute
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


### patch_nmd_genes

use strict;
use warnings;
use Net::Domain qw{ hostname };
use Try::Tiny;

use Bio::Otter::Lace::Defaults;
use Bio::Vega::DBSQL::DBAdaptor;
use Bio::Vega::SliceLockBroker;
use Bio::Vega::Utils::XML qw{ freeze_thaw_gene };

use Bio::SeqIO;

die "SELECT ... FROM gene_stable_id ... v65";

my $pep_out = Bio::SeqIO->new(
    -FORMAT => 'fasta',
    -FH     => \*STDOUT,
    );

my $time_now = time();

{
    my ($dsname, $dryrun);

    Bio::Otter::Lace::Defaults::do_getopt(
        'dataset=s'     => \$dsname,
        'dryrun'        => \$dryrun,
    );
    
    unless ($dsname) {
        Bio::Otter::Lace::Defaults::show_help();
    }

    my $cl = Bio::Otter::Lace::Defaults::make_Client();

    # For testing, so that we see restricted datasets
    $0 = 'otter';

    my $ds = $cl->get_DataSet_by_name($dsname);
    my $dba = $ds->get_cached_DBAdaptor;
    
    my $list_nmd = $dba->dbc->prepare(q{
        SELECT DISTINCT g.gene_id
        FROM (transcript t
              , transcript_stable_id tsi
              , gene g
              , gene_stable_id gsi
              , seq_region s)
        LEFT JOIN translation tr
          ON (t.transcript_id = tr.transcript_id)
        WHERE t.biotype = 'nonsense_mediated_decay'
          AND g.gene_id = t.gene_id
          AND g.is_current
          AND g.seq_region_id = s.seq_region_id
          AND t.is_current
          AND g.source = 'havana'
          AND tsi.transcript_id = t.transcript_id
          AND gsi.gene_id = g.gene_id
          AND translation_id IS NULL
        ORDER BY s.name
          , t.seq_region_start
    });

    $list_nmd->execute;
    my $gene_count = $list_nmd->rows;

    my $latest_with_translation = $dba->dbc->prepare(q{
        SELECT t.transcript_id
        FROM gene_stable_id gsid
          , transcript t
          , translation tsl
          , transcript_stable_id tsid
        WHERE gsid.gene_id = t.gene_id
          AND t.transcript_id = tsid.transcript_id
          AND t.transcript_id = tsl.transcript_id
          AND tsid.stable_id = ?
        ORDER BY gsid.modified_date DESC limit 1
    });

    my $recovered = 0;
    my $not_recov = 0;
    while (my ($g_dbID) = $list_nmd->fetchrow) {
        if (my $count = recover_coding_region($g_dbID, $dba, $latest_with_translation, $dryrun)) {
            $recovered += $count;
        } else {
            $not_recov++;
        }
    }
    print STDERR "Found $gene_count Genes with nonsense_mediated_decay Transcripts without translations.\n",
      "Found or recovered Translation for $recovered nonsense_mediated_decay Transcripts\n",
      "Leaves $not_recov Genes with 1 or more nonsense_mediated_decay Transcripts missing Translation\n";
}

sub recover_coding_region {
    my ($g_dbID, $dba, $latest_with_translation, $dryrun) = @_;
    my $gene_aptr  = $dba->get_GeneAdaptor;
    my $tsct_aptr  = $dba->get_TranscriptAdaptor;

    my $gene = $gene_aptr->fetch_by_dbID($g_dbID);
    
    # my $gene = freeze_thaw_gene($gene_aptr->fetch_by_dbID($g_dbID));
    # my $tsct_list = $gene->get_all_Transcripts;

    # 
    # # Need to make a fresh transcript array because the old one
    # # is cached inside the TranscriptAdaptor.
    my $tsct_list = [ @{$gene->get_all_Transcripts} ];
    $gene->{'_transcript_array'} = $tsct_list;
    
    my $found_tsl = 0;
    my $already_tsl = 0;
    for (my $i = 0; $i < @$tsct_list; $i++) {
        my $tsct = $tsct_list->[$i];
        next unless $tsct->biotype eq 'nonsense_mediated_decay';
        if ($tsct->translation) {
            printf STDERR "Transcript %s already has translation\n", $tsct->stable_id;
            # print_translation($tsct, $gene->stable_id . "." . $gene->version);
            $already_tsl++;
            next;
        }
        $latest_with_translation->execute($tsct->stable_id);
        
        my ($tsct_dbID) = $latest_with_translation->fetchrow;
        unless ($tsct_dbID) {
            printf STDERR "No previous version of Transcript %s with translation\n", $tsct->stable_id;
            print_gene_info($gene,$tsct,"NOPROT");
            next;
        }
        my $tsct_tsl = $tsct_aptr->fetch_by_dbID($tsct_dbID);
        
        # print_translation($tsct_tsl);
        my $tsl = $tsct_tsl->translation;
        
        # Check exon coords are the same
        my $tsct_exons = $tsct->get_all_Exons;
        my $tsct_tsl_exons = $tsct_tsl->get_all_Exons;
        my $match = @$tsct_exons == @$tsct_tsl_exons ? 1 : 0;
        unless ($match) {
        	print_gene_info($gene,$tsct,"NOMATCH");
            printf STDERR "Most recent previous version of Transcript %s with translation has different number of exons (%d not %d)\n",
                $tsct->stable_id, scalar(@$tsct_tsl_exons), scalar(@$tsct_exons);
            next;
        }
        my $found_start_exon = 0;
        my $found_end_exon = 0;
        for (my $i = 0; $i < @$tsct_exons; $i++) {
            my $ex1 = $tsct_exons->[$i];
            my $ex2 = $tsct_tsl_exons->[$i];
            if ($ex1->seq->seq ne $ex2->seq->seq) {
                $match = 0;
                last;
            }
            if($ex1->phase != $ex2->phase ||
               $ex1->end_phase != $ex2->end_phase) {
	            $ex1->dbID(undef); # remove dbID and adaptor to write new version of exon !!!
	            $ex1->adaptor(undef);
	            $ex1->phase($ex2->phase);
	            $ex1->end_phase($ex2->end_phase);
            }
            
            if ($ex2 == $tsl->start_Exon) {
                $tsl->start_Exon($ex1);
                $found_start_exon = 1;
            }
            if ($ex2 == $tsl->end_Exon) {
                $tsl->end_Exon($ex1);
                $found_end_exon = 1;
            }
        }
        if ($match) {
            printf STDERR "Found matching translation for Transcript %s", $tsct->stable_id;
            if ($found_start_exon and $found_end_exon) {            
                # Dissociate translation from database
                $tsl->dbID(undef);
                $tsl->adaptor(undef);
                $tsct->translation($tsl);

                if ($tsct->translate->seq =~ /\*/) {
                    print STDERR " ... but found stops in translation\n";
                    $tsct->translation(undef);
                    print_gene_info($gene,$tsct,"STOP");
                } else {
                    print STDERR "\n";
                     # Copy the cds start/end not found tags if set
	                foreach(qw/cds_start_NF cds_end_NF/){
	                    if(my ($old_attrib) = @{$tsct_tsl->get_all_Attributes($_)}){
	                        if(my ($attrib) = @{$tsct->get_all_Attributes($_)}){
	                                $attrib->value($old_attrib->value);
	                        } else {
	                            $tsct->add_Attributes($old_attrib);
	                        }
	                    }
	                }
	                print_gene_info($gene,$tsct,"TOCHECK");
                    $found_tsl++;
                    #print_translation($tsct, $gene->stable_id);
                }
            } else {
                print STDERR " ... but failed to find start and end exons\n";
                print_gene_info($gene,$tsct,"NOEXON");
            }
        } else {
        	print_gene_info($gene,$tsct,"NOMATCH");
            printf STDERR "No matching translation for Transcript %s\n", $tsct->stable_id;
        }
    }

    my $locked_ok = 0;
    my $work = sub {
        $locked_ok = 1;
        $gene_aptr->store($gene, $time_now);
    };

    if ( $found_tsl && ! $dryrun ) {
        my $broker = Bio::Vega::SliceLockBroker->new
          (-hostname => hostname(), -author => 'for_uid', -adaptor => $gene_aptr);
        try {
            $broker->lock_create_for_objects(patch_nmd_genes => $gene);
            $broker->exclusive_work($work, 1);
        } catch {
            my $err = $_;
            print STDERR "Store failed for g_dbID=$g_dbID, locked=$locked_ok: $err\n";
        } finally {
            $broker->unlock_all;
        };
    }

    return $found_tsl + $already_tsl;
}

sub print_gene_info {
	my ($gene,$tsct,$tag) = @_;
	my ($gene_name) = @{$gene->get_all_Attributes('name')};
	printf STDERR join(" ",
	                   $gene->slice->seq_region_name,
	                   $gene_name->value,
	                   $gene->stable_id,
	                   $tsct->stable_id,
	                   $tsct->start,
	                   $tsct->end,
	                   $tsct->strand,
	                   $tsct->biotype,
	                   $tsct->status,
	                   $tag)."\n";
}


sub print_translation {
    my ($tsct, $desc) = @_;

    # my $desc = join(' | ', @ele);
    # $pep->id($t_name);
    # $pep->desc($desc);
    # $pep_out->write_seq($pep);

    my $tsl = $tsct->translation;
    my $tsl_pat = sprintf "%s(%d)  %s(%d)",
        $tsl->start_Exon->stable_id || 'undef', $tsl->start,
        $tsl->end_Exon->stable_id || 'undef', $tsl->end;
    
    my $pep = $tsct->translate;
    $pep->id($tsct->stable_id);
    $pep->desc($desc);
    $pep_out->write_seq($pep);
}


__END__

=head1 NAME - patch_nmd_genes

=head1 AUTHOR

James Gilbert B<email> jgrg@sanger.ac.uk

