#!/usr/bin/env perl
# Copyright [2018-2019] EMBL-European Bioinformatics Institute
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


### get_transferred_transcript_sids

use strict;
use warnings;
use Bio::Otter::Lace::Defaults;

{
    my $dataset_name;
    my $from_set;
    my $to_set;
    my $verbose;

    my $usage = sub { exec('perldoc', $0) };
    # This do_getopt() call is needed to parse the otter config files
    # even if you aren't giving any arguments on the command line.
    Bio::Otter::Lace::Defaults::do_getopt(
        'h|help!'       => $usage,
        'dataset=s'     => \$dataset_name,
        'from_set=s'    => \$from_set,
        'to_set=s'      => \$to_set,
        'verbose'       => \$verbose,
        ) or $usage->();
    ($dataset_name and $from_set and $to_set) or $usage->();

    # Client communicates with otter HTTP server
    my $cl = Bio::Otter::Lace::Defaults::make_Client();
    
    # DataSet interacts directly with an otter database
    my $ds = $cl->get_DataSet_by_name($dataset_name);
    
    my $otter_dbc = $ds->get_cached_DBAdaptor->dbc;
    
    my $get_src_ts = $otter_dbc->prepare(q{
        SELECT
               t.transcript_id,
               ta.value,
               gsid.stable_id
          FROM 
               transcript           t
          JOIN transcript_stable_id tsid USING (transcript_id)
          JOIN transcript_attrib    ta   USING (transcript_id)
          JOIN attrib_type          atid USING (attrib_type_id)
          JOIN seq_region           sr   USING (seq_region_id) 
          JOIN gene_stable_id       gsid USING (gene_id)
        WHERE
              atid.code    = 'name'
          AND t.is_current = 1
          AND tsid.stable_id = ?
          AND sr.name = ?
    });
    my $get_new_ts = $otter_dbc->prepare(q{
        SELECT
               t.transcript_id,
               tsid.stable_id,
               gsid.stable_id
        FROM
               transcript           t
          JOIN transcript_stable_id tsid USING (transcript_id)
          JOIN transcript_attrib    ta   USING (transcript_id)
          JOIN attrib_type          atid USING (attrib_type_id)
          JOIN seq_region           sr   USING (seq_region_id)
          JOIN gene_stable_id       gsid USING (gene_id)
        WHERE
              atid.code    = 'name'
          AND ta.value     = ?
          AND sr.name      = ?
          AND t.is_current = 1
    });
    
    while (<>) {
        foreach my $from_tsid (split) {
            $get_src_ts->execute($from_tsid, $from_set);
            my ($from_db_id, $from_name, $from_gsid) = $get_src_ts->fetchrow;
            unless ($from_db_id) {
                warn "No current transcript with stable ID '$from_tsid' in set '$from_set'\n";
                next;
            }
            $get_new_ts->execute($from_name, $to_set);
            my ($to_db_id, $to_tsid, $to_gsid) = $get_new_ts->fetchrow;
            unless ($to_db_id) {
                warn "Cannot find current transcript with name '$from_name' in set '$to_set' ($from_tsid)\n";
                next;
            }
            if ($verbose) {
                printf("%s [%s] => %s [%s] (%s)\n",
                       $from_tsid, $from_gsid,
                       $to_tsid, $to_gsid,
                       $from_name,
                    );
            } else {
                print $to_tsid, "\n";
            }
        }
    }
}




__END__

=head1 NAME

 get_transferred_transcript_sids

=head1 SYNOPSIS

 get_transferred_transcript_sids   \
     --dataset  mouse              \
     --from_set chr17-07           \
     --to_set CHO_IDD1-01          \
   list_of_ts_stable_ids.txt

=head1 DESCRIPTION

Following annotation transfer from a reference set to a haplotype set,
this script looks up the new transcript stable id in the haplotype set
for each given transcript stable id in the reference set.

=head1 OPTIONS

    --dataset    which dataset to connect to
    --from_set   reference sequence set 
    --to_set     haplotype sequence set
    [--verbose]  list full details of source and dest transcript

=head1 AUTHOR

Michael Gray B<email> mg13@sanger.ac.uk

