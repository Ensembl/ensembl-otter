#!/usr/bin/env perl

### clone_annotation_status

use strict;
use warnings;
use Bio::Otter::Lace::Defaults;

{
    # Script no longer in use in production:
    exec('perldoc', $0);

    my $dsname = 'human';
    my $switch = 'get';
    my $chr_name = '';
    my $note_date = '';
    Bio::Otter::Lace::Defaults::do_getopt(
        'get'           => sub { $switch = 'get' },
        'set'           => sub { $switch = 'set' },
        'dataset=s'     => \$dsname,
        'chr=s'         => \$chr_name,
        'date=s'        => \$note_date,
    );
    
    # Client communicates with otter HTTP server
    my $cl = Bio::Otter::Lace::Defaults::make_Client();

    # DataSet interacts directly with an otter database
    my $ds = $cl->get_DataSet_by_name($dsname);
    
    my $loutre_dba = $ds->get_cached_DBAdaptor;
    my $loutre_dbc = $loutre_dba->dbc;

    if ($chr_name and $note_date) {
        get_region_with_sequence_note_before_date($loutre_dbc, $chr_name, $note_date);
    }
    elsif ($switch eq 'set') {
        $loutre_dba->begin_work;
        eval {
            set_clone_annotation_status($loutre_dbc);
        };
        if ($@) {
            $loutre_dba->rollback;
            die $@;
        } else {
            $loutre_dba->commit;
        }
    } else {                                   
        get_clone_annotation_status($loutre_dbc);
    }
}

{
    my %attrib_type_id;

    sub get_annotated_attrib_type_id {
        my ($dbc) = @_;
    
        my $annot = $attrib_type_id{$dbc};
        unless ($annot) {
            my $sth = $dbc->prepare(q{SELECT attrib_type_id FROM attrib_type WHERE code = 'annotated'});
            $sth->execute;
            ($annot) = $sth->fetchrow;
            if ($annot) {
                $attrib_type_id{$dbc} = $annot;
                # warn "Annotated = $annot\n";
            } else {
                die "Can't fetch attrib_type_id for 'annotated' attribute";
            }
        }
        return $annot;
    }
}

sub set_clone_annotation_status {
    my ($dbc) = @_;
    
    my $annot_clone_id_name = {};
    fetch_annotated_clones($dbc, $annot_clone_id_name);
    
    my $list_clones_for_chr = $dbc->prepare(q{
        SELECT clone.name
          , clone.seq_region_id
        FROM seq_region chr
          , seq_region clone
          , assembly chr_asm
          , assembly ctg_asm
        WHERE chr.seq_region_id = chr_asm.asm_seq_region_id
          AND chr_asm.cmp_seq_region_id = ctg_asm.cmp_seq_region_id
          AND ctg_asm.asm_seq_region_id = clone.seq_region_id
          AND chr.coord_system_id = (SELECT coord_system_id FROM coord_system WHERE name = 'chromosome' AND version = 'Otter')
          AND clone.coord_system_id = (SELECT coord_system_id FROM coord_system WHERE name = 'clone')
          AND chr.name = ?
        ORDER BY chr.seq_region_id, chr_asm.asm_start
    });
    
    my $annot_id = get_annotated_attrib_type_id($dbc);
    
    my $insert = $dbc->prepare(q{
        INSERT seq_region_attrib(seq_region_id, attrib_type_id, value)
        VALUES (?, ?, 'T')
    });
    
    while (<>) {
        my ($chr_name, $zone_start, $zone_end) = split;
        $list_clones_for_chr->execute($chr_name);
        my $in_zone = 0;
        while (my ($clone_name, $clone_id) = $list_clones_for_chr->fetchrow) {
            $in_zone = 1 if $clone_name eq $zone_start;
            if ($in_zone) {
                unless ($annot_clone_id_name->{$clone_id}) {
                    printf STDERR "Setting annotated:  $chr_name  $clone_name\n";
                    $insert->execute($clone_id, $annot_id);
                }
                if ($clone_name eq $zone_end) {
                    $in_zone = 0;
                }
            }
        }
    }
}

sub get_clone_annotation_status {
    my ($dbc) = @_;

    my $annot_clone_id_name = {};
    fetch_annotated_clones($dbc, $annot_clone_id_name);
    fetch_annotated_contigs_as_clones($dbc, $annot_clone_id_name);
    
    my $list_clones_in_visible_sets = $dbc->prepare(q{
        SELECT chr.name, clone.seq_region_id
        FROM seq_region chr
          , seq_region clone
          , assembly chr_asm
          , assembly ctg_asm
          , seq_region_attrib atr
        WHERE chr.seq_region_id = chr_asm.asm_seq_region_id
          AND chr_asm.cmp_seq_region_id = ctg_asm.cmp_seq_region_id
          AND ctg_asm.asm_seq_region_id = clone.seq_region_id
          AND chr.seq_region_id = atr.seq_region_id
          AND chr.coord_system_id = (SELECT coord_system_id FROM coord_system WHERE name = 'chromosome' AND version = 'Otter')
          AND clone.coord_system_id = (SELECT coord_system_id FROM coord_system WHERE name = 'clone')
          AND atr.attrib_type_id = (SELECT attrib_type_id FROM attrib_type WHERE code = 'hidden')
          AND atr.value = '0'
        ORDER BY chr.seq_region_id, chr_asm.asm_start
    });
    $list_clones_in_visible_sets->execute;
    
    my ($zone_chr, $zone_start, $zone_end) = ('', '', '');
    while (my ($chr_name, $clone_id) = $list_clones_in_visible_sets->fetchrow) {
        if ($zone_chr ne $chr_name) {
            print join("\t", $zone_chr, $zone_start, $zone_end), "\n"
                if $zone_start;
            $zone_start = $zone_end = '';
            $zone_chr = $chr_name;
        }
        if (my $clone_name = $annot_clone_id_name->{$clone_id}) {
            $zone_end = $clone_name;
            $zone_start = $clone_name unless $zone_start;
        } elsif ($zone_start) {
            print join("\t", $zone_chr, $zone_start, $zone_end), "\n"
                if $zone_start;
            $zone_start = $zone_end = '';            
        }
    }
    if ($zone_start) {
        print join("\t", $zone_chr, $zone_start, $zone_end), "\n";
    }
}

sub fetch_annotated_contigs_as_clones {
    my ($dbc, $annot_clone_id_name) = @_;

    my $annot_id = get_annotated_attrib_type_id($dbc);

    # This is the old place to mark clones as "annotated" - the contig_info/attrib tables
    my $get_contig_annot = $dbc->prepare(q{
        SELECT clone.seq_region_id, clone.name
        FROM contig_info ci
          , contig_attrib ca
          , assembly asm
          , seq_region clone
        WHERE ca.contig_info_id = ci.contig_info_id
          AND ci.seq_region_id = asm.cmp_seq_region_id
          AND asm.asm_seq_region_id = clone.seq_region_id
          AND clone.coord_system_id = (SELECT coord_system_id FROM coord_system WHERE name = 'clone')
          AND ci.is_current = 1
          AND ca.attrib_type_id = ?
          AND ca.value = 'T'
    });
    $get_contig_annot->execute($annot_id);
    
    while (my ($clone_id, $clone_name) = $get_contig_annot->fetchrow) {
        $annot_clone_id_name->{$clone_id} = $clone_name;
    }
}

sub fetch_annotated_clones {
    my ($dbc, $annot_clone_id_name) = @_;
    
    my $annot_id = get_annotated_attrib_type_id($dbc);
    
    # Get the list of clones marked with an annotated attrib
    my $get_clone_annot = $dbc->prepare(q{
        SELECT clone.seq_region_id, clone.name
        FROM seq_region clone
          , seq_region_attrib atr
        WHERE clone.seq_region_id = atr.seq_region_id
          AND atr.attrib_type_id = ?
          AND atr.value = 'T'
    });
    $get_clone_annot->execute($annot_id);
    while (my ($clone_id, $clone_name) = $get_clone_annot->fetchrow) {
        $annot_clone_id_name->{$clone_id} = $clone_name;
    }
}

sub get_region_with_sequence_note_before_date {
    my ($dbc, $chr_name, $date) = @_;
    
    my $sth = $dbc->prepare(q{
        SELECT clone.name
          , sn.seq_region_id
        FROM (assembly chr_asm
          , seq_region ctg
          , seq_region chr
          , seq_region clone
          , assembly ctg_asm)
        LEFT JOIN sequence_note sn
          ON ctg.seq_region_id = sn.seq_region_id
          AND sn.note_time < '2008-09-25'
          AND sn.note LIKE '% %'
        WHERE chr.seq_region_id = chr_asm.asm_seq_region_id
          AND chr_asm.cmp_seq_region_id = ctg.seq_region_id
          AND ctg.seq_region_id = ctg_asm.cmp_seq_region_id
          AND ctg_asm.asm_seq_region_id = clone.seq_region_id
          AND clone.coord_system_id = (SELECT coord_system_id FROM coord_system WHERE name = 'clone')
          AND chr.name = ?
        GROUP BY ctg.seq_region_id
        ORDER BY chr_asm.asm_start ASC
    });
    
    $sth->execute($chr_name);
    
    my $i = 0;
    while (my ($clone_name, $has_note) = $sth->fetchrow) {
        printf "%6d  %3s  %s  %s\n", ++$i, $has_note ? 'ann' : '---', $chr_name, $clone_name;
    }
}

__END__

=head1 NAME - clone_annotation_status

=head1 DESCRIPTION

We used to use this to mark up annotated clones, as described by Steve
Trevanion:

If it helps, then many moons ago I asked if loutre could store the
annotation info in the seq_region_attrib table since it's slightly easier
for us production wise. You ran a script to add them, and in Vega we used
it for a little while. However we reverted to using the contig_attribs
since the seq_region_attribs weren't being kept upto date and we found we
were dumping annotation on clones that Havana had removed the annotated
flag from.


=head1 AUTHOR

James Gilbert B<email> jgrg@sanger.ac.uk

