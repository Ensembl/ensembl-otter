#!/usr/bin/env perl
# Copyright [2018] EMBL-European Bioinformatics Institute
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# Eliminate repetitions in new schema gene names (attributes)

use strict;
use warnings;
use Sys::Hostname;
use Try::Tiny;

use Bio::Vega::Author;
use Bio::Vega::SliceLockBroker;
use Bio::Otter::Lace::Defaults;
use Bio::Otter::Server::Config;
use Bio::EnsEMBL::Utils::Exception qw(warning);

{
    my $dsname   = '';
    my $sqlite   = '';
    my $notsets  = '';
    my $onlysets = '';
    my $change   = 0;    # dry run
    my $ignore_stable = 0;

    Bio::Otter::Lace::Defaults::do_getopt(
        'dataset=s'  => \$dsname,
        'sqlite=s'   => \$sqlite,
        'notsets=s'  => \$notsets,
        'onlysets=s' => \$onlysets,
        'change!'    => \$change,
        'ignore_stable!' => \$ignore_stable,
    );

    if ($dsname and $sqlite) {
        die "specify only one of --dataset <dsname> or --sqlite <path>\n";
    }
    unless ($dsname or $sqlite) {
        die "must specify one of --dataset <dsname> or --sqlite <path>\n";
    }
    if ($ignore_stable and not $sqlite) {
        die "--ignore_stable only supported with --sqlite <path>\n";
    }

    my @not_sets  = $notsets  ? (split(/,/, $notsets))  : ();
    my @only_sets = $onlysets ? (split(/,/, $onlysets)) : ();

    my ($dbc, $change_sub, $group_concat_sub);

    if ($dsname) {

        # Client communicates with otter HTTP server
        my $cl = Bio::Otter::Lace::Defaults::make_Client();

        # DataSet interacts directly with an otter database
        my $ds = Bio::Otter::Server::Config->SpeciesDat->dataset($dsname);

        $dbc = $ds->otter_dba->dbc();

        $change_sub = sub {
            my ($component, $stable_id, $change_sql, $change_to_this) = @_;

            my $author_obj = Bio::Vega::Author->new(-name => $cl->author, -email => $cl->email);
            my $object_ad =
                $component eq 'gene'
                ? $ds->otter_dba->get_GeneAdaptor()
                : $ds->otter_dba->get_TranscriptAdaptor();
            my $object = $object_ad->fetch_by_stable_id($stable_id);

            my $broker = Bio::Vega::SliceLockBroker->new
                (-hostname => hostname,
                 -author => $author_obj,
                 -adaptor => $object_ad);

            my $locked_ok = 0;
            my $work = sub {
                $locked_ok = 1;
                print "EXECUTING: $change_sql\n";
                my $change_sth = $dbc->prepare($change_sql);
                $change_sth->execute();
                return;
            };

            my $ok = try {
                print "Locking $component $stable_id\n";
                $broker->lock_create_for_objects('repair_duplicate_names' => $object);
                $broker->exclusive_work($work, 1);
                1;
            } catch {
                warning(
                    "Cannot rename $component $stable_id to $change_to_this (locked_ok=$locked_ok)\n$_\n"
                    );

                0;
            } finally {
                $broker->unlock_all;
            };
            return $ok;
        };

        $group_concat_sub = sub {
            my ($component) = @_;
            return qq{
                GROUP_CONCAT(CONCAT(o.${component}_id,':',stable_id,':',sr.name,':',o.seq_region_start,':',o.seq_region_end)
                             ORDER BY o.${component}_id DESC )
            };
        };

    } elsif ($sqlite) {

        unless ( -r $sqlite ) {
            die "'$sqlite' not found or not readable.\n";
        }

        $dbc = DBI->connect("dbi:SQLite:dbname=$sqlite", undef, undef, { RaiseError => 1 });
        $dbc or die "Couldn't connect to '$sqlite' [$DBI::errstr]\n";

        $change_sub = sub {
            my ($component, $stable_id, $change_sql, $change_to_this) = @_;
            my $ok = try {
                print "EXECUTING: $change_sql\n";
                my $change_sth = $dbc->prepare($change_sql);
                $change_sth->execute();
            } catch {
                warning(
                    "Cannot rename $component $stable_id to $change_to_this\n$_\n"
                    );

                0;
            };
            return $ok;
        };

        $group_concat_sub = sub {
            my ($component) = @_;
            return qq{
                GROUP_CONCAT(o.${component}_id ||':'|| COALESCE(stable_id, 'ID=' || o.${component}_id) ||':'|| sr.name ||':'|| o.seq_region_start ||':'|| o.seq_region_end)
            };
        };
    }

    foreach my $component ('gene', 'transcript') { # would be neater to do them together, per gene, to fit under one slice_lock row

        print "------- $component ---------\n";

        my $group_concat = $group_concat_sub->($component);
        my $sql = qq{
            SELECT oa.value
              , COUNT(DISTINCT o.${component}_id) cnt
              , ${group_concat}
            FROM ${component}_attrib oa
              , $component o
              , attrib_type at
              , seq_region sr
            WHERE at.code = 'name'
              AND oa.attrib_type_id = at.attrib_type_id
              AND oa.${component}_id = o.${component}_id
              AND o.seq_region_id = sr.seq_region_id
        }
          . ($notsets  ? '  AND sr.name NOT IN (' . join(',', map { "'$_'" } @not_sets) . ")\n"  : '')
          . ($onlysets ? '  AND sr.name     IN (' . join(',', map { "'$_'" } @only_sets) . ")\n" : '')
          . qq{
              AND o.is_current
            GROUP BY oa.value
              , sr.seq_region_id
            HAVING cnt > 1
        };
           # --   AND oa.value rlike '^[A-Z]{1,4}[0-9]{5,9}\.[0-9]{1,2}'

        # print "$sql;\n";  next;

        my $sth = $dbc->prepare($sql);
        $sth->execute();

        while (my ($name, $cnt, $group) = $sth->fetchrow()) {

            # print "$name    $cnt    $group\n";

            print "\n--------------------- $name -------------------------\n";
            my %stid2name = ();
          VECTOR: foreach my $vector (split(/,/, $group)) {
                my ($dbid, $stable_id, $ssname, $start, $end) = split(':', $vector);

                print "\n\nGOT:   $vector\n";
                if (!scalar(keys %stid2name)) {    # first occurence keeps the name
                    $stid2name{$stable_id} = $name;

                    print "LEAVING the name '$name' to $component '$stable_id'\n";
                }
                else {
                    my $change_to_this;
                    if ($change_to_this = $stid2name{$stable_id}) {
                        print "name '$change_to_this' already exists for $stable_id\n";
                        if ($ignore_stable) {
                            print "WARNING: ensure one version is deleted from session.\n";
                        } else {
                            next VECTOR;
                        }
                    }

                    $change_to_this = $name . '_' . (1 + scalar(keys %stid2name));
                    $stid2name{$stable_id} = $change_to_this;

                    my $change_sql = qq{
                        UPDATE ${component}_attrib
                        SET value='$change_to_this'
                        WHERE ${component}_id = $dbid
                        AND   attrib_type_id = (SELECT attrib_type_id FROM attrib_type where code='name')
                    };

                    if ($change) {
                        my $ok = $change_sub->($component, $stable_id, $change_sql, $change_to_this);
                        next VECTOR unless $ok;
                    }
                    else {
                        print "PRETENDING TO EXECUTE: $change_sql\n";
                    }

                }    # if
            }    # foreach vector

        }    # while (each group by name)

        print "\n";

    }    # for genes & transcripts
}

