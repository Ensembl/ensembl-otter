#!/usr/bin/env perl
# Copyright [2018-2022] EMBL-European Bioinformatics Institute
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


### dump_alignments

use strict;
use warnings;

die <<'OBSOLETE'
This script is obsolete because it uses the now-deleted "get_features"
CGI script.  Rewrite it to use "get_gff_features" instead if you need
this functionality.
OBSOLETE
    ;

use Bio::Otter::Lace::Defaults;

{
    my( $dataset_name, $set_name, $ana_type );

    my $usage = sub { exec('perldoc', $0) };
    # This do_getopt() call is needed to parse the otter config files
    # even if you aren't giving any arguments on the command line.
    Bio::Otter::Lace::Defaults::do_getopt(
        'h|help!'       => $usage,
        'dataset=s'     => \$dataset_name,
        'set|chr=s'     => \$set_name,
        'analysis=s'    => \$ana_type,
        ) or $usage->();
    $usage->() unless $dataset_name and $set_name and $ana_type;
    
    # Client communicates with otter HTTP server
    my $cl = Bio::Otter::Lace::Defaults::make_Client();
    
    # DataSet interacts directly with an otter database
    my $ds = $cl->get_DataSet_by_name($dataset_name);
    
    # SequenceSet contains a list of CloneSequence objects
    # in the assembly.
    my $ss = $ds->get_SequenceSet_by_name($set_name);
    $ds->fetch_all_CloneSequences_for_SequenceSet($ss);
    
    foreach my $cs (@{ $ss->CloneSequence_list }) {
        
        # http://wwwdev.sanger.ac.uk:80/cgi-bin/otter/52/get_features?
        #     client    = otter
        #     dataset   = pig
        #     cs        = chromosome
        #     csver     = Otter
        #     name      = 4
        #     type      = chr4-03
        #     analysis  = Uniprot_SW
        #     start     = 46226123
        #     end       = 46296918
        #     kind      = DnaPepAlignFeature%2CSimpleFeature
        
        my $offset = $cs->chr_start - 1;
        
        my $data = $cl->otter_response_content('GET', 'get_features',
            {
                client      => 'dump_alignments',
                dataset     => $ds->name,
                cs          => 'chromosome',
                csver       => 'Otter',
                name        => $cs->chromosome,
                start       => $cs->chr_start,
                end         => $cs->chr_end,
                type        => $set_name,
                analysis    => $ana_type,
                kind        => 'DnaDnaAlignFeature,SimpleFeature',
            }
        );
        
        # Fix coordinates so that they are absolute, not relative.
        $data =~ s{Feature\t(\d+)\t(\d+)}{ join("\t", 'Feature', $offset + $1, $offset + $2 ) }eg;

        print $data;
    }
}




__END__

=head1 NAME - dump_alignments

=head1 AUTHOR
csver       => 'Otter'
James Gilbert B<email> jgrg@sanger.ac.uk

