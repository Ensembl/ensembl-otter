#!/usr/bin/env perl
# Copyright [2018] EMBL-European Bioinformatics Institute
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


### freeze_thaw_genes

use strict;
use warnings;
use Net::Domain qw{ hostname };
# use Algorithm::Diff;

use Bio::Otter::Lace::Defaults;
use Bio::Vega::Transform::XMLToRegion;
use Bio::Vega::Transform::RegionToXML;


{
    my $dsname;

    Bio::Otter::Lace::Defaults::do_getopt(
        'dataset=s'     => \$dsname,
    );
    
    unless ($dsname) {
        Bio::Otter::Lace::Defaults::show_help();
    }

    my $cl = Bio::Otter::Lace::Defaults::make_Client();

    # For testing, so that we see restricted datasets
    $0 = 'otter';

    my $ds = $cl->get_DataSet_by_name($dsname);
    my $dba = $ds->get_cached_DBAdaptor;
    my $gene_aptr = $dba->get_GeneAdaptor;

    foreach my $gsid (@ARGV) {
        my $gene = $gene_aptr->fetch_by_stable_id($gsid);
        my $slice = $gene->feature_Slice;
        $gene = $gene->transfer($slice);
        die("Broken before refactoring of Bio::Vega::Transform::RegionToXML on 2013-07-15.");
        # ...as generate_OtterXML takes no arguments, AND XMLToRegion needs a CoordSystemFactory
        my $before_xml = Bio::Vega::Transform::RegionToXML->new->generate_OtterXML(
            [$slice],
            $dba,
            1,
            [$gene],
            [],
            );
        # print $before_xml;
        my $region = Bio::Vega::Transform::XMLToRegion->new->parse($before_xml);
        my @xml_gene_list = $region->genes;
        unless (@xml_gene_list == 1) {
            die sprintf "Weird.  Put 1 gene into XML but got %d out", scalar @xml_gene_list;
        }
        my $xml_gene = $xml_gene_list[0];
        print Data::Dumper::Dumper($xml_gene);
        die("Broken before refactoring of Bio::Vega::Transform::RegionToXML on 2013-07-15.");
        # ...as generate_OtterXML takes no arguments.
        my $after_xml = Bio::Vega::Transform::RegionToXML->new->generate_OtterXML(
            [$slice],
            $dba,
            1,
            [$xml_gene],
            [],
            );
        printf "$gsid before and after%s match\n", $before_xml eq $after_xml ? '' : ' do not';
        # if ($before_xml ne $after_xml) {
        #     compare_xml($before_xml, $after_xml);
        # }
    }
}

sub compare_xml {
    my ($before, $after) = @_;
    
    my $before_file = write_file("before", $before);
    my $after_file  = write_file("after",  $after);
    
    system('sdiff', $before_file, $after_file);
    unlink($before_file, $after_file);
}

sub write_file {
    my ($root, $xml) = @_;
    
    my $filename = "/tmp/$root-$$.xml";
    
    open my $fh, "> $filename" or die "Can't write to '$filename'; $!";
    print $fh $xml;
    close $fh or die "Error writing to '$filename'; $!";

    return $filename;
}


__END__

=head1 NAME - freeze_thaw_genes

=head1 AUTHOR

James Gilbert B<email> jgrg@sanger.ac.uk

