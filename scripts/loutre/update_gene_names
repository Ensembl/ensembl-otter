#!/usr/bin/env perl
# Copyright [2018] EMBL-European Bioinformatics Institute
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


### update_gene_names

use strict;
use warnings;
use Try::Tiny;
use Data::Dumper;
use Sys::Hostname;

$Data::Dumper::Terse = 1;

use Bio::Otter::Lace::Defaults;
use Bio::Otter::Server::Config;

use Bio::Vega::SliceLockBroker;

use Log::Log4perl qw(:easy);
Log::Log4perl->easy_init;

{
    # Parse gene name + description + gene stable ID input file
    # Search database for genes, and group by seq_region
    # Check that new names will not create duplicates
    # Lock each seq_region and update gene names
    # Commit or rollback on errors
    # Unlock seq_region

    my $usage = sub { exec('perldoc', $0) };
    my $dataset = undef;
    my $warn_up_to_date = 0;
    # This do_getopt() call is needed to parse the otter config files
    # even if you aren't giving any arguments on the command line.
    Bio::Otter::Lace::Defaults::do_getopt(
      'h|help!'     => $usage,
      'dataset=s'   => \$dataset,
      'uptodate!'   => \$warn_up_to_date,
      ) or $usage->();
    $usage->() unless $dataset;

    # DataSet interacts directly with an otter database
    my $ds = Bio::Otter::Server::Config->SpeciesDat->dataset($dataset);
    my $otter_dba = $ds->otter_dba;

    my $sth = $otter_dba->dbc->prepare('
        SELECT ga.value as name
          , g.description
          , g.stable_id
          , g.seq_region_id
        FROM gene g
          , gene_attrib ga
        WHERE g.gene_id = ga.gene_id
          AND ga.attrib_type_id = 4
          AND g.is_current = 1
    ');
    $sth->execute;
    my %current_genes;
    while (my ($old_name, $old_desc, $stable_id, $seq_region_id) = $sth->fetchrow) {
        $current_genes{$stable_id} = {
            old_name        => $old_name,
            old_desc        => $old_desc,
            stable_id       => $stable_id,
            seq_region_id   => $seq_region_id,
        };
    }

    # Parse gene name input file
    my @fields = qw{ stable_id vega_biotype seq_region old_name new_name new_desc };
    my @gene_data;
    while (<>) {
        next if /^#/;
        next if /^\s*$/;
        chomp;
        my @values = split /\t/, $_;
        unless (@values == @fields) {
            die sprintf "Wrong number of fields (got %d, expected %d)\nInvalid line: %s\n",
                scalar @values, scalar @fields, $_;
        }
        my $data = {};
        for (my $i = 0; $i < @fields; $i++) {
            $data->{$fields[$i]} = $values[$i];
        }
        push @gene_data, $data;
    }

    check_for_same_gene_stable_id_more_than_once(\@gene_data);

    my $author_obj = Bio::Vega::Author->new_for_uid;
    
    foreach my $data (@gene_data) {
        my $stable_id = $data->{'stable_id'};
        my $current = $current_genes{$stable_id};
        unless ($current) {
            warn "\nNo current gene: ", Dumper($data);
            next;
        }
        # Do we care if the old_name fields don't match?
        $data->{'old_name'} = $current->{'old_name'};
        $data->{'old_desc'} = $current->{'old_desc'};
        
        if ($data->{'new_name'} eq $data->{'old_name'} and $data->{'new_desc'} eq $data->{'old_desc'}) {
            warn "\nUp to date: ", Dumper($data) if $warn_up_to_date;
            next;
        }
        
        update_gene_name($author_obj, $otter_dba, $data);
    }
}

sub check_for_same_gene_stable_id_more_than_once {
    my ($gene_data) = @_;

    my %seen_stable;
    foreach my $data (@$gene_data) {
        $seen_stable{$data->{'stable_id'}}++
    }
    my @more_than_once = sort {$a cmp $b} grep { $seen_stable{$_} > 1 } keys %seen_stable;
    if (@more_than_once) {
        die "These stable IDs occur more than once in the input:\n",
          map({ "  $_\n" } @more_than_once),
          "Aborting...\n";
    }
    return 0;
}

sub update_gene_name {
    my ($author_obj, $otter_dba, $data) = @_;

    my $gene_aptr = $otter_dba->get_GeneAdaptor;
    my $gene = $gene_aptr->fetch_by_stable_id($data->{'stable_id'});
    $gene->get_all_Attributes('name')->[0]->value($data->{'new_name'});
    $gene->description($data->{'new_desc'});
    unless (grep {$_->value eq $data->{'old_name'}} @{ $gene->get_all_Attributes('synonym') }) {
        # warn "Adding synonym '$data->{old_name}'\n";
        my $syn = Bio::EnsEMBL::Attribute->new(
            -CODE   => 'synonym',
            -VALUE  => $data->{'old_name'},
            );
        $gene->add_Attributes($syn);
    }
    unless ($gene->biotype =~ /pseudo/i) {
        $gene->status('KNOWN');
    }

    my $lock_ok;
    my $work = sub {
        $lock_ok = 1;
        print STDERR "\n";
        $gene_aptr->store($gene);
        return;
    };

    my $broker = Bio::Vega::SliceLockBroker->new
      (-hostname => hostname, -author => $author_obj, -adaptor => $otter_dba);
    try {
        $broker->lock_create_for_objects('update_gene_names' => $gene);
        $broker->exclusive_work($work, 1);
    } catch {
        my $fail_type = $lock_ok ? 'Error saving' : 'Cannot lock region';
        warn "\n$fail_type for: ".Dumper($data)."\n  $_";
    } finally {
        $broker->unlock_all;
    };

    return;
}



__END__

=head1 NAME - update_gene_names

=head1 EXAMPLE

  grep OTTHUMG hgnc_names_to_fix_2013-02-25.txt | ./update_gene_names \
    -dataset human > hgnc_names_to_fix_2013-02-25.log 2>&1

=head1 PARAMETERS

=over 4

=item B<-dataset NAME>

Name of dataset (species) to operate on.

=item B<-uptodate>

Print a warning for every gene whose data is up to date with the data in the file.

=back

=head1 EXAMPLE DATA

The following fields in the tab separated text input file:

  STABLE_ID	VEGA_BIOTYPE	SEQ_REGION	OLD_NAME	NEW_NAME	NEW_DESC

  #Clone based names to update by script
  OTTHUMG00000151795	protein_coding	2	AC010872.2	TDRD15	tudor domain containing 15
  OTTHUMG00000129541	protein_coding	2	AC008074.1	LGALSL	lectin, galactoside-binding-like
  OTTHUMG00000130686	protein_coding	2	C2orf29	CNOT11	CCR4-NOT transcription complex, subunit 11
  OTTHUMG00000163649	protein_coding	5	C5orf44	TRAPPC13	trafficking protein particle complex 13

=head1 AUTHOR

James Gilbert B<email> jgrg@sanger.ac.uk

