#!/usr/bin/env perl
# Copyright [2018-2022] EMBL-European Bioinformatics Institute
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


### repair_ko_gene_ott_ids

use strict;
use warnings;

use Bio::Vega::DBSQL::DBAdaptor;
use Sys::Hostname qw{ hostname };
use Bio::Otter::Lace::Defaults;
use Bio::Vega::SliceLockBroker;

die "SELECT ... FROM gene_stable_id -- v65";

{
    my $dsname = 'mouse';
    my $now = time();
    printf STDERR "Genes will be saved with modified_date of %s\n", scalar(localtime($now));

    Bio::Otter::Lace::Defaults::do_getopt(
        'dataset=s'     => \$dsname,
    );

    my $cl = Bio::Otter::Lace::Defaults::make_Client();
    my $ds = $cl->get_DataSet_by_name($dsname);
    my $dba = $ds->get_cached_DBAdaptor;
    my $gene_aptr = $dba->get_GeneAdaptor;
    my $author = Bio::Vega::Author->new(
        -NAME       => $cl->author,
        -EMAIL      => $cl->email,
        );

    # Find KO genes which have the same Otter ID as
    # older non-KO genes with different transcripts

    my $sql_core = q{
        SELECT g.gene_id
          , gsid.stable_id
          , tsid.stable_id
        FROM gene g
          , gene_stable_id gsid
          , transcript t
          , transcript_stable_id tsid
        WHERE g.gene_id = gsid.gene_id
          AND g.gene_id = t.gene_id
          AND t.transcript_id = tsid.transcript_id
    };
    
    my $get_ko_genes = $dba->dbc->prepare(qq{
        $sql_core
          AND g.is_current = 1
          AND g.source = 'KO'
    });
    
    my $find_previous_genes = $dba->dbc->prepare(qq{
        $sql_core
          AND g.is_current = 0
          AND g.source != 'KO'
          AND gsid.stable_id = ?
    });
    
    my $get_current_non_ko_gene = $dba->dbc->prepare(qq{
        $sql_core
          AND g.is_current = 1
          AND tsid.stable_id = ?
    });
    
    my $get_gene = $dba->dbc->prepare(qq{
        $sql_core
          AND g.gene_id = ?
    });
    
    my $gene_id_stable_tsid = run_gene_tsct_query($get_ko_genes);
    
    foreach my $gene_id (sort {$a <=> $b} keys %$gene_id_stable_tsid) {
        my $gsid      = $gene_id_stable_tsid->{$gene_id}{'stable_id'};
        my $tsid_hash = $gene_id_stable_tsid->{$gene_id}{'transcripts'};
    
        my $old_genes = run_gene_tsct_query($find_previous_genes, $gsid);
        OLD_GENE: foreach my $old_gene_id (sort {$b <=> $a} keys %$old_genes) {
            my $old_tsid_hash = $old_genes->{$old_gene_id}{'transcripts'};
            foreach my $old_tsid (sort keys %$old_tsid_hash) {
                next OLD_GENE if $tsid_hash->{$old_tsid};
            }
            # If we get here, we have found a previous version of this
            # gene which is not a KO gene and shares none of its
            # transcrpt stable IDs
            foreach my $old_tsid (sort keys %$old_tsid_hash) {
                my $current = run_gene_tsct_query($get_current_non_ko_gene, $old_tsid);
                my ($current_gene_id) = keys %$current; # There can only be 1 row from the query
                next unless $current_gene_id;   # Try another transcript dbID

                # Get all the transcript rows for gene
                $current = run_gene_tsct_query($get_gene, $current_gene_id);

                # Check that we have all the transcripts which were in the old gene?
                my $current_gsid = $current->{$current_gene_id}{'stable_id'};
                print STDERR "\n             KO: ", format_gene($gene_id, $gene_id_stable_tsid), "\n",
                               "  Current HAVNA: ", format_gene($current_gene_id, $current), "\n";
            
                # Fetch current gene and KO gene, swap gene stable IDs, and save
                my $ko_gene     = get_gene_on_slice($gene_aptr, $gene_id);
                my $havana_gene = get_gene_on_slice($gene_aptr, $current_gene_id);
                $ko_gene->stable_id($current_gsid);
                printf STDERR "KO gene annotated by %s\n", $ko_gene->gene_author->email;
                if ($ko_gene->is_known) {
                    printf STDERR "Unsetting KNOWN for KO gene\n";
                    $ko_gene->is_known(0);
                }
                $havana_gene->stable_id($gsid);

                my $broker = Bio::Vega::SliceLockBroker->new
                  (-hostname => hostname(), -author => $author, -adaptor => $gene_aptr);

                my $locked_ok = 0;
                my $save = sub {
                    my ($gene) = @_;
                    $locked_ok = 1; # locking is done before $save->(any)
                    $gene_aptr->store($gene, $now);
                    return;
                };
                try {
                    my @gene = ($ko_gene, $havana_gene);
                    $broker->lock_create_for_objects('repair_ko_gene_ott_ids' => @gene);
                    $broker->foreach_object($save, @gene);

                    printf STDERR "Swapped stable IDs to:  KO:%s (%d)  HAVANA:%s (%d)\n",
                            $ko_gene->stable_id,     $ko_gene->dbID,
                        $havana_gene->stable_id, $havana_gene->dbID;
                } catch {
                    die "Failed (locked_ok=$locked_ok) on $current_gene_id: $_";
                } finally {
                    $broker->unlock_all;
                };

                last OLD_GENE;
            }
        }
    }
    
    warn "Now you will need to patch genes with non-current transcripts and visa-versa, and, similarly, exons\n";
}


sub format_gene {
    my ($gene_id, $results_hash) = @_;
    
    my $gsid      = $results_hash->{$gene_id}{'stable_id'};
    my $tsid_hash = $results_hash->{$gene_id}{'transcripts'};
    my $str = "$gsid ($gene_id)\n";
    my $pad = ' ' x 17;
    foreach my $tsid (sort keys %$tsid_hash) {
        $str .= "$pad$tsid\n";
    }
    return $str;
}

sub run_gene_tsct_query {
    my ($sth, @param) = @_;
    
    $sth->execute(@param);
    my $results = {};    
    while (my ($gene_id, $gsid, $tsid) = $sth->fetchrow) {
        $results->{$gene_id}{'stable_id'} = $gsid;
        $results->{$gene_id}{'transcripts'}{$tsid} = 1;
    }
    return $results;
}

# Returns new gene (ie: not attached to database) on shortest possible slice
sub get_gene_on_slice {
    my ($gene_aptr, $dbID) = @_;
    
    my $gene = $gene_aptr->fetch_by_dbID($dbID);
    return $gene;
    # my $slice = $gene->feature_Slice;
    # my $new_gene = $gene->transfer($slice);
    # return $new_gene;
}

__END__

=head1 NAME - repair_ko_gene_ott_ids

=head1 AUTHOR

James Gilbert B<email> jgrg@sanger.ac.uk

