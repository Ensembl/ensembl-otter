#!/usr/bin/env perl
# Copyright [2018-2022] EMBL-European Bioinformatics Institute
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


use strict;
use warnings;

package Bio::Otter::GetScript::OnTheFly;

use base 'Bio::Otter::Utils::GetScript::LocalDB';

sub version { return 'on_the_fly 0.5'; };
sub log_filename { return 'otf_log.txt'; }

sub do_it {
    my ($self) = @_;

    my $args = $self->args;

    $self->SUPER::do_requires;  # just the basics for now

    my ($request_adaptor, $request);
    $self->time_diff_for( 'retrieve_request', sub {
        $request_adaptor = $self->local_db->OTFRequestAdaptor;
        $request = $request_adaptor->fetch_by_logic_name_status($self->arg('gff_source'), 'new');
                          });

    if ($request) {
        $request->status('running');
        $request_adaptor->update($request);
        $self->time_diff_for( 'run_request', sub {
            $self->run_request($request);
                              });
        $request_adaptor->update($request);
        unlink $request->target_file;
        unlink $request->query_file;
    } else {
        $self->log_message('no new OTF request');
    }

    my $features = $self->get_features;
    $self->augment_feature_info($features);
    $self->send_feature_gff($features, 0); # don't set process_gff

    return;
}

sub do_requires {
    my ($self) = @_;
    $self->SUPER::do_requires;
    require Bio::Otter::Lace::OnTheFly::Runner;
    require Bio::Otter::Lace::OnTheFly::Runner::Transcript;
    return;
}

sub run_request {
    my ($self, $request) = @_;
    $self->log_message('got a request');
    $self->do_requires;         # in full this time
    my $transcript   = $self->load_transcript($request);
    my $runner_class = $self->runner_class_from_request($request);
    my $runner = $runner_class->new(
        request         => $request,
        resultset_class => 'Bio::Otter::Lace::OnTheFly::ResultSet::GetScript',
        vega_transcript => $transcript, # ignored unless B:O:L:OTF:Runner::Transcript
        );
    my $result_set = $runner->run;
    $result_set->db_store($self->vega_slice);

    my $n_hits = scalar($result_set->hit_query_ids);
    $request->status('completed');
    $request->n_hits($n_hits);
    $request->raw_result($result_set->raw) if $runner_class eq 'Bio::Otter::Lace::OnTheFly::Runner::Transcript';

    my @missed_hits = $result_set->query_ids_not_hit;
    $self->log_message(sprintf('missed: [%s]', join(',', @missed_hits)));
    $request->missed_hits(\@missed_hits);

    return;
}

sub load_transcript {
    my ($self, $request) = @_;
    return unless $request->transcript_id;

    my $ts_adaptor = $self->local_db->vega_dba->get_TranscriptAdaptor;
    my $ts = $ts_adaptor->fetch_by_dbID($request->transcript_id);

    # ts is in chromosome coords, we want it in region coords now.
    my $slice = $self->vega_slice;
    return $ts->transfer($slice);
}

sub runner_class_from_request {
    my ($self, $request) = @_;
    my $runner = 'Bio::Otter::Lace::OnTheFly::Runner';
    my $logic_name = $request->logic_name;
    return "${runner}::Transcript" if $logic_name =~ /^OTF_TS_/;
    return "${runner}"             if $logic_name =~ /^OTF_/;
    die "Unexpected logic_name '$logic_name'";
}

## no critic (Modules::ProhibitMultiplePackages)

package main;

use Log::Log4perl::Level;

Bio::Otter::GetScript::OnTheFly
    ->new(log4perl => $DEBUG)
    ->run;

exit;

__END__

=head1 AUTHOR

Ana Code B<email> anacode@sanger.ac.uk

