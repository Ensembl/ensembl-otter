#!/usr/bin/env perl
# Copyright [2018] EMBL-European Bioinformatics Institute
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


use strict;
use warnings;

package Bio::Otter::GetScript::File;

use base 'Bio::Otter::Utils::GetScript';

use File::Spec;

sub version { return 'file_get 0.5'; }
sub log_filename { return 'gff_log.txt'; }
sub log_context  {
    my ($self) = @_;
    my $path = $self->require_arg('file_path');
    my ($vol, $dirs, $file) = File::Spec->splitpath($path);
    return "FILE:$file";
}

sub do_it {
    my ($self) = @_;

    my $args   = $self->args;

    $self->do_requires;

    my $path = $args->{file_path};
    open my $file, '<', $path or die "Failed to open file '$path': $!";
    $self->time_diff_for( 'relaying data', sub {
        while (<$file>) { print; }
    } );
    close $file or die "Failed to close file '$path': $!";

    # update the SQLite db
    $self->update_local_db($args->{gff_source}, $path, 1); # process_gff = 1 - check if this script is used in anger.

    # zmap waits for STDOUT to be closed as an indication that all
    # data has been sent, so we close the handle now so that zmap
    # doesn't tell otter about the successful loading of the column
    # before we have the SQLite db updated.
    close STDOUT or die "Error writing to STDOUT; $!";

    return;
}

## no critic (Modules::ProhibitMultiplePackages)

package main;

Bio::Otter::GetScript::File->new->run;

exit;

__END__

=head1 AUTHOR

Ana Code B<email> anacode@sanger.ac.uk

