#!/usr/bin/env perl
# Copyright [2018-2019] EMBL-European Bioinformatics Institute
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


=head1 NAME

finish_vega_creation - script to tweak newly created vega database for attaching to a website

=head1 SYNOPSIS

finish_vega_creation [options]

Options:

    --conffile, --conf=FILE             read script parameters from FILE
                                        (default: conf/Conversion.ini)

    --dbname=NAME                       use Vega database NAME
    --host=HOST                         use Vega database host HOST
    --port=PORT                         use Vega database port PORT
    --user=USER                         use Vega database username USER
    --pass=PASS                         use Vega database password PASS

    --ensemblhost=NAME                  use Ensembl database NAME
    --ensemblport=PORT                  use Ensembl database port PORT
    --ensembluser=USER                  use Ensmebl database user USER
    --ensemblpass=PASS                  use Ensembl database pass PASS
    --ensembldbname=DBNAME              use Ensembl database DBNAME
    --ensemblassembly=STRING            Ensembl assembly to map to

    --vega_release=NUM                  vega release number
    --release_type=STRING               type of release, External
    --no_feature=BOOLEAN                choose to dump *align_features or not
    --live_update                       update mode, ignore unknown sources

    --prune

    --logfile, --log=FILE               log to FILE (default: *STDOUT)
    --logpath=PATH                      write logfile to PATH (default: .)
    -v, --verbose                       verbose logging (default: false)
    -i, --interactive                   run script interactively (default: true)
    -n, --dry_run, --dry                don't write results to database
    -h, --help, -?                      print help (this message)


=head1 DESCRIPTION

This script does a number of jobs:
- updates gene.analysis_id and transcript.analysis_id depending on gene.source
- adds attributes for gene / transcript author and author_email according to source (hard coded)
- deletes transcript synonym attrib types
- sets seq_region.name for chromosomes to that defined by the seq_region_attrib 'vega_name'
- synchronises attribute table with ensembl/misc-scripts/attribute_types/attrib_types.txt
- synchronises external_db table with ensembl/misc-scripts/external_db/external_dbs.txt
- populates exon_stable_id_pool with max value (might be needed for removing duplicate stable IDS)
- patches some biotypes, both due to differences in loutre and setting by annotators (ASB_*)
- adds a meta key entry (genome.assembly_type) if this species has a full genome
- makes sure CV terms are either hidden_remarks and havana_cv attributes (note if there are any new terms
  then we won't know about them unless we are told about them

The first time it is run it creates backup copies of the original tables; then when run
subsequently with the -prune 1 option it restores these tables to their original state. Can
therefore completely reset the database using a combination of -prune 1 -dry-run 1 options

Does a number of data checks which can be seen by running in -dry_run mode and looking for 'WARNING'
in the log file. The script will prompt you to run in dry_run mode if this is the first time it's
been run on a particular database.


=head1 AUTHOR

Steve Trevanion <st3@sanger.ac.uk>

=head1 CONTACT

Post questions to the EnsEMBL development list ensembl-dev@ebi.ac.uk

=cut

use strict;
use warnings;
no warnings 'uninitialized';

use FindBin qw($Bin);
use vars qw($SERVERROOT);

BEGIN {
  $SERVERROOT = "$Bin/../../../..";
  unshift(@INC, "$SERVERROOT/ensembl-otter/modules");
  unshift(@INC, "$SERVERROOT/ensembl/modules");
  unshift(@INC, "$SERVERROOT/ensembl-variation/modules");
  unshift(@INC, "$SERVERROOT/bioperl-live");
}

use Getopt::Long;
use Pod::Usage;
use Data::Dumper;
use Bio::EnsEMBL::Utils::ConversionSupport;
use POSIX qw(strftime);
use Bio::EnsEMBL::Gene;
use Bio::EnsEMBL::Transcript;
use Bio::EnsEMBL::Exon;

$| = 1;

my $support = new Bio::EnsEMBL::Utils::ConversionSupport($SERVERROOT);

# parse options
$support->parse_common_options(@_);
$support->parse_extra_options(
  $support->get_loutre_params(1),
  'currentdbname=s',
  'nobackup',
  'prune',
  'live_update',
);
$support->allowed_params(
  'prune',
  'currentdbname',
  'nobackup',
  'live_update',
  $support->get_common_params,
);

$support->check_required_params(
  'dbname',
  'vega_release',
);

if ($support->param('help') or $support->error) {
  warn $support->error if $support->error;
  pod2usage(1);
}

# ask user to confirm parameters to proceed
$support->confirm_params;

# get log filehandle and print heading and parameters to logfile
$support->init_log;

if ($support->param('release_type' ne 'External')) {
  $support->log_warning("You haven't set \'release_type\' to be \'External\' using prepare_loutre.pl. Please do so before proceeding\n");
  exit;
}

if ($support->param('host') ne $support->param('ensemblhost') ) {
  $support->log_error("Ensembl and Vega databases must be on the same host.\n");
}

# connect to vega database and get adaptors
my $vdba = $support->get_database('ensembl');
my $vsa  = $vdba->get_SliceAdaptor();
my $vaa  = $vdba->get_AnalysisAdaptor();
my $vata = $vdba->get_AttributeAdaptor();
my $vdbh = $vdba->dbc->db_handle;
my $v_dbname = $support->param('dbname');

#get tables from database
# - if there are no backups of the originals make them
# - if this is the first time the script has been run then offer to run in 'dry_run' mode
my @tables = qw(analysis
		gene
		transcript
		gene_attrib
		transcript_attrib
                exon_stable_id_pool
		seq_region_attrib
                simple_feature);
my (%tabs);
my $dbname = $support->param('dbname');
map { $_ =~ s/`//g; $_ =~ s/$dbname.//g; $tabs{$_} += 1; } $vdbh->tables;

foreach my $name (@tables) {
  my $backup_name = 'backup_fv_creation_'.$name;
  if (! exists($tabs{$backup_name})) {
    $vdbh->do("CREATE table $backup_name SELECT * from $name");
  }
}

# undo changes from previous runs of this script
if ($support->param('prune') && $support->user_proceed("\nDo you want to undo all changes from previous runs of this script?")) {
  foreach my $name (@tables) {
    my $backup_name = 'backup_fv_creation_'.$name;
    if (exists($tabs{$backup_name})) {
      $support->log_verbose("Resetting values for table $name\n");
      $vdbh->do("DELETE from $name");
      $vdbh->do("INSERT into $name SELECT * from $backup_name");	
    }
  }
}

##########################################################################
# delete unwanted loutre-derived simple_features                         #
##########################################################################
my %lns_to_stay = map {lc($_),1}
  qw(CpG
     Eponine
     polyA_signal
     polyA_site
     pseudo_polyA
     RSS
     tRNAscan
     polya-seq_signal
     polya-seq_site
   );
my %lns_to_go = map {lc($_),1}
  qw(TATA_box
     EUCOMM_AUTO
     phastCons
     ComparaCons
     evigan_predictions
     NovelLoci
     Yale_Pseudogene
     CRG_RACE_primer
     EUCOMM
   );
my $s = $vdbh->prepare(qq(
                SELECT a.logic_name, a.analysis_id, count(*)
                FROM analysis a, simple_feature sf
                WHERE a.analysis_id = sf.analysis_id
                GROUP BY a.logic_name
));
$s->execute;
my %sf_features;
while (my ($logic_name,$analysis_id,$c) = $s->fetchrow) {
  $sf_features{$logic_name} = $c;
}
my $problem = 0;
foreach my $ln (keys %sf_features) {
  if (! exists($lns_to_stay{lc($ln)}) ) {
    if ( (! exists($lns_to_go{lc($ln)})) && (! $support->param('live_update')) ) {
      $support->log_warning("I don't know what to do with $ln simple features, please help me out\n");
      $problem = 1;
    }
    else {
      $support->log("Will delete $ln simple_features\n");
    }
  }
  else {
    $support->log("Keeping $ln simple_features\n");
  }
}

if ($problem && (! $support->param('live_update'))) {
  if (! $support->user_proceed("There are features with logic names that I don't know what to do with, please look at the logs. Do you really want to proceed?\n")) {
    exit;
  }
  $support->log_warning("There are logic_names that will be kept even though this is not specifically defined\n");
}

if (! $support->param('dry_run')) {
  $support->log("Deleting from simple_feature by analysis_id\n");
  my $c = 0;
  foreach my $ln (keys %lns_to_go) {
    $c += $vdbh->do(qq(DELETE a, sf
                         FROM simple_feature sf, analysis a
                        WHERE a.analysis_id = sf.analysis_id
                          AND a.logic_name = \'$ln\'));
  }
  $support->log("Removed $c simple_features\n");
}

#cleanup any other analysis table entries that might be around
my @orphan_lns_to_go = qw(SubmitTranscript SubmitTranscriptChunk SubmitProteome SubmitContig SubmitChunk SubmitTranslation full_dbsts gc);
my $lns_to_go = join("','",@orphan_lns_to_go);
if (! $support->param('dry_run')) {
  my $c = $vdbh->do(qq(DELETE FROM analysis WHERE logic_name in ('$lns_to_go')));
  $support->log("Delete $c other orphan analysis table entries\n");
}

##########################################################################
# - patch analysis_ids of genes and transcripts according to gene.source #
# - update the chromosome names to match the attrib_type                 #
# - add attributes for author and author_email for genes and transcripts #
##########################################################################

#may well not need to patch analysis_ids if jgrg will do it loutre...

if (! $support->param('dry_run')) {
  #make sure a case difference doesn't ever come back to haunt us later
  $vdbh->do("UPDATE analysis SET logic_name = \'otter\' WHERE logic_name = \'Otter\'");
}

$support->log("\nChecking sources of genes...\n");

#define the logic_name and the display name to use for each gene.source
#also define author name and email - the latter could come out of author_group table ?
#(note that in the final Vega db, GD and KO will use multiple analysis_ids)
my %all_logic_names = (
  'havana' => ['otter',          'Havana',    'vega@sanger.ac.uk'],
  'WU'     => ['otter_external', 'Washu',     'jspieth@watson.wust'],
  'LOF'    => ['otter_lof',      'Havana',    'vega@sanger.ac.uk'],
  'KO'     => ['otter_eucomm',   'Havana',    'vega@sanger.ac.uk'],
  'IRAG'   => ['otter',          'IRAG',      'pig-irag@sanger.ac.uk'],
);

#get all the logic names that are used
my %used_logic_names;
my $sth = $vdbh->prepare(qq(
              SELECT distinct(source)
              FROM gene));
$sth->execute;
while (my ($source) = $sth->fetchrow_array) {
  if (! exists($all_logic_names{$source})) {
#    unless ($source eq 'ensembl') { #uncomment for halfwise
    $support->log_warning("You haven't defined the analysis.logic_name to use with genes of source $source, please fix.\n");
#    }
  }
  else {
    $used_logic_names{$source} = $all_logic_names{$source}[0];
  }
}

#add entries to analysis table
my @logic_names;
foreach my $source (keys %used_logic_names) {
  my $ln =  $used_logic_names{$source};
  if (! grep{ $ln eq $_ } @logic_names ) {
    push @logic_names, $ln;
    my $analysis = new Bio::EnsEMBL::Analysis (
      -program     => "finish_vega_creation",
      -logic_name  => $ln,
    );
    if (! $support->param('dry_run')) {
      if (my $analysis_id = $vaa->store($analysis)) {
	$support->log("...adding analysis object for source $ln\n",1);
      }
      else {
	$support->log_warning("Couldn't store analysis $ln\n");
      }
    }
  }
}

#####################################
# Chromosome names, gene source etc #
#####################################

# Record reference genome errors because we need to find them to determine
# if NoTransRefError should be set.

my %ref_errors = map { $_->{'stable_id'} => 1 }
  @{ $vdbh->selectall_arrayref(qq(
select g.stable_id from gene g join gene_attrib ga1 on g.gene_id = ga1.gene_id join attrib_type at1 on ga1.attrib_type_id = at1.attrib_type_id where at1.code in ('remark','hidden_remark') and ga1.value = 'reference genome error'
),{ Slice => {} }) };

#SQL to update chromosome name
$sth = $vdbh->prepare(qq(
           UPDATE seq_region
           SET    name = ?
           WHERE  seq_region_id = ?
));

#SQL to add non-ref seq_region_attrib
my ($attrib_type_id) = $vdbh->selectrow_array(qq(SELECT attrib_type_id from attrib_type where code = 'non_ref'));
my $sth2 = $vdbh->prepare(qq(INSERT into seq_region_attrib values (?, $attrib_type_id, 1)));

#loop through chromosomes and do the patches
my $chr_length = $support->get_chrlength($vdba,'','',1);
my @chr_sorted = $support->sort_chromosomes($chr_length);
foreach my $chr (@chr_sorted) {
  $support->log("\nRetrieving chromosome $chr...\n");
  my $chrom = $vsa->fetch_by_region('chromosome', $chr);
  my $sr_id = $chrom->get_seq_region_id;
  my $vega_name;
  my @vega_names = @{$chrom->get_all_Attributes('vega_name')};
  if (scalar(@vega_names) > 1) {
    $support->log_warning("Multiple vega_name attributes for loutre chromosome $chr - ".(join ' ', map {$_->value} @vega_names)." - not setting\n",1);
  }
  elsif (! @vega_names) {
    $support->log_warning("No vega_name attribute for loutre chromosome $chr\n",1);
  }
  else {
    my $att = pop @vega_names;
    $vega_name = $att->value;
    if (! $support->param('dry_run')) {
      $support->log("...patching name to $vega_name\n",1);
      $sth->execute($vega_name,$sr_id);
    }
  }

  #add non_ref seq_region_attributes to Vega PATCH chromosomes
  if ( $support->is_patch($chrom) ) {
    $support->log("Adding non-ref seq_region_attrib for patch chromosome $chr\n",1);
    if (! $support->param('dry_run')) {
      $sth2->execute($sr_id);
    }
  }
  #add non_ref seq_region_attributes to Vega Haplotype chromosomes
  if ($chr =~ /MHC|LRC|IDD|LW/i) {
    $support->log("Adding non-ref seq_region_attrib for haplotype/strain chromosome $chr\n",1);
    if (! $support->param('dry_run')) {
      $sth2->execute($sr_id);
    }
  }

  if (! $support->param('dry_run')) {
    $support->log("\nPatching analysis_ids for genes and transcripts...\n",1);

    #SQL to update gene analysis_id
    my $gsth = $vdbh->prepare(qq(
                   UPDATE gene g, analysis a
                   SET    g.analysis_id = a.analysis_id
                   WHERE  g.gene_id = ?
                   AND    a.logic_name = ?
        ));
	
    #SQL to update transcript analysis_id
    my $tsth = $vdbh->prepare(qq(
                   UPDATE transcript t, gene g
                   SET    t.analysis_id = g.analysis_id
                   WHERE  t.gene_id = g.gene_id
                   AND    t.transcript_id = ?
        ));	
	
    #SQL to update source case mismatch
    my $ssth = $vdbh->prepare(qq(
                   UPDATE gene
                   SET    source = ?
                   WHERE  gene_id = ?
        ));	

    #SQL to update gene biotype;
    my $gbsth = $vdbh->prepare(qq(UPDATE gene SET biotype = ? where stable_id = ?));
	
    #loop through genes
    foreach my $gene (@{$chrom->get_all_Genes()}) {
      my $source = $gene->source;
#      next if $source eq 'ensembl'; #halfwise genes
      my $gsid = $gene->stable_id;
      my $gid  = $gene->dbID;
      $support->log_verbose("Studying gene $gsid\n");
      my $gname;
      #cope with no name attribute (although if this happens you're probably in the poo!)
      eval { $gname = $gene->get_all_Attributes('name')->[0]->value; };
      if ($@) {
	$support->log_warning("Gene $gsid doesn't have a name attrib: $@");
	$gname = 'Unknown';
      }
      if ($source ne 'havana') {
        $source = uc($source);
        if($support->param('live_update') and !$used_logic_names{$source}) {
          $support->log_warning("Skipping unknown source '$source' for update");
          next;
        }
        if ($gene->source ne $source) {
          $support->log_warning("Gene $gsid ($gname) has a source of \'".$gene->source."\', patching, but you might want to check the name\n",2);
          $ssth->execute($source,$gid);
        }
      }
      my $old_gln = $gene->analysis->logic_name;
      my $new_ln = $used_logic_names{$source};

      #patch biotype according to ASB_* remark
      my @remarks = @{$gene->get_all_Attributes('remark') || []};
      my @user_set_biotypes = map {$_->value =~ /^ASB_(.+)/; $1} grep {$_->value =~ /^ASB_/} @remarks;
      if (@user_set_biotypes) {
        if (scalar(@user_set_biotypes) > 1) {
          $support->log_warning("There is more than one annotator set biotype for gene $gsid ($gname), check. Not setting\n",1);
        }
        else {
          my $user_biotype = $user_set_biotypes[0];
          my $orig_biotype = $gene->biotype;
          # Only add NoTransRefError if there are no transcripts at all
          # with translations, ie gene biotype not already protein coding.
          if ($user_biotype ne  $orig_biotype) {
            $support->log("Gene $gsid ($gname) biotype changed from $orig_biotype to $user_biotype because of ASB remark\n",1);
            $gbsth->execute($user_biotype,$gsid);
            if($user_biotype eq 'protein_coding' and $ref_errors{$gsid}) {
              $support->log("Adding NoTransRefError to $gsid\n");
              $vata->store_on_Gene($gid,[
                Bio::EnsEMBL::Attribute->new(
                  -CODE => 'NoTransRefError',
                  -NAME => 'No translations due to reference error',
                  -DESCRIPTION => 'This gene is believed to include protein coding transcripts, but no transcript has a translation due to a reference assembly error making specifying the translation impossible.',
                  -VALUE => 1,
                )
              ]);
            }
          }
          else {
            $support->log("Gene $gsid ($gname) - original biotype and ASB set one are the same ($orig_biotype)\n");
          }
        }
      }

      #patch analysis_ids
      if ($new_ln ne $old_gln) {
	if ($gsth->execute($gid,$new_ln)) {
	  $support->log_verbose("Gene $gsid ($gname) logic_name patched from $old_gln to $new_ln\n",2);
	}
      }
      else {
	$support->log_verbose("Gene $gsid ($gname) logic name not changed\n",2);
      }

      # create attributes for author info
      my $gene_attribs = [];

      # author and author_email
      push @{ $gene_attribs }, Bio::EnsEMBL::Attribute->new(
	-CODE => 'author',
	-NAME => 'Author',
	-DESCRIPTION => 'Group responsible for Vega annotation',
	-VALUE => $all_logic_names{$source}[1],
      );
      push @{ $gene_attribs }, Bio::EnsEMBL::Attribute->new(
	-CODE => 'author_email',
	-NAME => 'Author email address',
	-DESCRIPTION => 'Author\'s email address',
	-VALUE => $all_logic_names{$source}[2],
      );
			
      $support->log_verbose("Storing gene attributes for author and author_email.\n", 3);
      $vata->store_on_Gene($gid, $gene_attribs);

      #loop through transcripts
      foreach my $trans (@{$gene->get_all_Transcripts()}){
	my $tsid = $trans->stable_id;
	my $tid  = $trans->dbID;
	my $tname = '';
	
	#identify any transcripts without names
	eval { $tname = $trans->get_all_Attributes('name')->[0]->value; };
	if ($@) {
	  $support->log_warning("Transcript $tsid from gene $gsid ($gname) has no \'name\' transcript_attrib\n",2);
	}
	
	my $old_tln = $trans->analysis->logic_name;
	#patch analysis_ids
	if ($new_ln ne $old_tln) {
	  if ($tsth->execute($tid)) {
	    $support->log_verbose("Transcript $tsid ($tname) logic_name patched from $old_tln to $new_ln\n",2);
	  }
	}
	else {
	  $support->log_verbose("Transcript $tsid ($tname) logic name not changed\n",2);
	}
		
	# create attributes for author info
	my $trans_attribs = [];
	
	# author and author_email
	push @{ $trans_attribs }, Bio::EnsEMBL::Attribute->new(
	  -CODE => 'author',
	  -NAME => 'Author',
	  -DESCRIPTION => 'Group responsible for Vega annotation',
	  -VALUE => $all_logic_names{$source}[1],
	);
	push @{ $trans_attribs }, Bio::EnsEMBL::Attribute->new(
	  -CODE => 'author_email',
	  -NAME => 'Author email address',
	  -DESCRIPTION => 'Author\'s email address',
	  -VALUE => $all_logic_names{$source}[2],
	);
				
	$support->log_verbose("Storing transcript attributes for author and author_email.\n", 3);
	$vata->store_on_Transcript($tid, $trans_attribs);
      }
    }		
  }
}

#####################
# attribs to delete #
#####################

#define tables and attrib codes to delete
my %attribs_to_go = (
  'seq_region_attrib' => [],
  'gene_attrib'       => [],
  'transcript_attrib' => ['synonym'],
);
#do the deletions
foreach my $table (keys %attribs_to_go) {
  foreach my $code (@{$attribs_to_go{$table}}) {
    if (! $support->param('dry_run')) {
      my $r = $vdbh->do(qq(
                  DELETE t
                    FROM attrib_type at, $table t
                   WHERE at.attrib_type_id = t.attrib_type_id
                     AND at.code = \'$code\'
                            ));
      $support->log("\nRemoved $r attribs of type $code from table $table\n");
    }
  }
}

#######################
# exon_stable_id_pool #
#######################

my ($max_id) = $vdbh->selectrow_array(qq(select max(stable_id) from exon));
(my ($prefix,$number)) = $max_id =~ /(\w{7})(\d+)/;
if ( ! $support->param('dry_run')) {
  $vdbh->do(qq(INSERT into exon_stable_id_pool values ($number)));
}


##############
# misc fixes #
##############

my @sql_fixes;
my $release_no = $support->param('vega_release');

#add misc info to meta table
my $date = strftime "%Y-%m", localtime;
my $gene_build = $date.'-Vega';
my $gene_build_date =  strftime "%Y-%m-%d", localtime;

#add date of datafreeze
my $datafreeze =  strftime "%d-%m-%Y", localtime;
push @sql_fixes, "INSERT ignore into meta (species_id,meta_key,meta_value) VALUES (1,\'genebuild.last_geneset_update\',\'$gene_build_date\');\n";
push @sql_fixes, "INSERT ignore into meta (species_id,meta_key,meta_value) VALUES (1,\'genebuild.version\',\'$gene_build\');\n";
push @sql_fixes, "INSERT into meta (meta_key,meta_value) VALUES ('genebuild.level','toplevel'),('transcriptbuild.level','toplevel'),('exonbuild.level','toplevel');\n";
push @sql_fixes, "INSERT ignore into meta (meta_key,meta_value) VALUES (\'initial_release.version\',\'$release_no\');\n"; #needed for blast config
push @sql_fixes, "INSERT ignore into meta (meta_key,meta_value) VALUES (\'ensembl.link\','yes');\n"; # needed for front page hyperlink to e! so might be 'no' occasionally

#if we have a full genome add a meta entry to that effect
my %full_genomes = (
  homo_sapiens         => 1,
  mus_musculus         => 1,
  danio_rerio          => 1,
  rattus_norvegicus    => 1,
  sus_scrofa           => 1,
  pan_troglodytes      => 0,
  canis_familiaris     => 0,
  gorilla_gorilla      => 0,
  macropus_eugenii     => 0,
  sarcophilus_harrisii => 0,
);
(my $species_name) = $vdbh->selectrow_array(qq(
  SELECT meta_value FROM meta WHERE meta_key = 'species.production_name'));
if (! $species_name) {
  $support->log_warning("There is no species.production_name entry in the meta table (should come from pipeline db); this will cause problems later so please add one\n");
}
elsif (! exists $full_genomes{$species_name} ) {
  $support->log_warning("There is no entry in full_genome hash for species $species_name, please add one and check the full_genome meta key\n");
}
elsif ($full_genomes{$species_name}) {
  $support->log("\nInserting meta key for full genome.assembly_type\n");
  push @sql_fixes, "INSERT ignore into meta (meta_key,meta_value) VALUES (\'genome.assembly_type\',\'full\');\n";
}
else {
  $support->log("\nSpecies doesn't have a full genome, no meta key for full genome.assembly_type added\n");
}


#needed for compara (
push @sql_fixes, "INSERT ignore into meta (meta_key,meta_value) VALUES (\'assembly.coverage_depth\',\'high\');\n";
push @sql_fixes, "INSERT ignore into meta (meta_key,meta_value) VALUES (\'genebuild.start_date\',\'$gene_build_date\');\n";

#update case of biotypes of some genes/transcripts for website display purposes
push @sql_fixes, "UPDATE gene SET biotype = 'IG_gene' WHERE biotype = 'ig_gene';\n";
push @sql_fixes, "UPDATE gene SET biotype = 'IG_pseudogene' WHERE biotype = 'ig_pseudogene';\n";
push @sql_fixes, "UPDATE gene SET biotype = 'TEC' WHERE biotype = 'tec';\n";
push @sql_fixes, "UPDATE gene SET biotype = 'macro_lncRNA' where biotype = 'macro_lncrna';\n";
push @sql_fixes, "UPDATE gene SET biotype = 'vaultRNA' where biotype = 'vaultrna';\n";
push @sql_fixes, "UPDATE gene SET biotype = 'snoRNA' where biotype = 'snorna';\n";
push @sql_fixes, qq(UPDATE gene SET biotype = "3prime_overlapping_ncRNA" where biotype = "3'_overlapping_ncrna";\n);
push @sql_fixes, qq(UPDATE gene SET biotype = "bidirectional_promoter_lncRNA" where biotype = "bidirectional_promoter_lncrna";\n);
push @sql_fixes, "UPDATE transcript SET biotype = 'IG_gene' WHERE biotype = 'ig_gene';\n";
push @sql_fixes, "UPDATE transcript SET biotype = 'IG_pseudogene' WHERE biotype = 'ig_pseudogene';\n";
push @sql_fixes, "UPDATE transcript SET biotype = 'TR_pseudogene' WHERE biotype = 'tr_pseudogene';\n";
push @sql_fixes, "UPDATE transcript SET biotype = 'TR_gene' WHERE biotype = 'tr_gene';\n";
push @sql_fixes, "UPDATE transcript SET biotype = 'TEC' WHERE biotype = 'tec';\n";
push @sql_fixes, "UPDATE transcript SET biotype = 'lincRNA' WHERE biotype = 'lincrna';\n";
push @sql_fixes, "UPDATE transcript SET biotype = 'macro_lncRNA' where biotype = 'macro_lncrna';\n";
push @sql_fixes, "UPDATE transcript SET biotype = 'vaultRNA' where biotype = 'vaultrna';\n";
push @sql_fixes, "UPDATE transcript SET biotype = 'snoRNA' where biotype = 'snorna';\n";
push @sql_fixes, "UPDATE transcript SET biotype = 'miRNA' where biotype = 'miorna';\n";
push @sql_fixes, "UPDATE transcript SET biotype = 'piRNA' where biotype = 'pirna';\n";
push @sql_fixes, "UPDATE transcript SET biotype = 'rRNA' where biotype = 'rrna';\n";
push @sql_fixes, "UPDATE transcript SET biotype = 'siRNA' where biotype = 'sirna';\n";
push @sql_fixes, "UPDATE transcript SET biotype = 'snRNA' where biotype = 'snrna';\n";
push @sql_fixes, "UPDATE transcript SET biotype = 'tRNA' where biotype = 'trna';\n";
push @sql_fixes, "UPDATE transcript SET biotype = 'miRNA' where biotype = 'mirna';\n";
push @sql_fixes, "UPDATE transcript SET biotype = 'scRNA' where biotype = 'scrna';\n";
push @sql_fixes, qq(UPDATE transcript SET biotype = "3prime_overlapping_ncRNA" where biotype = "3'_overlapping_ncrna";\n);
push @sql_fixes, qq(UPDATE transcript SET biotype = "bidirectional_promoter_lncRNA" where biotype = "bidirectional_promoter_lncrna";\n);

#update some statuses
push @sql_fixes, "UPDATE gene SET status = 'NOVEL' WHERE biotype = 'processed_transcript' AND status = 'UNKNOWN';\n";
push @sql_fixes, "UPDATE gene SET status = NULL WHERE biotype in ('processed_pseudogene','pseudogene','transcribed_processed_pseudogene','transcribed_unitary_pseudogene','transcribed_unprocessed_pseudogene','unprocessed_pseudogene','unitary_pseudogene','translated_processed_pseudogene','translated_unprocessed_pseudogene','IG_pseudogene','TR_pseudogene');\n";
push @sql_fixes, "UPDATE transcript SET status = NULL WHERE status = 'UNKNOWN';\n";
push @sql_fixes, "UPDATE gene SET status = NULL WHERE status = 'UNKNOWN';\n";
push @sql_fixes, "UPDATE gene SET status = 'NOVEL' WHERE status = 'PUTATIVE' and biotype = 'protein_coding';\n";


#misc fix for repeat features
push @sql_fixes, "DELETE from repeat_feature where repeat_start < 1;\n";
push @sql_fixes, "DELETE from repeat_feature where repeat_end < 1;\n";

#fix for ncbi blast index naming:
push @sql_fixes, qq(INSERT into meta (SELECT '', 1, 'repeat.analysis', lower(a.logic_name) FROM analysis a, repeat_feature rf WHERE a.analysis_id = rf.analysis_id GROUP BY lower(a.logic_name)));

#set all logic_names to be lowercase
push @sql_fixes, "UPDATE analysis set logic_name = lower(logic_name);\n";

#fix schema for author_group
push @sql_fixes, "UPDATE author_group SET group_email=NULL WHERE group_email='';\n";

# set LOF gene and transcript statuses to PUTATIVE
push @sql_fixes, "UPDATE gene SET status='PUTATIVE' WHERE source='LOF';\n";
push @sql_fixes, "UPDATE transcript t JOIN gene g using (gene_id) SET t.status='PUTATIVE' WHERE g.source='LOF';\n";

#hack - delete 'not for Vega' transcript_attribs on LOF genes
push @sql_fixes, "DELETE ta FROM gene g, transcript t, transcript_attrib ta WHERE g.gene_id = t.gene_id AND t.transcript_id = ta.transcript_id AND g.source = 'LOF'AND ta.value = 'not for VEGA';\n";

#CV terms from loutre are always 'remarks' but we want
#i) some of them as 'hidden_remarks' so as to not show them at all
$sth = $vdbh->prepare(qq(SELECT attrib_type_id from attrib_type where code = \'remark\'));
$sth->execute;
my ($rem_at) = $sth->fetchrow_array;
$sth = $vdbh->prepare(qq(SELECT attrib_type_id from attrib_type where code = \'hidden_remark\'));
$sth->execute;
my ($hidden_rem_at) = $sth->fetchrow_array;
my @hidden_gene_attribs = ('not for VEGA','confirm experimentally','annotation in progress','EnsEMBL merge exception','EnsEMBL merge exception');
push @hidden_gene_attribs, 'fragmented mixed strand locus'; #this is not a CV term but we don't want to show it
$sth = $vdbh->prepare(qq(SELECT value from gene_attrib where value like 'ASB\\_%' group by value));
$sth->execute;
while (my ($value) = $sth->fetchrow_array) {
  push @hidden_gene_attribs, $value;
}
my $string = join ",",(map { $vdbh->quote($_) } @hidden_gene_attribs);
push @sql_fixes, "UPDATE gene_attrib set attrib_type_id = $hidden_rem_at where attrib_type_id = $rem_at and value in ($string);\n";
my @hidden_trans_attribs = ('NMD likely if extended','Genoscope mRNA only','not for VEGA','confirm experimentally','QC splicing correct');
$string = join ",",(map {$vdbh->quote($_) } @hidden_trans_attribs);
push @sql_fixes, "UPDATE transcript_attrib set attrib_type_id = $hidden_rem_at where attrib_type_id = $rem_at and value in ($string);\n";

#(ii) ones that are visible have a different attrib_type
$sth = $vdbh->prepare(qq(SELECT attrib_type_id from attrib_type where code = \'havana_cv\'));
$sth->execute;
my ($havana_cv) = $sth->fetchrow_array || 0;
my @cv_gene_attribs = ('semi-processed','retrogene','reference genome error','orphan','ncRNA host','fragmented locus','overlapping locus');
$string = join ",",(map { $vdbh->quote($_) } @cv_gene_attribs);
push @sql_fixes, "DELETE from gene_attrib where attrib_type_id = $hidden_rem_at and value in ($string);\n"; #to deal with duplicates
push @sql_fixes, "UPDATE gene_attrib set attrib_type_id = $havana_cv where attrib_type_id = '$rem_at' and value in ($string);\n";
my @cv_trans_attribs = ('NAGNAG_splice_site','alternative_5_UTR','alternative_3_UTR','non_canonical_U12','non_canonical_conserved','non_canonical_genome_sequence_error','non_canonical_polymorphism','non_canonical_TEC','non_canonical_other','NMD_exception','cds_start_NF','cds_end_NF','non_ATG_start','upstream_uORF','overlapping_uORF','seleno','upstream_ATG','downstream_ATG','RP supported TIS','retained intron first','retained intron final','retained intron CDS','bicistronic','not_best-in-genome_evidence','not organism-supported','non-submitted evidence','low sequence quality','inferred transcript model','inferred exon combination','dotter confirmed','RNA-Seq supported only','CAGE_supported_TSS','readthrough','miRNA','piRNA','rRNA','snRNA','siRNA','snoRNA','tRNA',"3' nested supported extension","3' standard supported extension","454 RNA-Seq supported","5' nested supported extension","5' standard supported extension",'polyAseq supported extension','RNA-Seq supported only','RNA-Seq supported partial','nested 454 RNA-Seq supported');
$string = join ",",(map { $vdbh->quote($_) } @cv_trans_attribs);
push @sql_fixes, "DELETE from transcript_attrib where attrib_type_id = $hidden_rem_at and value in ($string);\n"; #to deal with duplicates
push @sql_fixes, "UPDATE transcript_attrib set attrib_type_id = $havana_cv where attrib_type_id = '$rem_at' and value in ($string);\n";

# EnsEMBL/Havana differ on what they think is the correct biotype.
push @sql_fixes, qq(UPDATE gene SET biotype = "3prime_overlapping_ncRNA" where biotype = "3'_overlapping_ncrna";\n);

#analysis update for vega_update
if ($support->param('live_update')) {
  push @sql_fixes, "UPDATE analysis set logic_name = \'otter_update\' where logic_name = \'otter\';\n";
  push @sql_fixes, "UPDATE analysis set logic_name = \'otter_lof_update\' where logic_name = \'otter_lof\';\n";
}

#########
# stats #
#########

# Generate stats that can be into the meta table so that the webcode can show them
# (where we store them will change, but this needs a schema change from core,
# this is unlikely to happen before e72)
my %update_stats;
if ($support->param('live_update')) {
  my $current_dbname = $support->param('currentdbname');
  my $sql = qq(
      SELECT g.source, count(*)
        FROM gene g
             LEFT JOIN $current_dbname.gene g2 ON g.stable_id = g2.stable_id
       WHERE g2.stable_id IS NOT null
       GROUP BY g.source);
  my $sth = $vdbh->prepare($sql);
  $sth->execute;
  while (my ($source, $c) = $sth->fetchrow_array) {
    $update_stats{'update'}->{$source} = $c;
  }
  $sql = qq(
      SELECT g.source, count(*)
        FROM gene g
             LEFT JOIN $current_dbname.gene g2 ON g.stable_id = g2.stable_id
       WHERE g2.stable_id IS null
       GROUP BY g.source);
  $sth = $vdbh->prepare($sql);
  $sth->execute;
  while (my ($source, $c) = $sth->fetchrow_array) {
    $update_stats{'new'}->{$source} = $c;
  }
}

foreach my $type (keys %update_stats) {
  while (my ($source,$count) = each %{$update_stats{$type}}) {
    $source = $source . '_' . $type;
    push @sql_fixes, "INSERT into meta (meta_key,meta_value) VALUES (\'$source\',\'$count\');\n";
  }
}


if (! $support->param('dry_run')) {
  $support->log("\nFixing meta table, updating gene / transcript types\n");
  foreach my $fix (@sql_fixes) {
    eval {
      if (my $r = $vdbh->do("$fix")) {
	if ($r eq '0E0') {
	  $support->log("No rows affected for $fix",2);
	}
	else {
	  $support->log("Updated $r rows for $fix",1);
	}
      }
      else {
	$support->log("Updated $r rows for $fix");
	if ($fix =~ /expressed_pseudogene/) {
	  $support->log_warning("Please refer to Havana - should these be processed or unprocessed?\n");
	}
      }
    };
    if ($@) {
      $support->log_warning("Failed fix: $fix $@"); 
    }
  }
}

if ($support->param('dry_run')) {
  $support->log("\nNo changes made to database since this is a dry run\n");
}

if ( ! $support->param('dry_run')) {

  #update attribute table
  my $options = $support->create_commandline_options({
    'allowed_params' => 1,
    'exclude' => ['prune','currentdbname','nobackup','live_update'],
    'replace' => {
      'interactive' => 0,	
      'logfile'     => 'finish_vega_creation_update_attributes.log',
    }
  });
  $support->log("\nUpdating attrib_type table for ".$support->param('dbname')."...\n");
    system("$Bin/../update_attributes.pl $options") == 0
    or $support->log_warning("Error running update_attributes.pl: $!");


  #update external db table
  $options = $support->create_commandline_options({
    'allowed_params' => 1,
    'exclude' => ['prune','currentdbname','nobackup','live_update'],
    'replace' => {
      'interactive' => 0,	
      'logfile'     => 'finish_vega_creation_update_external_dbs.log',
    }
  });
  $support->log("\nUpdating external_db table on ".$support->param('dbname')."...\n");
    system("$Bin/../xref/update_external_dbs.pl $options") == 0
    or $support->log_warning("Error running update_external_dbs.pl: $!");

}

$support->finish_log;
