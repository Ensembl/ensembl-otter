#!/usr/bin/env perl
# Copyright [2018] EMBL-European Bioinformatics Institute
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


=head1 NAME

compare_databases - compare tables and entries in tables between two databases

=head1 SYNOPSIS

compare_databases [options]

General options:
    --conffile, --conf=FILE             read parameters from FILE
                                        (default: conf/Conversion.ini)

    --dbname, db_name=NAME              use database NAME
    --host, --dbhost, --db_host=HOST    use database host HOST
    --port, --dbport, --db_port=PORT    use database port PORT
    --user, --dbuser, --db_user=USER    use database username USER
    --pass, --dbpass, --db_pass=PASS    use database passwort PASS
    --logfile, --log=FILE               log to FILE (default: *STDOUT)
    --logpath=PATH                      write logfile to PATH (default: .)
    --logappend, --log_append           append to logfile (default: truncate)
    -i, --interactive=0|1               run script interactively (default: true)
    -n, --dry_run, --dry=0|1            don't write results to database
    -h, --help, -?                      print help (this message)

Specific options:

	  --anotherdbname=NAME              master schema name

=head1 DESCRIPTION

Use this script to compare two databases. Simply compares each table, reporting the presence /
abscence of a particular table, or any differences in the number of entries for that table in
the two databases.


=head1 AUTHOR

Steve Trevanion <st3@sanger.ac.uk>

=head1 CONTACT

Post questions to the EnsEMBL development list ensembl-dev@ebi.ac.uk

=cut

use strict;
use warnings;
no warnings 'uninitialized';

use FindBin qw($Bin);
use vars qw($SERVERROOT);

BEGIN {
    $SERVERROOT = "$Bin/../../../..";
    unshift(@INC, "$SERVERROOT/ensembl/modules");
    unshift(@INC, "$SERVERROOT/bioperl-live");
}

use Getopt::Long;
use Pod::Usage;
use Bio::EnsEMBL::Utils::ConversionSupport;
use Data::Dumper;

$| = 1;

our $support = new Bio::EnsEMBL::Utils::ConversionSupport($SERVERROOT);

# parse options
$support->parse_common_options(@_);
$support->parse_extra_options(
	'anotherdbname=s',
);
$support->allowed_params(
	$support->get_common_params,
	'anotherdbname',
);

$support->check_required_params(
	'anotherdbname',
	'dbname',
	'host',
	'pass',
	'port',
);

if ($support->param('help') or $support->error) {
    warn $support->error if $support->error;
    pod2usage(1);
}

$support->param('anotherhost',$support->param('host'));
$support->param('anotherport',$support->param('port'));
$support->param('anotherpass',$support->param('pass'));
$support->param('anotheruser',$support->param('user'));

# ask user to confirm parameters to proceed
$support->confirm_params;

# get log filehandle and print heading and parameters to logfile
$support->init_log;

# connect to databases and get adaptors
my $dba1 = $support->get_database('ensembl');
my $dbh1 = $dba1->dbc->db_handle;
my $dba2 = $support->get_database('ensembl','another');
my $dbh2 = $dba2->dbc->db_handle;

#get tables from each database and compare
my (%tabs, %tabs1, %tabs2);
map { $_ =~ s/`//g; $tabs{$_} += 1; $tabs1{$_} = 1} $dbh1->tables;
map { $_ =~ s/`//g; $tabs{$_} += 2; $tabs2{$_} = 1} $dbh2->tables;

my @extra   = sort grep { $tabs{$_} == 2 } keys %tabs;
my @missing = sort grep { $tabs{$_} == 1 } keys %tabs;

$\ = "\n";

if (@extra) {
	$support->log_warning("You have extra tables in database ".$support->param('anotherdbname').":");
	my $tables = join "\n", @extra;
	$support->log("$tables\n");
}

if (@missing) {
	$support->log_warning("You have tables missing from database ".$support->param('anotherdbname').":");
	my $tables = join "\n", @missing;
	$support->log("$tables\n");
}

#count entries in each table
foreach my $table1 (keys %tabs1) {
	my ($c) = $dbh1->selectrow_array(qq(select count(*) from $table1));
	$tabs1{$table1} = $c;
}

foreach my $table2 (keys %tabs2) {
	my ($c) = $dbh2->selectrow_array(qq(select count(*) from $table2));
	$tabs2{$table2} = $c;
}

#do the comparisons
$support->log("Comparing entries in tables:\n");
foreach my $table (keys %tabs1) {
	next if (grep {$table eq $_} @missing);
	if ($tabs1{$table} != $tabs2{$table} ) {
		my $c1 = $tabs1{$table};
		my $c2 = $tabs2{$table};
		$support->log_warning("You have a different no of entries for table $table in ".$support->param('dbname')." ($c1) than in ".$support->param('anotherdbname')." ($c2)\n");
	}
}		

$support->finish_log;
