#!/usr/bin/env perl
# Copyright [2018] EMBL-European Bioinformatics Institute
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


### generate_solexa_config

use strict;
use warnings;
use Hum::Sort qw{ ace_sort };
use Bio::Otter::Lace::Defaults;

{

    my $usage = sub { exec('perldoc', $0) };
    # This do_getopt() call is needed to parse the otter config files
    # even if you aren't giving any arguments on the command line.
    Bio::Otter::Lace::Defaults::do_getopt(
        'h|help!'       => $usage,
        ) or $usage->();
    
    # Client communicates with otter HTTP server
#    my $cl = Bio::Otter::Lace::Defaults::make_Client();
    
    # DataSet interacts directly with an otter database
    my $ds = Bio::Otter::Server::Config->SpeciesDat->dataset('zebrafish');
    
#    my $otter_dba = $ds->otter_dba;

    my $head = "\n[zebrafish.use_filters]\n";
    my $body = '';

    my %solex = qw{
        6hpf            ERS017423
        2cells          ERS017427

        1dpf            ERS000081
        2dpf            ERS000082
        3dpf            ERS000083
        5dpf            ERS000084
        14dpf           ERS000085
        
        28dpf           NONE
        
        female_body     ERS000086
        male_body       ERS000087
        female_head     ERS000088
        male_head       ERS000089
        ovary           ERS000090

        DHAB.B1         NONE
        all             NONE
    };

    {
        my $template = q{
[zebrafish.filter.%s]
server_script=get_gff_genes
metakey=ensembl_solexagene_mar2010_db_head
csver=Zv9
analysis=%s
description=RNAseq Solexa genes from ensembl (%s / March 2010)
process_gff_file=1
zmap_column=solexa_genes
zmap_style=solexa_genes
};

        my ($meta_key) = $template =~ /metakey=(\S+)/;
        my $meta_db = $ds->satellite_dba($meta_key)->dbc;

        my $field_count = $template =~ tr/%/%/;
        foreach my $stage (sort {ace_sort($a, $b)} keys %solex) {
            my $acc = $solex{$stage};
            my $source = 'solexa_genes_' . $stage . ($acc eq 'NONE' ? '' : "-$acc");
            $source =~ s/\./-/g;
            my $sth = $meta_db->prepare(q{
                SELECT count(*)
                FROM analysis a
                  , gene g
                WHERE a.analysis_id = g.analysis_id
                  AND g.is_current = 1
                  AND a.logic_name = ?
            });
            my $logic_name = "refine_$stage";
            $sth->execute($logic_name);
            my ($count) = $sth->fetchrow;
            next unless $count;
            my @args = ($source, $logic_name);
            until (@args == $field_count) {
                push(@args, $stage);
            }
            $body .= sprintf $template, @args;
            $head .= "$source=1\n";
        }
    }

    {
        my $template = q{
[zebrafish.filter.%s]
server_script=get_gff_features
filter_module=Bio::Vega::ServerAnalysis::SolexaIntronFilter
analysis=%s
metakey=solexa_raw_introns
description=Filtered set of intron-confirming RNAseq reads (%s)
feature_kind=DnaDnaAlignFeature
zmap_column=solexa_introns
zmap_style=solexa_introns
};

        my ($meta_key) = $template =~ /metakey=(\S+)/;
        my $meta_db = $ds->satellite_dba($meta_key)->dbc;

        my $field_count = $template =~ tr/%/%/;
        foreach my $stage (sort {ace_sort($a, $b)} keys %solex) {
            # Check that there is analysis to fetch!
            my $sth = $meta_db->prepare(q{ SELECT COUNT(*) FROM analysis WHERE logic_name = ? });
            $sth->execute($stage);
            my ($count) = $sth->fetchrow;
            next unless $count;

            my $acc = $solex{$stage};
            my $source = 'solexa_introns_' . $stage . ($acc eq 'NONE' ? '' : "-$acc");
            $source =~ s/\./-/g;
            my @args = ($source);
            until (@args == $field_count) {
                push(@args, $stage);
            }
            $body .= sprintf $template, @args;
            $head .= "$source=1\n";
        }
        
    }

    {
        my $template = q{
[zebrafish.filter.%s]
server_script=get_gff_features
filter_module=Bio::Vega::ServerAnalysis::SolexaDepthBins
analysis=%s
metakey=solexa_raw_reads
csver=Zv9
description=Coverage plot of RNAseq reads (%s)
feature_kind=DnaDnaAlignFeature
zmap_column=solexa_coverage
zmap_style=solexa_coverage
};

        my ($meta_key) = $template =~ /metakey=(\S+)/;
        my $meta_db = $ds->satellite_dba($meta_key)->dbc;

        my $field_count = $template =~ tr/%/%/;
        foreach my $stage (sort {ace_sort($a, $b)} keys %solex) {
            my $acc = $solex{$stage};
            my $source = 'solexa_coverage_' . $stage . ($acc eq 'NONE' ? '' : "-$acc");
            $source =~ s/\./-/g;
            my $sth = $meta_db->prepare(q{ SELECT logic_name FROM analysis WHERE gff_feature LIKE ? });
            $sth->execute("\%$stage\%");
            my @logic_names;
            while (my ($logic) = $sth->fetchrow) {
                push(@logic_names, $logic);
            }
            next unless @logic_names;
            my @args = ($source, join(',', sort {ace_sort($a, $b)} @logic_names));
            until (@args == $field_count) {
                push(@args, $stage);
            }
            $body .= sprintf $template, @args;
            $head .= "$source=1\n";
        }
    }

    print $head, $body;
}


__END__

=head1 NAME - generate_solexa_config

=head1 AUTHOR

James Gilbert B<email> jgrg@sanger.ac.uk

