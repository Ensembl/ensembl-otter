#!/usr/bin/env perl
# Copyright [2018-2019] EMBL-European Bioinformatics Institute
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


### xml_description_tables

=pod

If you want to edit the otter XML descriptions,
it is at the end of the file.

Format should be fairly self-explanatory.  The
definition of each sub-tag must, however occur
after the containing tag.

    - jgrg

=cut

use strict;
use warnings;

{
    my $title = 'Otter XML format description';
    
    my $html = qq{<html>

<head><title>$title</title></head>

<body>

<h1>Annotation Exchange Format</h1>


<h2>Motivation</h2>

<p>When multiple centres start annotating the
human genome we will need an agreed upon format
to exchange data.   Commonly used formats (GFF,
DAS, GTF), although extremely useful, are only
really designed for sequence features and are not
easily extended to include gene structures the
extra textual information that manual annotation
provides.</p>

<p>XML is a good solution for this kind of
structured textural data.  It is well defined, 
easily extended if need be and relatively easily
parsed.</p>

<p>GAME xml - has been used.  Why don't we -
simplify it?  Otter has all the GAME information
we need.</p>


<h2>Description of stored annotations</h2>

<p>
We are proposing an xml format to store the following information 
</p>

<ul>

<li>
   The chromosomal region that is being
   transferred.  As we are working with a clone
   based assembly this contains information on
   which clone accessions make up this region and
   how they are joined together (the golden path
   or assembly information).  Thus checks can be
   made that the golden path in the xml is
   <u>exactly</u> the same as the golden path in the
   database being written to.  All the
   coordinates in the xml are in chromosomal
   (assembled) coordinates, with the exception of
   the offset within each clone that is needed to
   specify how it aligns in the assembly.
</li>

<li>
   The dna.  This is <u>optional</u> as it will be
   quite large and most centres should have the
   dna in house anyway.  But it's there as we
   suspect it will be useful for making small
   scale analyses totally portable.
</li>

<li>
   The gene annotation.  We have followed the
   annotation information provided by the Sanger
   annotators and information from the HAWK
   workshops as well as the apollo (drosophila)
   annotation model.   
</li>

</ul>

<p>

We have decided to use <b>locus</b> as the name
of the tag for the gene objects.

</p>

<p>

Genes contain a group of transcripts and
transcripts contain a group of exons so we have
three levels of objects we can annotate.  Genes,
transcripts, translations and exons can all have
a stable_id attached.

</p>


<h2>Authors</h2>

<p>Three components of the XML, sequence_fragment,
gene and transcript, have an author name and
email attached to them to record which annotator
created or last changed them.</p>

<p>Our database implementation also attaches the
author who is writing to the database to any
anonymous or changed components.</p>


<h2>Naming of Gene Components</h2>


<p>Four of the gene components, gene, transcript,
translation and exon, have a stable_id tag.  The
stable_id is an accession for the component which
is automatically assigned by the database used to
store the annotation.  It is used by the database
to track modifications to gene components,
replace old versions, and maintain a history of
changes.</p>

<p>The name tag is attached to gene and
transcripts.  In the gene it records the official
HUGO name, or an interim name assigned by the
annotator.  In transcripts it is used to store a
user readable or annotation center specific
name.</p>


<h2>Gene annotations</h2>

<p>In addition to the names described above, there
are tags under gene for storing synonyms and
annotator's remarks. The structure of the gene is
described by its constituent transcripts.</p>


<h2>Transcript annotations</h2>

<p>
Each transcript has tags that describe:</p>

<ul>
  <li>
    One or more exons
  </li>
  <li>
    Zero or one translation
  </li>
  <li>
    Whether or not the annotation is believed to
    describe the complete coding sequence and
    UTRs
  </li>
  <li>
    transcript class (see below)
  </li>
  <li>
    As most annotations will arise from an
    alignment of a known or similar protein or
    EST/cDNA sequence each transcript has attached a
    set of evidence identifiers.  These
    identifiers are accessions and versions, and
    also have a type associated with them (EST,
    cDNA, Protein, Genomic, UNKNOWN)
  </li>
</ul>

<h2>Transcript class</h2>


<p>This is a restricted vocabulary that may be
particular to the annotation center or
annotation.  A suggested list is:</p>

<ul>
  <li>
    <b>Coding</b> - a protein coding transcript.
  </li>
  <li>
    <b>Transcript</b> - unclassified non-coding transcript
  </li>
    <ul>
      <li>
        <b>Non_coding</b> - transcript which is not protein
        coding.
      </li>
      <li>
        <b>Ambiguous_ORF</b> - transcript believed to be protein
        coding, but with more than one possible open reading frame.
      </li>
      <li>
        <b>Immature</b> - transcript retaining large introns
        and which is therefore believed to be an immature splice
        product.
      </li>
      <li>
        <b>Antisense</b> - transcript believed to be an
        antisense product used in the regulation of
        the gene to which it belongs.
      </li>
    </ul>
  <li>
    <b>Putative</b> - transcript supported by very little
    sequence data, but the data does indicate splicing.
  </li>
  <li>
    <b>IG_segment</b> - an immunogobulin variable chain
    region.
  </li>
  <li>
    <b>Pseudogene</b> - gene with homology to other
    genes and products, but which is believed to
    have lost its function.
  </li>
    <ul>
      <li>
        <b>Processed_pseudogene</b> - pseudogene that
        appears to have been produced by integration
        of a reverse transcribed mRNA into the
        genome.
      </li>
      <li>
        <b>Unprocessed_pseudogene</b> - pseudogene that
        shows evidence of loss of function, but has
        exon-intron structure.
      </li>
    </ul>
  <li>
    <b>Predicted</b> - transcript partly based on
    <i>ab-initio</i> predictions.
  </li>
  <li>
    <b>Transposon</b> - an intact, and therefore potentially,
    active trasposon.
  </li>
</ul>

<h2>Exon annotations</h2>

<p>The exon's coordinates are given in the
coordinate system of the assembly described.  The
coordinates are tagged with &lt;start&gt; and
&lt;end&gt;, where start is less than (or equal
to) the end, and the &lt;strand&gt; tag is used
to indicate which strand of the DNA the exon lies
on.</p>


<h1>$title</h1>

};

    $/ = '';

    my $tag_stack = [];
    while (<DATA>) {
        my ($table_name) = /^\<(\w+)\>/m;
        if ($table_name) {
            my $tag = bless [$table_name], 'TagDescription';
            push(@$tag_stack, $tag);
            while (/^(\w.*)/mg) {
                my ($type, $value) = split /\s+/, $1, 2;
                my $tv = [$type];
                if ($value) {
                    $value =~ s/</&lt;/g;
                    $value =~ s/>/&gt;/g;
                    $value =~ s/"/&quot;/g;
                    $value =~ s/\\n/<br>\n/g;
                    push(@$tv, $value);
                };
                push(@$tag, $tv);
            }
        } else {
            die "Can't see tag name in:\n$_" if /\w/;
        }
    }
    
    my @heads = qw{
            Contains
            Mandatory
            Multiple
            Value
            Description
            };
    my $table_headings = qq{  <tr>\n}
        . join('', map "    <th>$_</th>\n", @heads)
        . qq{  </tr>\n};
    my $table_cells = qq{  <tr>\n}
        . qq{    <td>\%s</td>\n} x scalar(@heads)
        . qq{  </tr>\n};
    
    for (my $i = 0; $i < @$tag_stack; $i++) {
        my $tag = $tag_stack->[$i];
        my $container = $tag->name;
        
        # Make a new table for every tag that contains others
        # (Each tag either contains others or has a value definition.)
        if (my @contents = $tag->contained) {
            $html .= sprintf qq{<br><br>\n\n<table border="1" cellpadding="5" cellspacing="0">\n  <tr>\n    <th>&lt;%s&gt;</th>\n    <td colspan="4">%s</td>\n  </tr>\n},
                $container, $tag->description;
            $html .= $table_headings;
            CONTENT: foreach my $name (@contents) {
                # Look through all the subsequent tags until we find
                # the definition for this sub-tag.
                for (my $j = $i; $j < @$tag_stack; $j++) {
                    my $this = $tag_stack->[$j];
                    if ($this->name eq $name) {
                        $html .= sprintf $table_cells,
                            '&lt;' . $this->name . '&gt;',
                            $this->mandatory ? 'YES' : 'NO',
                            $this->multiple  ? 'YES' : 'NO',
                            $this->value       || ($this->contained ? '<b>xml</b>' : '<b><font color="red">UNKNOWN</font></b>'),
                            $this->description || 'none',
                            ;
                        next CONTENT;
                    }
                }
                die "Can't find data for tag '$name' which is part of '$container'\n";
            }
            $html .= qq{</table>\n};
        }
    }
    
    $html .= qq{\n</body>\n</html>\n};
    
    print $html;
}

package TagDescription;

sub name {
    my $self = shift;
    return $self->[0];
}

sub description {
    my $self = shift;
    
    foreach my $tv (@$self[1..$#$self]) {
        if ($tv->[0] eq 'description') {
            return $tv->[1];
        }
    }
    return "NO DESCRIPTION";
}

sub value {
    my $self = shift;
    
    foreach my $tv (@$self[1..$#$self]) {
        if ($tv->[0] eq 'value') {
            return $tv->[1];
        }
    }
}

sub mandatory {
    my $self = shift;
    
    foreach my $tv (@$self[1..$#$self]) {
        if ($tv->[0] eq 'mandatory') {
            return 1;
        }
    }
    return 0;
}

sub multiple {
    my $self = shift;
    
    foreach my $tv (@$self[1..$#$self]) {
        if ($tv->[0] eq 'multiple') {
            return 1;
        }
    }
    return 0;
}

sub contained {
    my $self = shift;
    
    my( @contained );
    foreach my $tv (@$self[1..$#$self]) {
        if ($tv->[0] eq 'contains') {
            push(@contained, $tv->[1]);
        }
    }
    return @contained;
}

1;

# Switch back to main package, or script will not see DATA filehandle
package main;

__DATA__


<otter>
description     a set of annotated genomic regions - could be a whole genome
contains        sequence_set

<sequence_set>
description     a genomic region - part or whole of a chromosome
contains        assembly_type
contains        sequence_fragment
contains        locus
contains        feature_set
contains        dna
mandatory
multiple

<assembly_type>
description     a name that identifies the assembly from which the genomic region is taken
value           string
mandatory

<sequence_fragment>
description     a genomic region - part or whole of a chromosome
contains        accession
contains        version
contains        id
contains        assembly_start
contains        assembly_end
contains        fragment_ori
contains        fragment_offset
contains        keyword
contains        remark
contains        author
contains        author_email
multiple
mandatory

<accession>
description     EMBL/Genbank/DDBJ accession number for this sequence
value           string
mandatory

<version>
description     EMBL/Genbank/DDBJ sequence version for this accession
value           integer
mandatory

<id>
description     Name of the fragment inside the otter database
value           string

<assembly_start>
description     start position of this sequence in the genomic assembly (chromosome)
value           integer
mandatory

<assembly_end>
description     end position of this sequence in the genomic assembly (chromosome)
value           integer
mandatory

<fragment_ori>
description     orientation of the fragment in the genomic assembly
value           1 if forward or\n-1 if reverse
mandatory

<fragment_offset>
description     the first base in the fragment that contributes to the assembled sequence
value           integer
mandatory

<keyword>
description     keyword(s) used in the keyword list in EMBL/Genbank/DDBJ entries
value           string
multiple

<remark>
description     remark(s) added by an annotator about the clone
value           string
multiple

<author>
description     name of the author who created or last modified the remarks or keywords attached to this fragment
value           string

<author_email>
description     email address of the author who created or last modified the remarks or keywords attached to this fragment
value           string


<locus>
description     structure and annotations of a gene
contains        name
contains        locus_symbol
contains        description
contains        stable_id
contains        type
contains        truncated
contains        author
contains        author_email
contains        synonym
contains        remark
contains        known
contains        transcript
multiple

<type>
description     a center specific class of gene
value           string

<name>
description     name assigned by the annotation center - 
value           string
mandatory

<locus_symbol>
description     agreed symbol for the locus assigned by organization responsible for curating names for genes in the particular species (eg: HUGO for human)
value           string

<known>
description     whether the gene is know, or is novel (do we still need this now that <locus_symbol> has been added?
value           0 if novel or\n1 if known

<description>
description     brief description of the gene - this is an an agreed description if the gene is known
value           string

<synonym>
description     alternative name(s) for the gene
value           string
multiple

<stable_id>
description     accession number for the gene if it has been stored in the annotation database
value           string

<truncated>
description     set to true if some of the components of a gene stored in the database are missing from the sequence_set.  This is to flag that the gene should not be edited because saving it would cause the absent components to be lost
value           0 if complete or\n1 if truncated

<author>
description     name of the author who created or last modified the gene
value           string

<author_email>
description     email address of the author who created or last modified the gene
value           string

<remark>
description     remark(s) about the gene added by an annotator
value           string
multiple

<transcript>
description     structure of a mRNA or CDS, possibly partial
contains        name
contains        stable_id
contains        translation_stable_id
contains        author
contains        author_email
contains        remark
contains        translation_start
contains        translation_end
contains        mRNA_start_not_found
contains        mRNA_end_not_found
contains        cds_start_not_found
contains        cds_end_not_found
contains        transcript_class
contains        evidence_set
contains        exon_set
multiple
mandatory

<name>
description     readable or center specific name assigned by the annotator
value           string
mandatory

<stable_id>
description     accession number for the transcript if it has been stored in the annotation database
value           string

<translation_stable_id>
description     accession number for the translation if it has been stored in the annotation database
value           string

<author>
description     name of the author who created or last modified the transcript
value           string

<author_email>
description     email address of the author who created or last modified the transcript
value           string

<remark>
description     remark(s) about the gene added by an annotator
value           string
multiple

<translation_start>
description     assembly coordinate where the translation begins
value           integer

<translation_end>
description     assembly coordinate where the translation ends
value           integer

<mRNA_start_not_found>
description     set to 1 if the 5' UTR is incomplete
value           0 or 1

<mRNA_end_not_found>
description     set to 1 if the 3' UTR is incomplete
value           0 or 1

<cds_start_not_found>
description     set to 1 if the translation start is missing
value           0 or 1

<cds_end_not_found>
description     set to 1 if the translation stop is missing
value           0 or 1

<transcript_class>
description     type of transcript - part of a resticted vocabulary of transcript categories used by the annotation center
value           string - see suggested list above


<evidence_set>
description     sequence database entries used as evidence when building this transcript
contains        evidence


<evidence>
description     a sequence database entry
contains        name
contains        type
multiple
mandatory

<name>
description     accession.sv of database sequence. (The sequence version (sv) may not be available)
value           string

<type>
description     type of the sequence database
value           EST or\ncDNA or\nGenomic or\nProtein or\nUNKNOWN


<exon_set>
description     list of exons that constitute the transcript
contains        exon
mandatory


<exon>
description     position and orientation of an exon in the assembly
contains        stable_id
contains        start
contains        end
contains        strand
contains        frame
multiple
mandatory

<stable_id>
description     accession number for the exon if it has been stored in the annotation database
value           string

<frame>
description     where to begin translation of exon. This tag is omitted for a non-coding exon
value           0 = translation begins at first base of exon (or first base of the translation region within the exon)\n1 = translation begins at second base of exon\n2 = translation begins at third base of exon

<feature_set>
description     list of simple features of strictly defined types, such as PolyA sites, that form an essential part of the gene annotation
contains        poly_a_signal
contains        poly_a_site

<poly_a_signal>
description     The location of a poly-adenylation signal
contains        start
contains        end
contains        strand
contains        score
contains        label
multiple

<poly_a_site>
description     The location of a poly-adenylation site
contains        start
contains        end
contains        strand
contains        score
contains        label
multiple

<type>
description     the kind of feature (eg: PolyA-signal)
value           string       
mandatory

<start>
description     start coordinate of the feature in the assembly
value           integer greater than zero and less than <end>
mandatory

<end>
description     end coordinate of the feature in the assembly
value           integer greater than or equal to <start>
mandatory

<strand>
description     strand of the assembly that the feature is on
value           1 if forward or\n-1 if reverse
mandatory

<score>
description     a score for the feature
value           float

<label>
description     extra information to display about the feature
value           string

<dna>
description     a string of single letter nucleotide codes - whitespace is stripped out before use. For convenience or where sequence data is not available from the public databases
value           string
